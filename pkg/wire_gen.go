// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"card-game-server-prototype/pkg/client"
	"card-game-server-prototype/pkg/common"
	"card-game-server-prototype/pkg/common/api"
	"card-game-server-prototype/pkg/common/model"
	"card-game-server-prototype/pkg/common/server"
	"card-game-server-prototype/pkg/common/service"
	"card-game-server-prototype/pkg/common/type/gamemode"
	"card-game-server-prototype/pkg/config"
	"card-game-server-prototype/pkg/core"
	"card-game-server-prototype/pkg/game/darkchess"
	"card-game-server-prototype/pkg/game/darkchess/actor"
	api2 "card-game-server-prototype/pkg/game/darkchess/api"
	model2 "card-game-server-prototype/pkg/game/darkchess/model"
	server2 "card-game-server-prototype/pkg/game/darkchess/server"
	service2 "card-game-server-prototype/pkg/game/darkchess/service"
	"card-game-server-prototype/pkg/game/darkchess/state"
	"card-game-server-prototype/pkg/game/txpoker"
	actor2 "card-game-server-prototype/pkg/game/txpoker/actor"
	api3 "card-game-server-prototype/pkg/game/txpoker/api"
	"card-game-server-prototype/pkg/game/txpoker/handler"
	model3 "card-game-server-prototype/pkg/game/txpoker/model"
	server3 "card-game-server-prototype/pkg/game/txpoker/server"
	service3 "card-game-server-prototype/pkg/game/txpoker/service"
	state2 "card-game-server-prototype/pkg/game/txpoker/state"
	"card-game-server-prototype/pkg/game/zoomtxpoker/pool"
	api4 "card-game-server-prototype/pkg/game/zoomtxpoker/pool/api"
	handler2 "card-game-server-prototype/pkg/game/zoomtxpoker/pool/handler"
	model4 "card-game-server-prototype/pkg/game/zoomtxpoker/pool/model"
	service4 "card-game-server-prototype/pkg/game/zoomtxpoker/pool/service"
	state3 "card-game-server-prototype/pkg/game/zoomtxpoker/pool/state"
	"card-game-server-prototype/pkg/util"
	"errors"
	"github.com/google/wire"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// Injectors from build_client.go:

func BuildClient() (*client.Client, error) {
	logConfig := _wireLogConfigValue
	v := _wireValue
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	authInterceptor := client.ProvideAuthInterceptor(loggerFactory)
	clientConfig := _wireClientConfigValue
	connectionServiceClient, err := client.ProvideConnectionServiceClient(clientConfig, authInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	messageServiceClient := client.ProvideMessageServiceClient(connectionServiceClient, loggerFactory)
	clientClient := client.ProvideClient(authInterceptor, connectionServiceClient, messageServiceClient, loggerFactory)
	return clientClient, nil
}

var (
	_wireLogConfigValue    = config.LogCFG
	_wireValue             = []zap.Field{}
	_wireClientConfigValue = config.ClientCFG
)

// Injectors from build_darkchess.go:

func buildLocalModeDarkChess() (*darkchess.DarkChess, error) {
	serverConfig := _wireServerConfigValue
	logConfig := _wireLogConfigValue
	v := _wireValue2
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	game := core.ProvideGame(loggerFactory)
	configConfig := _wireConfigValue
	testConfig := _wireTestConfigValue
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	msgBus := core.ProvideMsgBus(loggerFactory)
	chatServiceServer := server.ProvideChatServiceServer(game, msgBus, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server2.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server2.ProvideMessageServiceServer(msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	roomInfo := model.ProvideRoomInfo()
	localUserAPI := api.ProvideLocalUserAPI(userGroup)
	localRoomAPI := api.ProvideLocalRoomAPI()
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, localUserAPI, localRoomAPI, loggerFactory)
	playSettingGroup := model2.ProvidePlaySettingGroup()
	actionHintGroup := model2.ProvideActionHintGroup()
	eventGroup := model2.ProvideEventGroup()
	serviceBaseUserService := service2.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, userGroup, playSettingGroup, actionHintGroup, eventGroup)
	buddyGroup := model.ProvideBuddyGroup(loggerFactory)
	playerGroup := model2.ProvidePlayerGroup()
	gameInfo := model2.ProvideGameInfo()
	pickBoard := model2.ProvidePickBoard()
	board := model2.ProvideBoard()
	capturedPieces := model2.ProvideCapturedPieces()
	resyncService := service2.ProvideResyncService(game, userGroup, buddyGroup, playerGroup, roomInfo, playSettingGroup, gameInfo, pickBoard, board, capturedPieces, actionHintGroup, msgBus)
	playerService := service2.ProvidePlayerService(playerGroup)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	roundScoreboard := model2.ProvideRoundScoreboard()
	gameScoreboard := model2.ProvideGameScoreboard()
	localGameApi := api2.ProvideLocalGameAPI(configConfig)
	baseGameRepoService := service2.ProvideBaseGameRepoService(roomInfo, gameInfo, roundScoreboard, gameScoreboard, playerGroup, localGameApi, loggerFactory)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, localRoomAPI, loggerFactory)
	initState := state.ProvideInitState(stateFactory, configConfig, testConfig, roomInfo, gameInfo, userGroup, serviceBaseUserService, baseGameRepoService, baseRoomService)
	group := actor.ProvideActorGroup()
	roundScoreboardRecords := model2.ProvideRoundScoreboardRecords()
	resetGameState := state.ProvideResetGameState(stateFactory, roomInfo, userGroup, playerGroup, group, gameScoreboard, gameInfo, roundScoreboardRecords, serviceBaseUserService, board, capturedPieces, actionHintGroup)
	waitUserState := state.ProvideWaitUserState(stateFactory, userGroup)
	waitingRoomState := state.ProvideWaitingRoomState(stateFactory, buddyGroup, userGroup, serviceBaseUserService, gameInfo, roomInfo, localUserAPI)
	boardService := service2.ProvideBoardService(loggerFactory, board, capturedPieces, playerGroup, actionHintGroup)
	baseActorFactory := actor.ProvideBaseActorFactory(loggerFactory, playSettingGroup, boardService, board, actionHintGroup)
	aiActorFactory := actor.ProvideAiActorFactory(loggerFactory, playSettingGroup, boardService, board, actionHintGroup)
	startGameState := state.ProvideStartGameState(stateFactory, testConfig, userGroup, group, baseActorFactory, aiActorFactory, playerGroup, gameScoreboard, roundScoreboard, baseGameRepoService, gameInfo)
	resetRoundState := state.ProvideResetRoundState(stateFactory, serviceBaseUserService, userGroup, playerGroup, gameInfo, roundScoreboard, pickBoard, board, actionHintGroup, capturedPieces)
	startRoundState := state.ProvideStartRoundState(stateFactory, baseGameRepoService, gameInfo, playerGroup)
	baseEventService := service2.ProvideBaseEventService(roomInfo, roundScoreboard, gameScoreboard, eventGroup, localGameApi, roundScoreboardRecords, loggerFactory)
	replayGroup := model2.ProvideReplayGroup()
	endRoundState := state.ProvideEndRoundState(stateFactory, userGroup, playerGroup, eventGroup, baseEventService, gameInfo, playSettingGroup, replayGroup)
	roundScoreboardState := state.ProvideRoundScoreboardState(stateFactory, userGroup, playerGroup, group, gameInfo, roundScoreboard, roundScoreboardRecords, baseGameRepoService, boardService, capturedPieces, board)
	endGameState := state.ProvideEndGameState(stateFactory, roomInfo)
	gameScoreboardState := state.ProvideGameScoreboardState(stateFactory, roomInfo, gameScoreboard, roundScoreboardRecords, baseGameRepoService, playerGroup, group, eventGroup, baseEventService)
	closedState := state.ProvideClosedState(stateFactory, userGroup, serviceBaseUserService, baseRoomService)
	pickFirstState := state.ProvidePickFirstState(stateFactory, group, playerGroup, boardService, pickBoard, actionHintGroup)
	startTurnState := state.ProvideStartTurnState(stateFactory, boardService, actionHintGroup, board)
	waitActionState := state.ProvideWaitActionState(stateFactory, boardService, playerService, group, playerGroup, gameInfo, playSettingGroup, board, actionHintGroup, replayGroup, capturedPieces)
	revealState := state.ProvideRevealState(stateFactory, boardService, playerGroup, actionHintGroup, board, replayGroup)
	moveState := state.ProvideMoveState(stateFactory, gameInfo, boardService, actionHintGroup, board, replayGroup, playerGroup)
	captureState := state.ProvideCaptureState(stateFactory, boardService, board, actionHintGroup, capturedPieces, replayGroup, playerGroup)
	endTurnState := state.ProvideEndTurnState(stateFactory, boardService, board, actionHintGroup, playerGroup)
	drawState := state.ProvideDrawState(stateFactory)
	surrenderState := state.ProvideSurrenderState(stateFactory, playerGroup, actionHintGroup, board)
	showRoundResultState := state.ProvideShowRoundResultState(stateFactory)
	darkChess := darkchess.ProvideGame(grpcServer, connectionServiceServer, chatServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, serviceBaseUserService, resyncService, userGroup, playSettingGroup, actionHintGroup, eventGroup, board, playerService, playerGroup, msgBus, loggerFactory, game, initState, resetGameState, waitUserState, waitingRoomState, startGameState, resetRoundState, startRoundState, endRoundState, roundScoreboardState, endGameState, gameScoreboardState, closedState, pickFirstState, startTurnState, waitActionState, revealState, moveState, captureState, endTurnState, drawState, surrenderState, showRoundResultState)
	return darkChess, nil
}

var (
	_wireServerConfigValue = config.ServerCFG
	_wireValue2            = []zap.Field{}
	_wireConfigValue       = config.CFG
	_wireTestConfigValue   = config.TestCFG
)

func buildCommonModeDarkChess() (*darkchess.DarkChess, error) {
	serverConfig := _wireServerConfigValue
	logConfig := _wireLogConfigValue
	v := _wireValue2
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	game := core.ProvideGame(loggerFactory)
	configConfig := _wireConfigValue
	testConfig := _wireTestConfigValue
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	msgBus := core.ProvideMsgBus(loggerFactory)
	chatServiceServer := server.ProvideChatServiceServer(game, msgBus, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server2.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server2.ProvideMessageServiceServer(msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	roomInfo := model.ProvideRoomInfo()
	reqClient := util.ProvideHttpClient(loggerFactory, logConfig, configConfig)
	apiConfig := _wireAPIConfigValue
	baseUserAPI := api.ProvideBaseUserAPI(reqClient, apiConfig, configConfig)
	baseRoomAPI := api.ProvideBaseRoomAPI(reqClient, apiConfig, configConfig)
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, baseUserAPI, baseRoomAPI, loggerFactory)
	playSettingGroup := model2.ProvidePlaySettingGroup()
	actionHintGroup := model2.ProvideActionHintGroup()
	eventGroup := model2.ProvideEventGroup()
	serviceBaseUserService := service2.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, userGroup, playSettingGroup, actionHintGroup, eventGroup)
	buddyGroup := model.ProvideBuddyGroup(loggerFactory)
	playerGroup := model2.ProvidePlayerGroup()
	gameInfo := model2.ProvideGameInfo()
	pickBoard := model2.ProvidePickBoard()
	board := model2.ProvideBoard()
	capturedPieces := model2.ProvideCapturedPieces()
	resyncService := service2.ProvideResyncService(game, userGroup, buddyGroup, playerGroup, roomInfo, playSettingGroup, gameInfo, pickBoard, board, capturedPieces, actionHintGroup, msgBus)
	playerService := service2.ProvidePlayerService(playerGroup)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	roundScoreboard := model2.ProvideRoundScoreboard()
	gameScoreboard := model2.ProvideGameScoreboard()
	baseGameApi := api2.ProvideBaseGameAPI(reqClient, apiConfig, configConfig)
	baseGameRepoService := service2.ProvideBaseGameRepoService(roomInfo, gameInfo, roundScoreboard, gameScoreboard, playerGroup, baseGameApi, loggerFactory)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, baseRoomAPI, loggerFactory)
	initState := state.ProvideInitState(stateFactory, configConfig, testConfig, roomInfo, gameInfo, userGroup, serviceBaseUserService, baseGameRepoService, baseRoomService)
	group := actor.ProvideActorGroup()
	roundScoreboardRecords := model2.ProvideRoundScoreboardRecords()
	resetGameState := state.ProvideResetGameState(stateFactory, roomInfo, userGroup, playerGroup, group, gameScoreboard, gameInfo, roundScoreboardRecords, serviceBaseUserService, board, capturedPieces, actionHintGroup)
	waitUserState := state.ProvideWaitUserState(stateFactory, userGroup)
	waitingRoomState := state.ProvideWaitingRoomState(stateFactory, buddyGroup, userGroup, serviceBaseUserService, gameInfo, roomInfo, baseUserAPI)
	boardService := service2.ProvideBoardService(loggerFactory, board, capturedPieces, playerGroup, actionHintGroup)
	baseActorFactory := actor.ProvideBaseActorFactory(loggerFactory, playSettingGroup, boardService, board, actionHintGroup)
	aiActorFactory := actor.ProvideAiActorFactory(loggerFactory, playSettingGroup, boardService, board, actionHintGroup)
	startGameState := state.ProvideStartGameState(stateFactory, testConfig, userGroup, group, baseActorFactory, aiActorFactory, playerGroup, gameScoreboard, roundScoreboard, baseGameRepoService, gameInfo)
	resetRoundState := state.ProvideResetRoundState(stateFactory, serviceBaseUserService, userGroup, playerGroup, gameInfo, roundScoreboard, pickBoard, board, actionHintGroup, capturedPieces)
	startRoundState := state.ProvideStartRoundState(stateFactory, baseGameRepoService, gameInfo, playerGroup)
	baseEventService := service2.ProvideBaseEventService(roomInfo, roundScoreboard, gameScoreboard, eventGroup, baseGameApi, roundScoreboardRecords, loggerFactory)
	replayGroup := model2.ProvideReplayGroup()
	endRoundState := state.ProvideEndRoundState(stateFactory, userGroup, playerGroup, eventGroup, baseEventService, gameInfo, playSettingGroup, replayGroup)
	roundScoreboardState := state.ProvideRoundScoreboardState(stateFactory, userGroup, playerGroup, group, gameInfo, roundScoreboard, roundScoreboardRecords, baseGameRepoService, boardService, capturedPieces, board)
	endGameState := state.ProvideEndGameState(stateFactory, roomInfo)
	gameScoreboardState := state.ProvideGameScoreboardState(stateFactory, roomInfo, gameScoreboard, roundScoreboardRecords, baseGameRepoService, playerGroup, group, eventGroup, baseEventService)
	closedState := state.ProvideClosedState(stateFactory, userGroup, serviceBaseUserService, baseRoomService)
	pickFirstState := state.ProvidePickFirstState(stateFactory, group, playerGroup, boardService, pickBoard, actionHintGroup)
	startTurnState := state.ProvideStartTurnState(stateFactory, boardService, actionHintGroup, board)
	waitActionState := state.ProvideWaitActionState(stateFactory, boardService, playerService, group, playerGroup, gameInfo, playSettingGroup, board, actionHintGroup, replayGroup, capturedPieces)
	revealState := state.ProvideRevealState(stateFactory, boardService, playerGroup, actionHintGroup, board, replayGroup)
	moveState := state.ProvideMoveState(stateFactory, gameInfo, boardService, actionHintGroup, board, replayGroup, playerGroup)
	captureState := state.ProvideCaptureState(stateFactory, boardService, board, actionHintGroup, capturedPieces, replayGroup, playerGroup)
	endTurnState := state.ProvideEndTurnState(stateFactory, boardService, board, actionHintGroup, playerGroup)
	drawState := state.ProvideDrawState(stateFactory)
	surrenderState := state.ProvideSurrenderState(stateFactory, playerGroup, actionHintGroup, board)
	showRoundResultState := state.ProvideShowRoundResultState(stateFactory)
	darkChess := darkchess.ProvideGame(grpcServer, connectionServiceServer, chatServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, serviceBaseUserService, resyncService, userGroup, playSettingGroup, actionHintGroup, eventGroup, board, playerService, playerGroup, msgBus, loggerFactory, game, initState, resetGameState, waitUserState, waitingRoomState, startGameState, resetRoundState, startRoundState, endRoundState, roundScoreboardState, endGameState, gameScoreboardState, closedState, pickFirstState, startTurnState, waitActionState, revealState, moveState, captureState, endTurnState, drawState, surrenderState, showRoundResultState)
	return darkChess, nil
}

var (
	_wireAPIConfigValue = config.APICFG
)

func buildBuddyModeDarkChess() (*darkchess.DarkChess, error) {
	serverConfig := _wireServerConfigValue
	logConfig := _wireLogConfigValue
	v := _wireValue2
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	game := core.ProvideGame(loggerFactory)
	configConfig := _wireConfigValue
	testConfig := _wireTestConfigValue
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	msgBus := core.ProvideMsgBus(loggerFactory)
	chatServiceServer := server.ProvideChatServiceServer(game, msgBus, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server2.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server2.ProvideMessageServiceServer(msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	roomInfo := model.ProvideRoomInfo()
	reqClient := util.ProvideHttpClient(loggerFactory, logConfig, configConfig)
	apiConfig := _wireAPIConfigValue
	baseUserAPI := api.ProvideBaseUserAPI(reqClient, apiConfig, configConfig)
	baseRoomAPI := api.ProvideBaseRoomAPI(reqClient, apiConfig, configConfig)
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, baseUserAPI, baseRoomAPI, loggerFactory)
	playSettingGroup := model2.ProvidePlaySettingGroup()
	actionHintGroup := model2.ProvideActionHintGroup()
	eventGroup := model2.ProvideEventGroup()
	serviceBaseUserService := service2.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, userGroup, playSettingGroup, actionHintGroup, eventGroup)
	buddyGroup := model.ProvideBuddyGroup(loggerFactory)
	buddyModeUserService := service2.ProvideBuddyModeUserService(serviceBaseUserService, buddyGroup, baseRoomAPI)
	playerGroup := model2.ProvidePlayerGroup()
	gameInfo := model2.ProvideGameInfo()
	pickBoard := model2.ProvidePickBoard()
	board := model2.ProvideBoard()
	capturedPieces := model2.ProvideCapturedPieces()
	resyncService := service2.ProvideResyncService(game, userGroup, buddyGroup, playerGroup, roomInfo, playSettingGroup, gameInfo, pickBoard, board, capturedPieces, actionHintGroup, msgBus)
	playerService := service2.ProvidePlayerService(playerGroup)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	roundScoreboard := model2.ProvideRoundScoreboard()
	gameScoreboard := model2.ProvideGameScoreboard()
	baseGameApi := api2.ProvideBaseGameAPI(reqClient, apiConfig, configConfig)
	baseGameRepoService := service2.ProvideBaseGameRepoService(roomInfo, gameInfo, roundScoreboard, gameScoreboard, playerGroup, baseGameApi, loggerFactory)
	buddyModeGameRepoService := service2.ProvideBuddyModeGameRepoService(baseGameRepoService)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, baseRoomAPI, loggerFactory)
	initState := state.ProvideInitState(stateFactory, configConfig, testConfig, roomInfo, gameInfo, userGroup, buddyModeUserService, buddyModeGameRepoService, baseRoomService)
	group := actor.ProvideActorGroup()
	roundScoreboardRecords := model2.ProvideRoundScoreboardRecords()
	resetGameState := state.ProvideResetGameState(stateFactory, roomInfo, userGroup, playerGroup, group, gameScoreboard, gameInfo, roundScoreboardRecords, buddyModeUserService, board, capturedPieces, actionHintGroup)
	waitUserState := state.ProvideWaitUserState(stateFactory, userGroup)
	waitingRoomState := state.ProvideWaitingRoomState(stateFactory, buddyGroup, userGroup, buddyModeUserService, gameInfo, roomInfo, baseUserAPI)
	boardService := service2.ProvideBoardService(loggerFactory, board, capturedPieces, playerGroup, actionHintGroup)
	baseActorFactory := actor.ProvideBaseActorFactory(loggerFactory, playSettingGroup, boardService, board, actionHintGroup)
	aiActorFactory := actor.ProvideAiActorFactory(loggerFactory, playSettingGroup, boardService, board, actionHintGroup)
	startGameState := state.ProvideStartGameState(stateFactory, testConfig, userGroup, group, baseActorFactory, aiActorFactory, playerGroup, gameScoreboard, roundScoreboard, buddyModeGameRepoService, gameInfo)
	resetRoundState := state.ProvideResetRoundState(stateFactory, buddyModeUserService, userGroup, playerGroup, gameInfo, roundScoreboard, pickBoard, board, actionHintGroup, capturedPieces)
	startRoundState := state.ProvideStartRoundState(stateFactory, buddyModeGameRepoService, gameInfo, playerGroup)
	baseEventService := service2.ProvideBaseEventService(roomInfo, roundScoreboard, gameScoreboard, eventGroup, baseGameApi, roundScoreboardRecords, loggerFactory)
	replayGroup := model2.ProvideReplayGroup()
	endRoundState := state.ProvideEndRoundState(stateFactory, userGroup, playerGroup, eventGroup, baseEventService, gameInfo, playSettingGroup, replayGroup)
	roundScoreboardState := state.ProvideRoundScoreboardState(stateFactory, userGroup, playerGroup, group, gameInfo, roundScoreboard, roundScoreboardRecords, buddyModeGameRepoService, boardService, capturedPieces, board)
	endGameState := state.ProvideEndGameState(stateFactory, roomInfo)
	gameScoreboardState := state.ProvideGameScoreboardState(stateFactory, roomInfo, gameScoreboard, roundScoreboardRecords, buddyModeGameRepoService, playerGroup, group, eventGroup, baseEventService)
	closedState := state.ProvideClosedState(stateFactory, userGroup, buddyModeUserService, baseRoomService)
	pickFirstState := state.ProvidePickFirstState(stateFactory, group, playerGroup, boardService, pickBoard, actionHintGroup)
	startTurnState := state.ProvideStartTurnState(stateFactory, boardService, actionHintGroup, board)
	waitActionState := state.ProvideWaitActionState(stateFactory, boardService, playerService, group, playerGroup, gameInfo, playSettingGroup, board, actionHintGroup, replayGroup, capturedPieces)
	revealState := state.ProvideRevealState(stateFactory, boardService, playerGroup, actionHintGroup, board, replayGroup)
	moveState := state.ProvideMoveState(stateFactory, gameInfo, boardService, actionHintGroup, board, replayGroup, playerGroup)
	captureState := state.ProvideCaptureState(stateFactory, boardService, board, actionHintGroup, capturedPieces, replayGroup, playerGroup)
	endTurnState := state.ProvideEndTurnState(stateFactory, boardService, board, actionHintGroup, playerGroup)
	drawState := state.ProvideDrawState(stateFactory)
	surrenderState := state.ProvideSurrenderState(stateFactory, playerGroup, actionHintGroup, board)
	showRoundResultState := state.ProvideShowRoundResultState(stateFactory)
	darkChess := darkchess.ProvideGame(grpcServer, connectionServiceServer, chatServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, buddyModeUserService, resyncService, userGroup, playSettingGroup, actionHintGroup, eventGroup, board, playerService, playerGroup, msgBus, loggerFactory, game, initState, resetGameState, waitUserState, waitingRoomState, startGameState, resetRoundState, startRoundState, endRoundState, roundScoreboardState, endGameState, gameScoreboardState, closedState, pickFirstState, startTurnState, waitActionState, revealState, moveState, captureState, endTurnState, drawState, surrenderState, showRoundResultState)
	return darkChess, nil
}

// Injectors from build_game_maker.go:

func BuildGameMaker() (*GameMaker, error) {
	configConfig := _wireConfigValue
	logConfig := _wireLogConfigValue
	testConfig := _wireTestConfigValue
	v := _wireValue3
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	agones, err := ProvideAgones(loggerFactory)
	if err != nil {
		return nil, err
	}
	gameMaker := ProvideGameMaker(configConfig, logConfig, testConfig, agones, loggerFactory)
	return gameMaker, nil
}

var (
	_wireValue3 = []zap.Field{}
)

// Injectors from build_tx_poker.go:

func BuildLocalModeTXPoker() (*txpoker.TXPoker, error) {
	logConfig := _wireLogConfigValue
	v := _wireValue4
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	game := core.ProvideGame(loggerFactory)
	msgBus := core.ProvideMsgBus(loggerFactory)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	seatStatusGroup := model3.ProvideSeatStatusGroup()
	roomInfo := model.ProvideRoomInfo()
	localUserAPI := api.ProvideLocalUserAPI(userGroup)
	localRoomAPI := api.ProvideLocalRoomAPI()
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, localUserAPI, localRoomAPI, loggerFactory)
	testConfig := _wireTestConfigValue
	eventGroup := model3.ProvideEventGroup()
	playSettingGroup := model3.ProvidePlaySettingGroup()
	statsGroup := model3.ProvideStatsGroup()
	userCacheGroup := model3.ProvideUserCacheGroup()
	actionHintGroup := model3.ProvideActionHintGroup()
	playerGroup := model3.ProvidePlayerGroup()
	gameSetting := model3.ProvideGameSetting()
	gameInfo := model3.ProvideGameInfo()
	forceBuyInGroup := model3.ProvideForceBuyInGroup()
	tableProfitsGroup := model3.ProvideTableProfitsGroup()
	baseSeatStatusService := service3.ProvideBaseSeatStatusService(game, msgBus, userGroup, seatStatusGroup, actionHintGroup, playerGroup, playSettingGroup, statsGroup, gameSetting, gameInfo, localUserAPI, loggerFactory, forceBuyInGroup, eventGroup, tableProfitsGroup)
	serviceBaseUserService := service3.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, userGroup, localRoomAPI, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, userCacheGroup, baseSeatStatusService, tableProfitsGroup)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, localRoomAPI, loggerFactory)
	closedState := state2.ProvideClosedState(stateFactory, userGroup, seatStatusGroup, serviceBaseUserService, baseSeatStatusService, baseRoomService, gameSetting)
	configConfig := _wireConfigValue
	replay := model3.ProvideReplay()
	table := model3.ProvideTable()
	localGameAPI := api3.ProvideLocalGameAPI(roomInfo, playerGroup, loggerFactory)
	baseGameRepoService := service3.ProvideBaseGameRepoService(roomInfo, gameInfo, gameSetting, playerGroup, seatStatusGroup, tableProfitsGroup, replay, table, localGameAPI, msgBus, loggerFactory)
	initState := state2.ProvideInitState(stateFactory, configConfig, roomInfo, userGroup, userCacheGroup, gameInfo, gameSetting, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, forceBuyInGroup, tableProfitsGroup, serviceBaseUserService, baseRoomService, baseSeatStatusService, baseGameRepoService)
	actorGroup := actor2.ProvideActorGroup()
	statsCacheGroup := model3.ProvideStatsCacheGroup()
	chipCacheGroup := model3.ProvideChipCacheGroup()
	resetState := state2.ProvideResetState(stateFactory, testConfig, roomInfo, userGroup, gameSetting, table, playerGroup, actionHintGroup, actorGroup, seatStatusGroup, playSettingGroup, replay, statsCacheGroup, chipCacheGroup, userCacheGroup, tableProfitsGroup, forceBuyInGroup, serviceBaseUserService, baseSeatStatusService)
	waitUserState := state2.ProvideWaitUserState(stateFactory, baseSeatStatusService, gameInfo, gameSetting, baseGameRepoService, roomInfo)
	actionHintService := service3.ProvideActionHintService(actionHintGroup, seatStatusGroup, playerGroup, chipCacheGroup, gameSetting, table, replay, loggerFactory)
	baseActorFactory := actor2.ProvideBaseActorFactory(userGroup, seatStatusGroup, loggerFactory)
	dummyActorFactory := actor2.ProvideDummyActorFactory(loggerFactory, actionHintGroup, gameSetting)
	startRoundState := state2.ProvideStartRoundState(stateFactory, userGroup, seatStatusGroup, statsGroup, playerGroup, actionHintGroup, statsCacheGroup, chipCacheGroup, gameSetting, gameInfo, table, replay, actionHintService, baseGameRepoService, baseSeatStatusService, actorGroup, baseActorFactory, dummyActorFactory)
	dealPocketState := state2.ProvideDealPocketState(stateFactory, playerGroup, table, testConfig, roomInfo)
	evaluateActionState := state2.ProvideEvaluateActionState(stateFactory, actionHintGroup, seatStatusGroup, playerGroup, table, actionHintService)
	collectChipState := state2.ProvideCollectChipState(stateFactory, seatStatusGroup, chipCacheGroup, table, actionHintGroup, replay, actionHintService)
	dealCommunityState := state2.ProvideDealCommunityState(stateFactory, table, testConfig, roomInfo)
	waitActionState := state2.ProvideWaitActionState(stateFactory, seatStatusGroup, chipCacheGroup, actionHintGroup, actorGroup, playerGroup, gameInfo, baseSeatStatusService, actionHintService)
	foldState := state2.ProvideFoldState(stateFactory)
	checkState := state2.ProvideCheckState(stateFactory)
	betState := state2.ProvideBetState(stateFactory)
	callState := state2.ProvideCallState(stateFactory)
	raiseState := state2.ProvideRaiseState(stateFactory)
	allInState := state2.ProvideAllInState(stateFactory)
	declareShowdownState := state2.ProvideDeclareShowdownState(stateFactory)
	showdownState := state2.ProvideShowdownState(stateFactory, actionHintGroup, playerGroup, table, replay)
	dealRemainCommunityState := state2.ProvideDealRemainCommunityState(stateFactory, table, testConfig, roomInfo)
	baseJackpotService := service3.ProvideBaseJackpotService(gameSetting)
	evaluateWinnerState := state2.ProvideEvaluateWinnerState(stateFactory, gameSetting, playerGroup, actionHintGroup, table, replay, roomInfo, baseJackpotService)
	declareWinnerState := state2.ProvideDeclareWinnerState(stateFactory, roomInfo, seatStatusGroup, playerGroup, chipCacheGroup, table, localUserAPI)
	jackpotState := state2.ProvideJackpotState(stateFactory, playerGroup, baseGameRepoService)
	baseEventService := service3.ProvideBaseEventService(roomInfo, gameSetting, eventGroup, playerGroup, replay, table, localGameAPI, loggerFactory)
	endRoundState := state2.ProvideEndRoundState(stateFactory, gameInfo, roomInfo, seatStatusGroup, actionHintGroup, eventGroup, statsGroup, playerGroup, replay, baseSeatStatusService, baseGameRepoService, baseEventService)
	initiator := state2.Init(game, closedState, initState, resetState, waitUserState, startRoundState, dealPocketState, evaluateActionState, collectChipState, dealCommunityState, waitActionState, foldState, checkState, betState, callState, raiseState, allInState, declareShowdownState, showdownState, dealRemainCommunityState, evaluateWinnerState, declareWinnerState, jackpotState, endRoundState)
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server3.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server3.ProvideMessageServiceServer(msgBus, loggerFactory)
	serverConfig := _wireServerConfigValue
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	serverInitiator := server3.Init(connectionServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, grpcServer)
	buddyGroup := model.ProvideBuddyGroup(loggerFactory)
	resyncService := service3.ProvideResyncService(game, userGroup, buddyGroup, roomInfo, gameInfo, gameSetting, table, seatStatusGroup, actionHintGroup, playSettingGroup, statsCacheGroup, chipCacheGroup, userCacheGroup, playerGroup, tableProfitsGroup, msgBus)
	connectionHandler := handler.ProvideConnectionHandler(game, userGroup, serviceBaseUserService, resyncService, baseSeatStatusService, msgBus, loggerFactory)
	requestHandler := handler.ProvideRequestHandler(seatStatusGroup, playSettingGroup, actionHintGroup, baseSeatStatusService, forceBuyInGroup, eventGroup, msgBus, loggerFactory)
	handlerInitiator := handler.Init(game, connectionHandler, requestHandler)
	txPoker := txpoker.ProvideTXPoker(initiator, serverInitiator, handlerInitiator, game, loggerFactory)
	return txPoker, nil
}

var (
	_wireValue4 = []zap.Field{}
)

func BuildCommonModeTXPoker() (*txpoker.TXPoker, error) {
	logConfig := _wireLogConfigValue
	v := _wireValue4
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	game := core.ProvideGame(loggerFactory)
	msgBus := core.ProvideMsgBus(loggerFactory)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	seatStatusGroup := model3.ProvideSeatStatusGroup()
	roomInfo := model.ProvideRoomInfo()
	configConfig := _wireConfigValue
	reqClient := util.ProvideHttpClient(loggerFactory, logConfig, configConfig)
	apiConfig := _wireAPIConfigValue
	baseUserAPI := api.ProvideBaseUserAPI(reqClient, apiConfig, configConfig)
	baseRoomAPI := api.ProvideBaseRoomAPI(reqClient, apiConfig, configConfig)
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, baseUserAPI, baseRoomAPI, loggerFactory)
	testConfig := _wireTestConfigValue
	eventGroup := model3.ProvideEventGroup()
	playSettingGroup := model3.ProvidePlaySettingGroup()
	statsGroup := model3.ProvideStatsGroup()
	userCacheGroup := model3.ProvideUserCacheGroup()
	actionHintGroup := model3.ProvideActionHintGroup()
	playerGroup := model3.ProvidePlayerGroup()
	gameSetting := model3.ProvideGameSetting()
	gameInfo := model3.ProvideGameInfo()
	forceBuyInGroup := model3.ProvideForceBuyInGroup()
	tableProfitsGroup := model3.ProvideTableProfitsGroup()
	baseSeatStatusService := service3.ProvideBaseSeatStatusService(game, msgBus, userGroup, seatStatusGroup, actionHintGroup, playerGroup, playSettingGroup, statsGroup, gameSetting, gameInfo, baseUserAPI, loggerFactory, forceBuyInGroup, eventGroup, tableProfitsGroup)
	serviceBaseUserService := service3.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, userGroup, baseRoomAPI, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, userCacheGroup, baseSeatStatusService, tableProfitsGroup)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, baseRoomAPI, loggerFactory)
	closedState := state2.ProvideClosedState(stateFactory, userGroup, seatStatusGroup, serviceBaseUserService, baseSeatStatusService, baseRoomService, gameSetting)
	replay := model3.ProvideReplay()
	table := model3.ProvideTable()
	baseGameAPI := api3.ProvideBaseGameAPI(reqClient, apiConfig, roomInfo)
	baseGameRepoService := service3.ProvideBaseGameRepoService(roomInfo, gameInfo, gameSetting, playerGroup, seatStatusGroup, tableProfitsGroup, replay, table, baseGameAPI, msgBus, loggerFactory)
	initState := state2.ProvideInitState(stateFactory, configConfig, roomInfo, userGroup, userCacheGroup, gameInfo, gameSetting, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, forceBuyInGroup, tableProfitsGroup, serviceBaseUserService, baseRoomService, baseSeatStatusService, baseGameRepoService)
	actorGroup := actor2.ProvideActorGroup()
	statsCacheGroup := model3.ProvideStatsCacheGroup()
	chipCacheGroup := model3.ProvideChipCacheGroup()
	resetState := state2.ProvideResetState(stateFactory, testConfig, roomInfo, userGroup, gameSetting, table, playerGroup, actionHintGroup, actorGroup, seatStatusGroup, playSettingGroup, replay, statsCacheGroup, chipCacheGroup, userCacheGroup, tableProfitsGroup, forceBuyInGroup, serviceBaseUserService, baseSeatStatusService)
	waitUserState := state2.ProvideWaitUserState(stateFactory, baseSeatStatusService, gameInfo, gameSetting, baseGameRepoService, roomInfo)
	actionHintService := service3.ProvideActionHintService(actionHintGroup, seatStatusGroup, playerGroup, chipCacheGroup, gameSetting, table, replay, loggerFactory)
	baseActorFactory := actor2.ProvideBaseActorFactory(userGroup, seatStatusGroup, loggerFactory)
	dummyActorFactory := actor2.ProvideDummyActorFactory(loggerFactory, actionHintGroup, gameSetting)
	startRoundState := state2.ProvideStartRoundState(stateFactory, userGroup, seatStatusGroup, statsGroup, playerGroup, actionHintGroup, statsCacheGroup, chipCacheGroup, gameSetting, gameInfo, table, replay, actionHintService, baseGameRepoService, baseSeatStatusService, actorGroup, baseActorFactory, dummyActorFactory)
	dealPocketState := state2.ProvideDealPocketState(stateFactory, playerGroup, table, testConfig, roomInfo)
	evaluateActionState := state2.ProvideEvaluateActionState(stateFactory, actionHintGroup, seatStatusGroup, playerGroup, table, actionHintService)
	collectChipState := state2.ProvideCollectChipState(stateFactory, seatStatusGroup, chipCacheGroup, table, actionHintGroup, replay, actionHintService)
	dealCommunityState := state2.ProvideDealCommunityState(stateFactory, table, testConfig, roomInfo)
	waitActionState := state2.ProvideWaitActionState(stateFactory, seatStatusGroup, chipCacheGroup, actionHintGroup, actorGroup, playerGroup, gameInfo, baseSeatStatusService, actionHintService)
	foldState := state2.ProvideFoldState(stateFactory)
	checkState := state2.ProvideCheckState(stateFactory)
	betState := state2.ProvideBetState(stateFactory)
	callState := state2.ProvideCallState(stateFactory)
	raiseState := state2.ProvideRaiseState(stateFactory)
	allInState := state2.ProvideAllInState(stateFactory)
	declareShowdownState := state2.ProvideDeclareShowdownState(stateFactory)
	showdownState := state2.ProvideShowdownState(stateFactory, actionHintGroup, playerGroup, table, replay)
	dealRemainCommunityState := state2.ProvideDealRemainCommunityState(stateFactory, table, testConfig, roomInfo)
	baseJackpotService := service3.ProvideBaseJackpotService(gameSetting)
	evaluateWinnerState := state2.ProvideEvaluateWinnerState(stateFactory, gameSetting, playerGroup, actionHintGroup, table, replay, roomInfo, baseJackpotService)
	declareWinnerState := state2.ProvideDeclareWinnerState(stateFactory, roomInfo, seatStatusGroup, playerGroup, chipCacheGroup, table, baseUserAPI)
	jackpotState := state2.ProvideJackpotState(stateFactory, playerGroup, baseGameRepoService)
	baseEventService := service3.ProvideBaseEventService(roomInfo, gameSetting, eventGroup, playerGroup, replay, table, baseGameAPI, loggerFactory)
	endRoundState := state2.ProvideEndRoundState(stateFactory, gameInfo, roomInfo, seatStatusGroup, actionHintGroup, eventGroup, statsGroup, playerGroup, replay, baseSeatStatusService, baseGameRepoService, baseEventService)
	initiator := state2.Init(game, closedState, initState, resetState, waitUserState, startRoundState, dealPocketState, evaluateActionState, collectChipState, dealCommunityState, waitActionState, foldState, checkState, betState, callState, raiseState, allInState, declareShowdownState, showdownState, dealRemainCommunityState, evaluateWinnerState, declareWinnerState, jackpotState, endRoundState)
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server3.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server3.ProvideMessageServiceServer(msgBus, loggerFactory)
	serverConfig := _wireServerConfigValue
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	serverInitiator := server3.Init(connectionServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, grpcServer)
	buddyGroup := model.ProvideBuddyGroup(loggerFactory)
	resyncService := service3.ProvideResyncService(game, userGroup, buddyGroup, roomInfo, gameInfo, gameSetting, table, seatStatusGroup, actionHintGroup, playSettingGroup, statsCacheGroup, chipCacheGroup, userCacheGroup, playerGroup, tableProfitsGroup, msgBus)
	connectionHandler := handler.ProvideConnectionHandler(game, userGroup, serviceBaseUserService, resyncService, baseSeatStatusService, msgBus, loggerFactory)
	requestHandler := handler.ProvideRequestHandler(seatStatusGroup, playSettingGroup, actionHintGroup, baseSeatStatusService, forceBuyInGroup, eventGroup, msgBus, loggerFactory)
	handlerInitiator := handler.Init(game, connectionHandler, requestHandler)
	txPoker := txpoker.ProvideTXPoker(initiator, serverInitiator, handlerInitiator, game, loggerFactory)
	return txPoker, nil
}

func BuildClubModeTXPoker() (*txpoker.TXPoker, error) {
	logConfig := _wireLogConfigValue
	v := _wireValue4
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	game := core.ProvideGame(loggerFactory)
	msgBus := core.ProvideMsgBus(loggerFactory)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	seatStatusGroup := model3.ProvideSeatStatusGroup()
	roomInfo := model.ProvideRoomInfo()
	configConfig := _wireConfigValue
	reqClient := util.ProvideHttpClient(loggerFactory, logConfig, configConfig)
	apiConfig := _wireAPIConfigValue
	clubModeUserAPI := api3.ProvideClubModeUserAPI(reqClient, apiConfig, configConfig)
	baseRoomAPI := api.ProvideBaseRoomAPI(reqClient, apiConfig, configConfig)
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, clubModeUserAPI, baseRoomAPI, loggerFactory)
	testConfig := _wireTestConfigValue
	eventGroup := model3.ProvideEventGroup()
	playSettingGroup := model3.ProvidePlaySettingGroup()
	statsGroup := model3.ProvideStatsGroup()
	userCacheGroup := model3.ProvideUserCacheGroup()
	actionHintGroup := model3.ProvideActionHintGroup()
	playerGroup := model3.ProvidePlayerGroup()
	gameSetting := model3.ProvideGameSetting()
	gameInfo := model3.ProvideGameInfo()
	forceBuyInGroup := model3.ProvideForceBuyInGroup()
	tableProfitsGroup := model3.ProvideTableProfitsGroup()
	baseSeatStatusService := service3.ProvideBaseSeatStatusService(game, msgBus, userGroup, seatStatusGroup, actionHintGroup, playerGroup, playSettingGroup, statsGroup, gameSetting, gameInfo, clubModeUserAPI, loggerFactory, forceBuyInGroup, eventGroup, tableProfitsGroup)
	serviceBaseUserService := service3.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, userGroup, baseRoomAPI, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, userCacheGroup, baseSeatStatusService, tableProfitsGroup)
	clubModeMemberApi := api3.ProvideClubModeMemberAPI(reqClient, apiConfig, configConfig)
	clubModeUserService := service3.ProvideClubModeUserService(serviceBaseUserService, clubModeMemberApi)
	clubModeSeatStatusService := service3.ProvideClubModeSeatStatusService(baseSeatStatusService)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, baseRoomAPI, loggerFactory)
	closedState := state2.ProvideClosedState(stateFactory, userGroup, seatStatusGroup, clubModeUserService, clubModeSeatStatusService, baseRoomService, gameSetting)
	replay := model3.ProvideReplay()
	table := model3.ProvideTable()
	baseGameAPI := api3.ProvideBaseGameAPI(reqClient, apiConfig, roomInfo)
	baseGameRepoService := service3.ProvideBaseGameRepoService(roomInfo, gameInfo, gameSetting, playerGroup, seatStatusGroup, tableProfitsGroup, replay, table, baseGameAPI, msgBus, loggerFactory)
	clubModeGameAPI := api3.ProvideClubModeGameAPI(reqClient, apiConfig, configConfig)
	clubModeGameRepoService := service3.ProvideClubModeGameRepoService(baseGameRepoService, clubModeGameAPI)
	initState := state2.ProvideInitState(stateFactory, configConfig, roomInfo, userGroup, userCacheGroup, gameInfo, gameSetting, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, forceBuyInGroup, tableProfitsGroup, clubModeUserService, baseRoomService, clubModeSeatStatusService, clubModeGameRepoService)
	actorGroup := actor2.ProvideActorGroup()
	statsCacheGroup := model3.ProvideStatsCacheGroup()
	chipCacheGroup := model3.ProvideChipCacheGroup()
	resetState := state2.ProvideResetState(stateFactory, testConfig, roomInfo, userGroup, gameSetting, table, playerGroup, actionHintGroup, actorGroup, seatStatusGroup, playSettingGroup, replay, statsCacheGroup, chipCacheGroup, userCacheGroup, tableProfitsGroup, forceBuyInGroup, clubModeUserService, clubModeSeatStatusService)
	waitUserState := state2.ProvideWaitUserState(stateFactory, clubModeSeatStatusService, gameInfo, gameSetting, clubModeGameRepoService, roomInfo)
	actionHintService := service3.ProvideActionHintService(actionHintGroup, seatStatusGroup, playerGroup, chipCacheGroup, gameSetting, table, replay, loggerFactory)
	baseActorFactory := actor2.ProvideBaseActorFactory(userGroup, seatStatusGroup, loggerFactory)
	dummyActorFactory := actor2.ProvideDummyActorFactory(loggerFactory, actionHintGroup, gameSetting)
	startRoundState := state2.ProvideStartRoundState(stateFactory, userGroup, seatStatusGroup, statsGroup, playerGroup, actionHintGroup, statsCacheGroup, chipCacheGroup, gameSetting, gameInfo, table, replay, actionHintService, clubModeGameRepoService, clubModeSeatStatusService, actorGroup, baseActorFactory, dummyActorFactory)
	dealPocketState := state2.ProvideDealPocketState(stateFactory, playerGroup, table, testConfig, roomInfo)
	evaluateActionState := state2.ProvideEvaluateActionState(stateFactory, actionHintGroup, seatStatusGroup, playerGroup, table, actionHintService)
	collectChipState := state2.ProvideCollectChipState(stateFactory, seatStatusGroup, chipCacheGroup, table, actionHintGroup, replay, actionHintService)
	dealCommunityState := state2.ProvideDealCommunityState(stateFactory, table, testConfig, roomInfo)
	waitActionState := state2.ProvideWaitActionState(stateFactory, seatStatusGroup, chipCacheGroup, actionHintGroup, actorGroup, playerGroup, gameInfo, clubModeSeatStatusService, actionHintService)
	foldState := state2.ProvideFoldState(stateFactory)
	checkState := state2.ProvideCheckState(stateFactory)
	betState := state2.ProvideBetState(stateFactory)
	callState := state2.ProvideCallState(stateFactory)
	raiseState := state2.ProvideRaiseState(stateFactory)
	allInState := state2.ProvideAllInState(stateFactory)
	declareShowdownState := state2.ProvideDeclareShowdownState(stateFactory)
	showdownState := state2.ProvideShowdownState(stateFactory, actionHintGroup, playerGroup, table, replay)
	dealRemainCommunityState := state2.ProvideDealRemainCommunityState(stateFactory, table, testConfig, roomInfo)
	clubModeJackpotService := service3.ProvideClubModeJackpotService(gameSetting)
	evaluateWinnerState := state2.ProvideEvaluateWinnerState(stateFactory, gameSetting, playerGroup, actionHintGroup, table, replay, roomInfo, clubModeJackpotService)
	declareWinnerState := state2.ProvideDeclareWinnerState(stateFactory, roomInfo, seatStatusGroup, playerGroup, chipCacheGroup, table, clubModeUserAPI)
	jackpotState := state2.ProvideJackpotState(stateFactory, playerGroup, clubModeGameRepoService)
	baseEventService := service3.ProvideBaseEventService(roomInfo, gameSetting, eventGroup, playerGroup, replay, table, baseGameAPI, loggerFactory)
	endRoundState := state2.ProvideEndRoundState(stateFactory, gameInfo, roomInfo, seatStatusGroup, actionHintGroup, eventGroup, statsGroup, playerGroup, replay, clubModeSeatStatusService, clubModeGameRepoService, baseEventService)
	initiator := state2.Init(game, closedState, initState, resetState, waitUserState, startRoundState, dealPocketState, evaluateActionState, collectChipState, dealCommunityState, waitActionState, foldState, checkState, betState, callState, raiseState, allInState, declareShowdownState, showdownState, dealRemainCommunityState, evaluateWinnerState, declareWinnerState, jackpotState, endRoundState)
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server3.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server3.ProvideMessageServiceServer(msgBus, loggerFactory)
	serverConfig := _wireServerConfigValue
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	serverInitiator := server3.Init(connectionServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, grpcServer)
	buddyGroup := model.ProvideBuddyGroup(loggerFactory)
	resyncService := service3.ProvideResyncService(game, userGroup, buddyGroup, roomInfo, gameInfo, gameSetting, table, seatStatusGroup, actionHintGroup, playSettingGroup, statsCacheGroup, chipCacheGroup, userCacheGroup, playerGroup, tableProfitsGroup, msgBus)
	connectionHandler := handler.ProvideConnectionHandler(game, userGroup, clubModeUserService, resyncService, clubModeSeatStatusService, msgBus, loggerFactory)
	requestHandler := handler.ProvideRequestHandler(seatStatusGroup, playSettingGroup, actionHintGroup, clubModeSeatStatusService, forceBuyInGroup, eventGroup, msgBus, loggerFactory)
	handlerInitiator := handler.Init(game, connectionHandler, requestHandler)
	txPoker := txpoker.ProvideTXPoker(initiator, serverInitiator, handlerInitiator, game, loggerFactory)
	return txPoker, nil
}

func BuildBuddyModeTXPoker() (*txpoker.TXPoker, error) {
	logConfig := _wireLogConfigValue
	v := _wireValue4
	loggerFactory := util.ProvideLoggerFactory(logConfig, v)
	game := core.ProvideGame(loggerFactory)
	msgBus := core.ProvideMsgBus(loggerFactory)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	seatStatusGroup := model3.ProvideSeatStatusGroup()
	roomInfo := model.ProvideRoomInfo()
	configConfig := _wireConfigValue
	reqClient := util.ProvideHttpClient(loggerFactory, logConfig, configConfig)
	apiConfig := _wireAPIConfigValue
	baseUserAPI := api.ProvideBaseUserAPI(reqClient, apiConfig, configConfig)
	baseRoomAPI := api.ProvideBaseRoomAPI(reqClient, apiConfig, configConfig)
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, baseUserAPI, baseRoomAPI, loggerFactory)
	testConfig := _wireTestConfigValue
	eventGroup := model3.ProvideEventGroup()
	playSettingGroup := model3.ProvidePlaySettingGroup()
	statsGroup := model3.ProvideStatsGroup()
	userCacheGroup := model3.ProvideUserCacheGroup()
	actionHintGroup := model3.ProvideActionHintGroup()
	playerGroup := model3.ProvidePlayerGroup()
	gameSetting := model3.ProvideGameSetting()
	gameInfo := model3.ProvideGameInfo()
	forceBuyInGroup := model3.ProvideForceBuyInGroup()
	tableProfitsGroup := model3.ProvideTableProfitsGroup()
	baseSeatStatusService := service3.ProvideBaseSeatStatusService(game, msgBus, userGroup, seatStatusGroup, actionHintGroup, playerGroup, playSettingGroup, statsGroup, gameSetting, gameInfo, baseUserAPI, loggerFactory, forceBuyInGroup, eventGroup, tableProfitsGroup)
	serviceBaseUserService := service3.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, userGroup, baseRoomAPI, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, userCacheGroup, baseSeatStatusService, tableProfitsGroup)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, baseRoomAPI, loggerFactory)
	closedState := state2.ProvideClosedState(stateFactory, userGroup, seatStatusGroup, serviceBaseUserService, baseSeatStatusService, baseRoomService, gameSetting)
	replay := model3.ProvideReplay()
	table := model3.ProvideTable()
	baseGameAPI := api3.ProvideBaseGameAPI(reqClient, apiConfig, roomInfo)
	baseGameRepoService := service3.ProvideBaseGameRepoService(roomInfo, gameInfo, gameSetting, playerGroup, seatStatusGroup, tableProfitsGroup, replay, table, baseGameAPI, msgBus, loggerFactory)
	buddyModeGameRepoService := service3.ProvideBuddyModeGameRepoService(baseGameRepoService, loggerFactory)
	initState := state2.ProvideInitState(stateFactory, configConfig, roomInfo, userGroup, userCacheGroup, gameInfo, gameSetting, seatStatusGroup, eventGroup, playSettingGroup, statsGroup, forceBuyInGroup, tableProfitsGroup, serviceBaseUserService, baseRoomService, baseSeatStatusService, buddyModeGameRepoService)
	actorGroup := actor2.ProvideActorGroup()
	statsCacheGroup := model3.ProvideStatsCacheGroup()
	chipCacheGroup := model3.ProvideChipCacheGroup()
	resetState := state2.ProvideResetState(stateFactory, testConfig, roomInfo, userGroup, gameSetting, table, playerGroup, actionHintGroup, actorGroup, seatStatusGroup, playSettingGroup, replay, statsCacheGroup, chipCacheGroup, userCacheGroup, tableProfitsGroup, forceBuyInGroup, serviceBaseUserService, baseSeatStatusService)
	waitUserState := state2.ProvideWaitUserState(stateFactory, baseSeatStatusService, gameInfo, gameSetting, buddyModeGameRepoService, roomInfo)
	actionHintService := service3.ProvideActionHintService(actionHintGroup, seatStatusGroup, playerGroup, chipCacheGroup, gameSetting, table, replay, loggerFactory)
	baseActorFactory := actor2.ProvideBaseActorFactory(userGroup, seatStatusGroup, loggerFactory)
	dummyActorFactory := actor2.ProvideDummyActorFactory(loggerFactory, actionHintGroup, gameSetting)
	startRoundState := state2.ProvideStartRoundState(stateFactory, userGroup, seatStatusGroup, statsGroup, playerGroup, actionHintGroup, statsCacheGroup, chipCacheGroup, gameSetting, gameInfo, table, replay, actionHintService, buddyModeGameRepoService, baseSeatStatusService, actorGroup, baseActorFactory, dummyActorFactory)
	dealPocketState := state2.ProvideDealPocketState(stateFactory, playerGroup, table, testConfig, roomInfo)
	evaluateActionState := state2.ProvideEvaluateActionState(stateFactory, actionHintGroup, seatStatusGroup, playerGroup, table, actionHintService)
	collectChipState := state2.ProvideCollectChipState(stateFactory, seatStatusGroup, chipCacheGroup, table, actionHintGroup, replay, actionHintService)
	dealCommunityState := state2.ProvideDealCommunityState(stateFactory, table, testConfig, roomInfo)
	waitActionState := state2.ProvideWaitActionState(stateFactory, seatStatusGroup, chipCacheGroup, actionHintGroup, actorGroup, playerGroup, gameInfo, baseSeatStatusService, actionHintService)
	foldState := state2.ProvideFoldState(stateFactory)
	checkState := state2.ProvideCheckState(stateFactory)
	betState := state2.ProvideBetState(stateFactory)
	callState := state2.ProvideCallState(stateFactory)
	raiseState := state2.ProvideRaiseState(stateFactory)
	allInState := state2.ProvideAllInState(stateFactory)
	declareShowdownState := state2.ProvideDeclareShowdownState(stateFactory)
	showdownState := state2.ProvideShowdownState(stateFactory, actionHintGroup, playerGroup, table, replay)
	dealRemainCommunityState := state2.ProvideDealRemainCommunityState(stateFactory, table, testConfig, roomInfo)
	baseJackpotService := service3.ProvideBaseJackpotService(gameSetting)
	evaluateWinnerState := state2.ProvideEvaluateWinnerState(stateFactory, gameSetting, playerGroup, actionHintGroup, table, replay, roomInfo, baseJackpotService)
	declareWinnerState := state2.ProvideDeclareWinnerState(stateFactory, roomInfo, seatStatusGroup, playerGroup, chipCacheGroup, table, baseUserAPI)
	jackpotState := state2.ProvideJackpotState(stateFactory, playerGroup, buddyModeGameRepoService)
	baseEventService := service3.ProvideBaseEventService(roomInfo, gameSetting, eventGroup, playerGroup, replay, table, baseGameAPI, loggerFactory)
	endRoundState := state2.ProvideEndRoundState(stateFactory, gameInfo, roomInfo, seatStatusGroup, actionHintGroup, eventGroup, statsGroup, playerGroup, replay, baseSeatStatusService, buddyModeGameRepoService, baseEventService)
	initiator := state2.Init(game, closedState, initState, resetState, waitUserState, startRoundState, dealPocketState, evaluateActionState, collectChipState, dealCommunityState, waitActionState, foldState, checkState, betState, callState, raiseState, allInState, declareShowdownState, showdownState, dealRemainCommunityState, evaluateWinnerState, declareWinnerState, jackpotState, endRoundState)
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server3.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server3.ProvideMessageServiceServer(msgBus, loggerFactory)
	serverConfig := _wireServerConfigValue
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	serverInitiator := server3.Init(connectionServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, grpcServer)
	buddyGroup := model.ProvideBuddyGroup(loggerFactory)
	resyncService := service3.ProvideResyncService(game, userGroup, buddyGroup, roomInfo, gameInfo, gameSetting, table, seatStatusGroup, actionHintGroup, playSettingGroup, statsCacheGroup, chipCacheGroup, userCacheGroup, playerGroup, tableProfitsGroup, msgBus)
	connectionHandler := handler.ProvideConnectionHandler(game, userGroup, serviceBaseUserService, resyncService, baseSeatStatusService, msgBus, loggerFactory)
	requestHandler := handler.ProvideRequestHandler(seatStatusGroup, playSettingGroup, actionHintGroup, baseSeatStatusService, forceBuyInGroup, eventGroup, msgBus, loggerFactory)
	handlerInitiator := handler.Init(game, connectionHandler, requestHandler)
	txPoker := txpoker.ProvideTXPoker(initiator, serverInitiator, handlerInitiator, game, loggerFactory)
	return txPoker, nil
}

// Injectors from build_zoom_tx_poker.go:

func buildLocalModeZoomTXPoker(arg []zapcore.Field) (*pool.ZoomTXPokerPool, error) {
	logConfig := _wireLogConfigValue
	loggerFactory := util.ProvideLoggerFactory(logConfig, arg)
	game := core.ProvideGame(loggerFactory)
	msgBus := core.ProvideMsgBus(loggerFactory)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	roomInfo := model.ProvideRoomInfo()
	localUserAPI := api.ProvideLocalUserAPI(userGroup)
	localRoomAPI := api.ProvideLocalRoomAPI()
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, localUserAPI, localRoomAPI, loggerFactory)
	testConfig := _wireTestConfigValue
	gameSetting := model4.ProvideGameSetting()
	playSettingGroup := model4.ProvidePlaySettingGroup()
	statsGroup := model4.ProvideStatsGroup()
	participantGroup := model4.ProvideParticipantGroup()
	playedHistoryGroup := model4.ProvidePlayedHistoryGroup()
	forceBuyInGroup := model4.ProvideForceBuyInGroup()
	tableProfitsGroup := model4.ProvideTableProfitsGroup()
	redisClientConfig := _wireRedisClientConfigValue
	redisClient := util.ProvideRedisClient(redisClientConfig)
	chipSnapshotService := service4.ProvideChipSnapshotService(roomInfo, redisClient, loggerFactory)
	participantService := service4.ProvideParticipantService(game, msgBus, userGroup, participantGroup, localUserAPI, gameSetting, forceBuyInGroup, tableProfitsGroup, chipSnapshotService, loggerFactory)
	serviceBaseUserService := service4.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, gameSetting, userGroup, localRoomAPI, playSettingGroup, statsGroup, participantGroup, playedHistoryGroup, forceBuyInGroup, tableProfitsGroup, participantService)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, localRoomAPI, loggerFactory)
	closedState := state3.ProvideClosedState(stateFactory, userGroup, serviceBaseUserService, baseRoomService)
	configConfig := _wireConfigValue
	localGameAPI := api4.ProvideLocalGameAPI(roomInfo, loggerFactory)
	baseGameRepoService := service4.ProvideBaseGameRepoService(roomInfo, gameSetting, localGameAPI, msgBus, loggerFactory)
	leaveService := service4.ProvideLeaveService(game, participantGroup, userGroup, serviceBaseUserService, participantService, loggerFactory)
	initState := state3.ProvideInitState(stateFactory, configConfig, testConfig, roomInfo, userGroup, gameSetting, playSettingGroup, statsGroup, participantGroup, playedHistoryGroup, forceBuyInGroup, tableProfitsGroup, baseGameRepoService, serviceBaseUserService, baseRoomService, participantService, leaveService)
	router := core.ProvideRouter(msgBus, loggerFactory)
	resyncService := service4.ProvideResyncService(userGroup, roomInfo, gameSetting, participantGroup, playSettingGroup, statsGroup, msgBus, loggerFactory)
	roleService := service4.ProvideRoleService(playedHistoryGroup)
	matchingState := state3.ProvideMatchingState(stateFactory, testConfig, router, userGroup, gameSetting, participantGroup, playedHistoryGroup, statsGroup, playSettingGroup, forceBuyInGroup, tableProfitsGroup, participantService, resyncService, roleService, leaveService, localUserAPI)
	initiator := state3.Init(game, closedState, initState, matchingState)
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server3.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server3.ProvideMessageServiceServer(msgBus, loggerFactory)
	serverConfig := _wireServerConfigValue
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	serverInitiator := server3.Init(connectionServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, grpcServer)
	connectionHandler := handler2.ProvideConnectionHandler(game, userGroup, participantGroup, serviceBaseUserService, participantService, leaveService, resyncService, msgBus, loggerFactory)
	requestHandler := handler2.ProvideRequestHandler(participantGroup, playSettingGroup, forceBuyInGroup, participantService, game, msgBus, loggerFactory)
	handlerInitiator := handler2.Init(game, connectionHandler, requestHandler, router)
	zoomTXPokerPool := pool.ProvideZoomTXPokerPool(initiator, serverInitiator, handlerInitiator, game, loggerFactory)
	return zoomTXPokerPool, nil
}

var (
	_wireRedisClientConfigValue = config.RedisClientCFG
)

func buildCommonModeZoomTXPoker(arg []zapcore.Field) (*pool.ZoomTXPokerPool, error) {
	logConfig := _wireLogConfigValue
	loggerFactory := util.ProvideLoggerFactory(logConfig, arg)
	game := core.ProvideGame(loggerFactory)
	msgBus := core.ProvideMsgBus(loggerFactory)
	stateFactory := core.ProvideStateFactory(game, msgBus, loggerFactory)
	userGroup := model.ProvideUserGroup(loggerFactory)
	roomInfo := model.ProvideRoomInfo()
	configConfig := _wireConfigValue
	reqClient := util.ProvideHttpClient(loggerFactory, logConfig, configConfig)
	apiConfig := _wireAPIConfigValue
	baseUserAPI := api.ProvideBaseUserAPI(reqClient, apiConfig, configConfig)
	baseRoomAPI := api.ProvideBaseRoomAPI(reqClient, apiConfig, configConfig)
	baseUserService := service.ProvideBaseUserService(userGroup, msgBus, roomInfo, baseUserAPI, baseRoomAPI, loggerFactory)
	testConfig := _wireTestConfigValue
	gameSetting := model4.ProvideGameSetting()
	playSettingGroup := model4.ProvidePlaySettingGroup()
	statsGroup := model4.ProvideStatsGroup()
	participantGroup := model4.ProvideParticipantGroup()
	playedHistoryGroup := model4.ProvidePlayedHistoryGroup()
	forceBuyInGroup := model4.ProvideForceBuyInGroup()
	tableProfitsGroup := model4.ProvideTableProfitsGroup()
	redisClientConfig := _wireRedisClientConfigValue
	redisClient := util.ProvideRedisClient(redisClientConfig)
	chipSnapshotService := service4.ProvideChipSnapshotService(roomInfo, redisClient, loggerFactory)
	participantService := service4.ProvideParticipantService(game, msgBus, userGroup, participantGroup, baseUserAPI, gameSetting, forceBuyInGroup, tableProfitsGroup, chipSnapshotService, loggerFactory)
	serviceBaseUserService := service4.ProvideBaseUserService(baseUserService, msgBus, testConfig, roomInfo, gameSetting, userGroup, baseRoomAPI, playSettingGroup, statsGroup, participantGroup, playedHistoryGroup, forceBuyInGroup, tableProfitsGroup, participantService)
	baseRoomService := service.ProvideBaseRoomService(roomInfo, baseRoomAPI, loggerFactory)
	closedState := state3.ProvideClosedState(stateFactory, userGroup, serviceBaseUserService, baseRoomService)
	baseGameAPI := api4.ProvideBaseGameAPI(reqClient, apiConfig)
	baseGameRepoService := service4.ProvideBaseGameRepoService(roomInfo, gameSetting, baseGameAPI, msgBus, loggerFactory)
	leaveService := service4.ProvideLeaveService(game, participantGroup, userGroup, serviceBaseUserService, participantService, loggerFactory)
	initState := state3.ProvideInitState(stateFactory, configConfig, testConfig, roomInfo, userGroup, gameSetting, playSettingGroup, statsGroup, participantGroup, playedHistoryGroup, forceBuyInGroup, tableProfitsGroup, baseGameRepoService, serviceBaseUserService, baseRoomService, participantService, leaveService)
	router := core.ProvideRouter(msgBus, loggerFactory)
	resyncService := service4.ProvideResyncService(userGroup, roomInfo, gameSetting, participantGroup, playSettingGroup, statsGroup, msgBus, loggerFactory)
	roleService := service4.ProvideRoleService(playedHistoryGroup)
	matchingState := state3.ProvideMatchingState(stateFactory, testConfig, router, userGroup, gameSetting, participantGroup, playedHistoryGroup, statsGroup, playSettingGroup, forceBuyInGroup, tableProfitsGroup, participantService, resyncService, roleService, leaveService, baseUserAPI)
	initiator := state3.Init(game, closedState, initState, matchingState)
	peerFactory := server.ProvidePeerFactory(loggerFactory)
	connectionServiceServer := server.ProvideConnectionServiceServer(game, configConfig, testConfig, peerFactory, loggerFactory)
	emoteRpcServiceServer := server.ProvideEmoteServiceServer(game, msgBus, loggerFactory)
	actionServiceServer := server3.ProvideActionServiceServer(game, msgBus, loggerFactory)
	messageServiceServer := server3.ProvideMessageServiceServer(msgBus, loggerFactory)
	serverConfig := _wireServerConfigValue
	authInterceptor := server.ProvideAuthInterceptor(connectionServiceServer, configConfig, testConfig, loggerFactory)
	logInterceptor := server.ProvideLogInterceptor(connectionServiceServer, loggerFactory)
	grpcServer, err := server.ProvideGrpcServer(serverConfig, authInterceptor, logInterceptor, loggerFactory)
	if err != nil {
		return nil, err
	}
	serverInitiator := server3.Init(connectionServiceServer, emoteRpcServiceServer, actionServiceServer, messageServiceServer, grpcServer)
	connectionHandler := handler2.ProvideConnectionHandler(game, userGroup, participantGroup, serviceBaseUserService, participantService, leaveService, resyncService, msgBus, loggerFactory)
	requestHandler := handler2.ProvideRequestHandler(participantGroup, playSettingGroup, forceBuyInGroup, participantService, game, msgBus, loggerFactory)
	handlerInitiator := handler2.Init(game, connectionHandler, requestHandler, router)
	zoomTXPokerPool := pool.ProvideZoomTXPokerPool(initiator, serverInitiator, handlerInitiator, game, loggerFactory)
	return zoomTXPokerPool, nil
}

// build_darkchess.go:

var providerDarkChessSet = wire.NewSet(config.ProviderSet, core.ProviderSet, common.ProviderSet, util.ProviderSet, wire.Value([]zap.Field{}), darkchess.ProviderSet)

func buildDarkChess(isLocalMode bool, gameMode gamemode.GameMode) (*darkchess.DarkChess, error) {
	if isLocalMode {
		return buildLocalModeDarkChess()
	}

	switch gameMode {
	case gamemode.Buddy:
		return buildBuddyModeDarkChess()
	case gamemode.Common:
		return buildCommonModeDarkChess()
	default:
		return nil, errors.New("invalid game mode")
	}
}

// build_tx_poker.go:

var txPokerProviderSet = wire.NewSet(config.ProviderSet, core.ProviderSet, common.ProviderSet, util.ProviderSet, wire.Value([]zap.Field{}), txpoker.ProviderSet)

// build_zoom_tx_poker.go:

var zoomTXPokerProviderSet = wire.NewSet(config.ProviderSet, core.ProviderSet, common.ProviderSet, util.ProviderSet, pool.ProviderSet)

func buildZoomTXPoker(isLocalMode bool, gameMode gamemode.GameMode) (*pool.ZoomTXPokerPool, error) {
	zapField := []zap.Field{zap.String("zoom-module", "zoom-pool")}

	if isLocalMode {
		return buildLocalModeZoomTXPoker(zapField)
	}

	switch gameMode {
	case gamemode.Common:
		return buildCommonModeZoomTXPoker(zapField)
	default:
		return nil, errors.New("invalid game mode")
	}
}
