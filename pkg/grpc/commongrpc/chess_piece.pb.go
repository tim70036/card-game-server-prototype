// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: common/chess_piece.proto

package commongrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CnChessColorType int32

const (
	CnChessColorType_CN_CHESS_COLOR_TYPE_INVALID CnChessColorType = 0
	CnChessColorType_CN_CHESS_COLOR_TYPE_RED     CnChessColorType = 256
	CnChessColorType_CN_CHESS_COLOR_TYPE_BLACK   CnChessColorType = 512
)

// Enum value maps for CnChessColorType.
var (
	CnChessColorType_name = map[int32]string{
		0:   "CN_CHESS_COLOR_TYPE_INVALID",
		256: "CN_CHESS_COLOR_TYPE_RED",
		512: "CN_CHESS_COLOR_TYPE_BLACK",
	}
	CnChessColorType_value = map[string]int32{
		"CN_CHESS_COLOR_TYPE_INVALID": 0,
		"CN_CHESS_COLOR_TYPE_RED":     256,
		"CN_CHESS_COLOR_TYPE_BLACK":   512,
	}
)

func (x CnChessColorType) Enum() *CnChessColorType {
	p := new(CnChessColorType)
	*p = x
	return p
}

func (x CnChessColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CnChessColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_chess_piece_proto_enumTypes[0].Descriptor()
}

func (CnChessColorType) Type() protoreflect.EnumType {
	return &file_common_chess_piece_proto_enumTypes[0]
}

func (x CnChessColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CnChessColorType.Descriptor instead.
func (CnChessColorType) EnumDescriptor() ([]byte, []int) {
	return file_common_chess_piece_proto_rawDescGZIP(), []int{0}
}

type CnChessPieceType int32

const (
	CnChessPieceType_CN_CHESS_PIECE_TYPE_INVALID  CnChessPieceType = 0
	CnChessPieceType_CN_CHESS_PIECE_TYPE_GENERAL  CnChessPieceType = 16
	CnChessPieceType_CN_CHESS_PIECE_TYPE_ADVISOR  CnChessPieceType = 32
	CnChessPieceType_CN_CHESS_PIECE_TYPE_ELEPHANT CnChessPieceType = 48
	CnChessPieceType_CN_CHESS_PIECE_TYPE_CHARIOT  CnChessPieceType = 64
	CnChessPieceType_CN_CHESS_PIECE_TYPE_HORSE    CnChessPieceType = 80
	CnChessPieceType_CN_CHESS_PIECE_TYPE_CANNON   CnChessPieceType = 96
	CnChessPieceType_CN_CHESS_PIECE_TYPE_SOLDIER  CnChessPieceType = 112
)

// Enum value maps for CnChessPieceType.
var (
	CnChessPieceType_name = map[int32]string{
		0:   "CN_CHESS_PIECE_TYPE_INVALID",
		16:  "CN_CHESS_PIECE_TYPE_GENERAL",
		32:  "CN_CHESS_PIECE_TYPE_ADVISOR",
		48:  "CN_CHESS_PIECE_TYPE_ELEPHANT",
		64:  "CN_CHESS_PIECE_TYPE_CHARIOT",
		80:  "CN_CHESS_PIECE_TYPE_HORSE",
		96:  "CN_CHESS_PIECE_TYPE_CANNON",
		112: "CN_CHESS_PIECE_TYPE_SOLDIER",
	}
	CnChessPieceType_value = map[string]int32{
		"CN_CHESS_PIECE_TYPE_INVALID":  0,
		"CN_CHESS_PIECE_TYPE_GENERAL":  16,
		"CN_CHESS_PIECE_TYPE_ADVISOR":  32,
		"CN_CHESS_PIECE_TYPE_ELEPHANT": 48,
		"CN_CHESS_PIECE_TYPE_CHARIOT":  64,
		"CN_CHESS_PIECE_TYPE_HORSE":    80,
		"CN_CHESS_PIECE_TYPE_CANNON":   96,
		"CN_CHESS_PIECE_TYPE_SOLDIER":  112,
	}
)

func (x CnChessPieceType) Enum() *CnChessPieceType {
	p := new(CnChessPieceType)
	*p = x
	return p
}

func (x CnChessPieceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CnChessPieceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_chess_piece_proto_enumTypes[1].Descriptor()
}

func (CnChessPieceType) Type() protoreflect.EnumType {
	return &file_common_chess_piece_proto_enumTypes[1]
}

func (x CnChessPieceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CnChessPieceType.Descriptor instead.
func (CnChessPieceType) EnumDescriptor() ([]byte, []int) {
	return file_common_chess_piece_proto_rawDescGZIP(), []int{1}
}

type CnChessPiece int32

const (
	CnChessPiece_CN_CHESS_PIECE_INVALID          CnChessPiece = 0
	CnChessPiece_CN_CHESS_PIECE_GENERAL_RED      CnChessPiece = 272
	CnChessPiece_CN_CHESS_PIECE_ADVISOR_RED_0    CnChessPiece = 288
	CnChessPiece_CN_CHESS_PIECE_ADVISOR_RED_1    CnChessPiece = 289
	CnChessPiece_CN_CHESS_PIECE_ELEPHANT_RED_0   CnChessPiece = 304
	CnChessPiece_CN_CHESS_PIECE_ELEPHANT_RED_1   CnChessPiece = 305
	CnChessPiece_CN_CHESS_PIECE_CHARIOT_RED_0    CnChessPiece = 320
	CnChessPiece_CN_CHESS_PIECE_CHARIOT_RED_1    CnChessPiece = 321
	CnChessPiece_CN_CHESS_PIECE_HORSE_RED_0      CnChessPiece = 336
	CnChessPiece_CN_CHESS_PIECE_HORSE_RED_1      CnChessPiece = 337
	CnChessPiece_CN_CHESS_PIECE_CANNON_RED_0     CnChessPiece = 352
	CnChessPiece_CN_CHESS_PIECE_CANNON_RED_1     CnChessPiece = 353
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_RED_0    CnChessPiece = 368
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_RED_1    CnChessPiece = 369
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_RED_2    CnChessPiece = 370
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_RED_3    CnChessPiece = 371
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_RED_4    CnChessPiece = 372
	CnChessPiece_CN_CHESS_PIECE_GENERAL_BLACK    CnChessPiece = 528
	CnChessPiece_CN_CHESS_PIECE_ADVISOR_BLACK_0  CnChessPiece = 544
	CnChessPiece_CN_CHESS_PIECE_ADVISOR_BLACK_1  CnChessPiece = 545
	CnChessPiece_CN_CHESS_PIECE_ELEPHANT_BLACK_0 CnChessPiece = 560
	CnChessPiece_CN_CHESS_PIECE_ELEPHANT_BLACK_1 CnChessPiece = 561
	CnChessPiece_CN_CHESS_PIECE_CHARIOT_BLACK_0  CnChessPiece = 576
	CnChessPiece_CN_CHESS_PIECE_CHARIOT_BLACK_1  CnChessPiece = 577
	CnChessPiece_CN_CHESS_PIECE_HORSE_BLACK_0    CnChessPiece = 592
	CnChessPiece_CN_CHESS_PIECE_HORSE_BLACK_1    CnChessPiece = 593
	CnChessPiece_CN_CHESS_PIECE_CANNON_BLACK_0   CnChessPiece = 608
	CnChessPiece_CN_CHESS_PIECE_CANNON_BLACK_1   CnChessPiece = 609
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_BLACK_0  CnChessPiece = 624
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_BLACK_1  CnChessPiece = 625
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_BLACK_2  CnChessPiece = 626
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_BLACK_3  CnChessPiece = 627
	CnChessPiece_CN_CHESS_PIECE_SOLDIER_BLACK_4  CnChessPiece = 628
)

// Enum value maps for CnChessPiece.
var (
	CnChessPiece_name = map[int32]string{
		0:   "CN_CHESS_PIECE_INVALID",
		272: "CN_CHESS_PIECE_GENERAL_RED",
		288: "CN_CHESS_PIECE_ADVISOR_RED_0",
		289: "CN_CHESS_PIECE_ADVISOR_RED_1",
		304: "CN_CHESS_PIECE_ELEPHANT_RED_0",
		305: "CN_CHESS_PIECE_ELEPHANT_RED_1",
		320: "CN_CHESS_PIECE_CHARIOT_RED_0",
		321: "CN_CHESS_PIECE_CHARIOT_RED_1",
		336: "CN_CHESS_PIECE_HORSE_RED_0",
		337: "CN_CHESS_PIECE_HORSE_RED_1",
		352: "CN_CHESS_PIECE_CANNON_RED_0",
		353: "CN_CHESS_PIECE_CANNON_RED_1",
		368: "CN_CHESS_PIECE_SOLDIER_RED_0",
		369: "CN_CHESS_PIECE_SOLDIER_RED_1",
		370: "CN_CHESS_PIECE_SOLDIER_RED_2",
		371: "CN_CHESS_PIECE_SOLDIER_RED_3",
		372: "CN_CHESS_PIECE_SOLDIER_RED_4",
		528: "CN_CHESS_PIECE_GENERAL_BLACK",
		544: "CN_CHESS_PIECE_ADVISOR_BLACK_0",
		545: "CN_CHESS_PIECE_ADVISOR_BLACK_1",
		560: "CN_CHESS_PIECE_ELEPHANT_BLACK_0",
		561: "CN_CHESS_PIECE_ELEPHANT_BLACK_1",
		576: "CN_CHESS_PIECE_CHARIOT_BLACK_0",
		577: "CN_CHESS_PIECE_CHARIOT_BLACK_1",
		592: "CN_CHESS_PIECE_HORSE_BLACK_0",
		593: "CN_CHESS_PIECE_HORSE_BLACK_1",
		608: "CN_CHESS_PIECE_CANNON_BLACK_0",
		609: "CN_CHESS_PIECE_CANNON_BLACK_1",
		624: "CN_CHESS_PIECE_SOLDIER_BLACK_0",
		625: "CN_CHESS_PIECE_SOLDIER_BLACK_1",
		626: "CN_CHESS_PIECE_SOLDIER_BLACK_2",
		627: "CN_CHESS_PIECE_SOLDIER_BLACK_3",
		628: "CN_CHESS_PIECE_SOLDIER_BLACK_4",
	}
	CnChessPiece_value = map[string]int32{
		"CN_CHESS_PIECE_INVALID":          0,
		"CN_CHESS_PIECE_GENERAL_RED":      272,
		"CN_CHESS_PIECE_ADVISOR_RED_0":    288,
		"CN_CHESS_PIECE_ADVISOR_RED_1":    289,
		"CN_CHESS_PIECE_ELEPHANT_RED_0":   304,
		"CN_CHESS_PIECE_ELEPHANT_RED_1":   305,
		"CN_CHESS_PIECE_CHARIOT_RED_0":    320,
		"CN_CHESS_PIECE_CHARIOT_RED_1":    321,
		"CN_CHESS_PIECE_HORSE_RED_0":      336,
		"CN_CHESS_PIECE_HORSE_RED_1":      337,
		"CN_CHESS_PIECE_CANNON_RED_0":     352,
		"CN_CHESS_PIECE_CANNON_RED_1":     353,
		"CN_CHESS_PIECE_SOLDIER_RED_0":    368,
		"CN_CHESS_PIECE_SOLDIER_RED_1":    369,
		"CN_CHESS_PIECE_SOLDIER_RED_2":    370,
		"CN_CHESS_PIECE_SOLDIER_RED_3":    371,
		"CN_CHESS_PIECE_SOLDIER_RED_4":    372,
		"CN_CHESS_PIECE_GENERAL_BLACK":    528,
		"CN_CHESS_PIECE_ADVISOR_BLACK_0":  544,
		"CN_CHESS_PIECE_ADVISOR_BLACK_1":  545,
		"CN_CHESS_PIECE_ELEPHANT_BLACK_0": 560,
		"CN_CHESS_PIECE_ELEPHANT_BLACK_1": 561,
		"CN_CHESS_PIECE_CHARIOT_BLACK_0":  576,
		"CN_CHESS_PIECE_CHARIOT_BLACK_1":  577,
		"CN_CHESS_PIECE_HORSE_BLACK_0":    592,
		"CN_CHESS_PIECE_HORSE_BLACK_1":    593,
		"CN_CHESS_PIECE_CANNON_BLACK_0":   608,
		"CN_CHESS_PIECE_CANNON_BLACK_1":   609,
		"CN_CHESS_PIECE_SOLDIER_BLACK_0":  624,
		"CN_CHESS_PIECE_SOLDIER_BLACK_1":  625,
		"CN_CHESS_PIECE_SOLDIER_BLACK_2":  626,
		"CN_CHESS_PIECE_SOLDIER_BLACK_3":  627,
		"CN_CHESS_PIECE_SOLDIER_BLACK_4":  628,
	}
)

func (x CnChessPiece) Enum() *CnChessPiece {
	p := new(CnChessPiece)
	*p = x
	return p
}

func (x CnChessPiece) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CnChessPiece) Descriptor() protoreflect.EnumDescriptor {
	return file_common_chess_piece_proto_enumTypes[2].Descriptor()
}

func (CnChessPiece) Type() protoreflect.EnumType {
	return &file_common_chess_piece_proto_enumTypes[2]
}

func (x CnChessPiece) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CnChessPiece.Descriptor instead.
func (CnChessPiece) EnumDescriptor() ([]byte, []int) {
	return file_common_chess_piece_proto_rawDescGZIP(), []int{2}
}

var File_common_chess_piece_proto protoreflect.FileDescriptor

var file_common_chess_piece_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x69, 0x65, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x71, 0x0a, 0x10, 0x43, 0x6e, 0x43, 0x68, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x17,
	0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x80, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x4e,
	0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x80, 0x04, 0x2a, 0x98, 0x02, 0x0a, 0x10, 0x43,
	0x6e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x69, 0x65, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10,
	0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49,
	0x45, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52,
	0x10, 0x20, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x49, 0x45, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x41,
	0x4e, 0x54, 0x10, 0x30, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x49, 0x4f, 0x54, 0x10, 0x40, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x52,
	0x53, 0x45, 0x10, 0x50, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x4e, 0x10, 0x60, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44,
	0x49, 0x45, 0x52, 0x10, 0x70, 0x2a, 0x9e, 0x09, 0x0a, 0x0c, 0x43, 0x6e, 0x43, 0x68, 0x65, 0x73,
	0x73, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x49, 0x45, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x44,
	0x10, 0x90, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x52, 0x45,
	0x44, 0x5f, 0x30, 0x10, 0xa0, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x10, 0xa1, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4e, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x50,
	0x48, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x30, 0x10, 0xb0, 0x02, 0x12, 0x22, 0x0a,
	0x1d, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f,
	0x45, 0x4c, 0x45, 0x50, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x10, 0xb1,
	0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49,
	0x45, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f,
	0x30, 0x10, 0xc0, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x44, 0x5f, 0x31, 0x10, 0xc1, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4e, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x52, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x44, 0x5f, 0x30, 0x10, 0xd0, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4e, 0x5f, 0x43,
	0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x52, 0x53, 0x45,
	0x5f, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x10, 0xd1, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4e, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x30, 0x10, 0xe0, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x43,
	0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x31, 0x10, 0xe1, 0x02, 0x12, 0x21, 0x0a,
	0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f,
	0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x30, 0x10, 0xf0, 0x02,
	0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45,
	0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x31,
	0x10, 0xf1, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f,
	0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x44, 0x5f, 0x32, 0x10, 0xf2, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45,
	0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x44, 0x5f, 0x33, 0x10, 0xf3, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44,
	0x49, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x34, 0x10, 0xf4, 0x02, 0x12, 0x21, 0x0a, 0x1c,
	0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x90, 0x04, 0x12,
	0x23, 0x0a, 0x1e, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43,
	0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f,
	0x30, 0x10, 0xa0, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53,
	0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x10, 0xa1, 0x04, 0x12, 0x24, 0x0a, 0x1f, 0x43, 0x4e, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x50,
	0x48, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x30, 0x10, 0xb0, 0x04, 0x12,
	0x24, 0x0a, 0x1f, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43,
	0x45, 0x5f, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x31, 0x10, 0xb1, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x4f, 0x54, 0x5f,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x30, 0x10, 0xc0, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4e,
	0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x49, 0x4f, 0x54, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x10, 0xc1, 0x04, 0x12,
	0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43,
	0x45, 0x5f, 0x48, 0x4f, 0x52, 0x53, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x30, 0x10,
	0xd0, 0x04, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x49, 0x45, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x52, 0x53, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b,
	0x5f, 0x31, 0x10, 0xd1, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x4e, 0x5f, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x30, 0x10, 0xe0, 0x04, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x4e, 0x5f,
	0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x10, 0xe1, 0x04, 0x12, 0x23, 0x0a,
	0x1e, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f,
	0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x30, 0x10,
	0xf0, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x49, 0x45, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x31, 0x10, 0xf1, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4e, 0x5f, 0x43, 0x48,
	0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45,
	0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x32, 0x10, 0xf2, 0x04, 0x12, 0x23, 0x0a, 0x1e,
	0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x5f, 0x53,
	0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x33, 0x10, 0xf3,
	0x04, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x49,
	0x45, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x49, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x34, 0x10, 0xf4, 0x04, 0x42, 0x65, 0x5a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67,
	0x61, 0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x15, 0x4a, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0xca, 0xb2, 0x04, 0x15, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xd0, 0xb2, 0x04, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_chess_piece_proto_rawDescOnce sync.Once
	file_common_chess_piece_proto_rawDescData = file_common_chess_piece_proto_rawDesc
)

func file_common_chess_piece_proto_rawDescGZIP() []byte {
	file_common_chess_piece_proto_rawDescOnce.Do(func() {
		file_common_chess_piece_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_chess_piece_proto_rawDescData)
	})
	return file_common_chess_piece_proto_rawDescData
}

var file_common_chess_piece_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_chess_piece_proto_goTypes = []interface{}{
	(CnChessColorType)(0), // 0: common.CnChessColorType
	(CnChessPieceType)(0), // 1: common.CnChessPieceType
	(CnChessPiece)(0),     // 2: common.CnChessPiece
}
var file_common_chess_piece_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_chess_piece_proto_init() }
func file_common_chess_piece_proto_init() {
	if File_common_chess_piece_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_chess_piece_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_chess_piece_proto_goTypes,
		DependencyIndexes: file_common_chess_piece_proto_depIdxs,
		EnumInfos:         file_common_chess_piece_proto_enumTypes,
	}.Build()
	File_common_chess_piece_proto = out.File
	file_common_chess_piece_proto_rawDesc = nil
	file_common_chess_piece_proto_goTypes = nil
	file_common_chess_piece_proto_depIdxs = nil
}
