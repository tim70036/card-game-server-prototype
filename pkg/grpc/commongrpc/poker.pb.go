// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: common/poker.proto

package commongrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardFace int32

const (
	CardFace_CARD_FACE_INVALID CardFace = 0
	CardFace_CARD_FACE_ACE     CardFace = 1
	CardFace_CARD_FACE_TWO     CardFace = 2
	CardFace_CARD_FACE_THREE   CardFace = 3
	CardFace_CARD_FACE_FOUR    CardFace = 4
	CardFace_CARD_FACE_FIVE    CardFace = 5
	CardFace_CARD_FACE_SIX     CardFace = 6
	CardFace_CARD_FACE_SEVEN   CardFace = 7
	CardFace_CARD_FACE_EIGHT   CardFace = 8
	CardFace_CARD_FACE_NINE    CardFace = 9
	CardFace_CARD_FACE_TEN     CardFace = 10
	CardFace_CARD_FACE_JACK    CardFace = 11
	CardFace_CARD_FACE_QUEEN   CardFace = 12
	CardFace_CARD_FACE_KING    CardFace = 13
)

// Enum value maps for CardFace.
var (
	CardFace_name = map[int32]string{
		0:  "CARD_FACE_INVALID",
		1:  "CARD_FACE_ACE",
		2:  "CARD_FACE_TWO",
		3:  "CARD_FACE_THREE",
		4:  "CARD_FACE_FOUR",
		5:  "CARD_FACE_FIVE",
		6:  "CARD_FACE_SIX",
		7:  "CARD_FACE_SEVEN",
		8:  "CARD_FACE_EIGHT",
		9:  "CARD_FACE_NINE",
		10: "CARD_FACE_TEN",
		11: "CARD_FACE_JACK",
		12: "CARD_FACE_QUEEN",
		13: "CARD_FACE_KING",
	}
	CardFace_value = map[string]int32{
		"CARD_FACE_INVALID": 0,
		"CARD_FACE_ACE":     1,
		"CARD_FACE_TWO":     2,
		"CARD_FACE_THREE":   3,
		"CARD_FACE_FOUR":    4,
		"CARD_FACE_FIVE":    5,
		"CARD_FACE_SIX":     6,
		"CARD_FACE_SEVEN":   7,
		"CARD_FACE_EIGHT":   8,
		"CARD_FACE_NINE":    9,
		"CARD_FACE_TEN":     10,
		"CARD_FACE_JACK":    11,
		"CARD_FACE_QUEEN":   12,
		"CARD_FACE_KING":    13,
	}
)

func (x CardFace) Enum() *CardFace {
	p := new(CardFace)
	*p = x
	return p
}

func (x CardFace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardFace) Descriptor() protoreflect.EnumDescriptor {
	return file_common_poker_proto_enumTypes[0].Descriptor()
}

func (CardFace) Type() protoreflect.EnumType {
	return &file_common_poker_proto_enumTypes[0]
}

func (x CardFace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardFace.Descriptor instead.
func (CardFace) EnumDescriptor() ([]byte, []int) {
	return file_common_poker_proto_rawDescGZIP(), []int{0}
}

type CardSuit int32

const (
	CardSuit_CARD_SUIT_INVALID  CardSuit = 0
	CardSuit_CARD_SUIT_CLUBS    CardSuit = 1
	CardSuit_CARD_SUIT_DIAMONDS CardSuit = 2
	CardSuit_CARD_SUIT_HEARTS   CardSuit = 3
	CardSuit_CARD_SUIT_SPADES   CardSuit = 4
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "CARD_SUIT_INVALID",
		1: "CARD_SUIT_CLUBS",
		2: "CARD_SUIT_DIAMONDS",
		3: "CARD_SUIT_HEARTS",
		4: "CARD_SUIT_SPADES",
	}
	CardSuit_value = map[string]int32{
		"CARD_SUIT_INVALID":  0,
		"CARD_SUIT_CLUBS":    1,
		"CARD_SUIT_DIAMONDS": 2,
		"CARD_SUIT_HEARTS":   3,
		"CARD_SUIT_SPADES":   4,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_common_poker_proto_enumTypes[1].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_common_poker_proto_enumTypes[1]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_common_poker_proto_rawDescGZIP(), []int{1}
}

var File_common_poker_proto protoreflect.FileDescriptor

var file_common_poker_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x13, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2a, 0xa5, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x63, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x46, 0x4f,
	0x55, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x58, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4a, 0x41, 0x43, 0x4b, 0x10, 0x0b,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x2a, 0x7a, 0x0a, 0x08, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x55,
	0x49, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x44,
	0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x53, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x41,
	0x44, 0x45, 0x53, 0x10, 0x04, 0x42, 0x65, 0x5a, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67, 0x61,
	0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x15, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xca,
	0xb2, 0x04, 0x15, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0xd0, 0xb2, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_poker_proto_rawDescOnce sync.Once
	file_common_poker_proto_rawDescData = file_common_poker_proto_rawDesc
)

func file_common_poker_proto_rawDescGZIP() []byte {
	file_common_poker_proto_rawDescOnce.Do(func() {
		file_common_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_poker_proto_rawDescData)
	})
	return file_common_poker_proto_rawDescData
}

var file_common_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_common_poker_proto_goTypes = []interface{}{
	(CardFace)(0), // 0: common.CardFace
	(CardSuit)(0), // 1: common.CardSuit
}
var file_common_poker_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_poker_proto_init() }
func file_common_poker_proto_init() {
	if File_common_poker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_poker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_poker_proto_goTypes,
		DependencyIndexes: file_common_poker_proto_depIdxs,
		EnumInfos:         file_common_poker_proto_enumTypes,
	}.Build()
	File_common_poker_proto = out.File
	file_common_poker_proto_rawDesc = nil
	file_common_poker_proto_goTypes = nil
	file_common_poker_proto_depIdxs = nil
}
