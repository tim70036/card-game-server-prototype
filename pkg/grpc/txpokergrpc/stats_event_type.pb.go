// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: txpoker/stats_event_type.proto

package txpokergrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatsEventType int32

const (
	StatsEventType_UNDEFINED          StatsEventType = 0
	StatsEventType_GAME               StatsEventType = 1
	StatsEventType_BET_GAME           StatsEventType = 2
	StatsEventType_PREFLOP_GAME       StatsEventType = 3
	StatsEventType_FLOP_GAME          StatsEventType = 4
	StatsEventType_TURN_GAME          StatsEventType = 5
	StatsEventType_RIVER_GAME         StatsEventType = 6
	StatsEventType_SHOWDOWN_GAME      StatsEventType = 7
	StatsEventType_GAME_WIN           StatsEventType = 8
	StatsEventType_SHOWDOWN_GAME_WIN  StatsEventType = 9
	StatsEventType_GAME_WIN_AMOUNT    StatsEventType = 10
	StatsEventType_STRAIGHT           StatsEventType = 101
	StatsEventType_FLUSH              StatsEventType = 102
	StatsEventType_FULL_HOUSE         StatsEventType = 103
	StatsEventType_FOUR_OF_A_KIND     StatsEventType = 104
	StatsEventType_STRAIGHT_FLUSH     StatsEventType = 105
	StatsEventType_ROYAL_FLUSH        StatsEventType = 106
	StatsEventType_BET                StatsEventType = 201
	StatsEventType_RAISE              StatsEventType = 202
	StatsEventType_CALL               StatsEventType = 203
	StatsEventType_FOLD               StatsEventType = 204
	StatsEventType_PREFLOP_FOLD       StatsEventType = 301
	StatsEventType_PREFLOP_RAISE      StatsEventType = 302
	StatsEventType_PREFLOP_LAST_RAISE StatsEventType = 303
	StatsEventType_PREFLOP_RE_RAISE   StatsEventType = 304
	StatsEventType_FLOP_FOLD          StatsEventType = 401
	StatsEventType_FLOP_BET           StatsEventType = 402
	StatsEventType_FLOP_LAST_RAISE    StatsEventType = 403
	StatsEventType_FLOP_CONTINUE_BET  StatsEventType = 404
	StatsEventType_TURN_FOLD          StatsEventType = 501
	StatsEventType_TURN_BET           StatsEventType = 502
	StatsEventType_TURN_LAST_RAISE    StatsEventType = 503
	StatsEventType_TURN_CONTINUE_BET  StatsEventType = 504
	StatsEventType_RIVER_FOLD         StatsEventType = 601
	StatsEventType_RIVER_BET          StatsEventType = 602
	StatsEventType_RIVER_CONTINUE_BET StatsEventType = 603
)

// Enum value maps for StatsEventType.
var (
	StatsEventType_name = map[int32]string{
		0:   "UNDEFINED",
		1:   "GAME",
		2:   "BET_GAME",
		3:   "PREFLOP_GAME",
		4:   "FLOP_GAME",
		5:   "TURN_GAME",
		6:   "RIVER_GAME",
		7:   "SHOWDOWN_GAME",
		8:   "GAME_WIN",
		9:   "SHOWDOWN_GAME_WIN",
		10:  "GAME_WIN_AMOUNT",
		101: "STRAIGHT",
		102: "FLUSH",
		103: "FULL_HOUSE",
		104: "FOUR_OF_A_KIND",
		105: "STRAIGHT_FLUSH",
		106: "ROYAL_FLUSH",
		201: "BET",
		202: "RAISE",
		203: "CALL",
		204: "FOLD",
		301: "PREFLOP_FOLD",
		302: "PREFLOP_RAISE",
		303: "PREFLOP_LAST_RAISE",
		304: "PREFLOP_RE_RAISE",
		401: "FLOP_FOLD",
		402: "FLOP_BET",
		403: "FLOP_LAST_RAISE",
		404: "FLOP_CONTINUE_BET",
		501: "TURN_FOLD",
		502: "TURN_BET",
		503: "TURN_LAST_RAISE",
		504: "TURN_CONTINUE_BET",
		601: "RIVER_FOLD",
		602: "RIVER_BET",
		603: "RIVER_CONTINUE_BET",
	}
	StatsEventType_value = map[string]int32{
		"UNDEFINED":          0,
		"GAME":               1,
		"BET_GAME":           2,
		"PREFLOP_GAME":       3,
		"FLOP_GAME":          4,
		"TURN_GAME":          5,
		"RIVER_GAME":         6,
		"SHOWDOWN_GAME":      7,
		"GAME_WIN":           8,
		"SHOWDOWN_GAME_WIN":  9,
		"GAME_WIN_AMOUNT":    10,
		"STRAIGHT":           101,
		"FLUSH":              102,
		"FULL_HOUSE":         103,
		"FOUR_OF_A_KIND":     104,
		"STRAIGHT_FLUSH":     105,
		"ROYAL_FLUSH":        106,
		"BET":                201,
		"RAISE":              202,
		"CALL":               203,
		"FOLD":               204,
		"PREFLOP_FOLD":       301,
		"PREFLOP_RAISE":      302,
		"PREFLOP_LAST_RAISE": 303,
		"PREFLOP_RE_RAISE":   304,
		"FLOP_FOLD":          401,
		"FLOP_BET":           402,
		"FLOP_LAST_RAISE":    403,
		"FLOP_CONTINUE_BET":  404,
		"TURN_FOLD":          501,
		"TURN_BET":           502,
		"TURN_LAST_RAISE":    503,
		"TURN_CONTINUE_BET":  504,
		"RIVER_FOLD":         601,
		"RIVER_BET":          602,
		"RIVER_CONTINUE_BET": 603,
	}
)

func (x StatsEventType) Enum() *StatsEventType {
	p := new(StatsEventType)
	*p = x
	return p
}

func (x StatsEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatsEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_txpoker_stats_event_type_proto_enumTypes[0].Descriptor()
}

func (StatsEventType) Type() protoreflect.EnumType {
	return &file_txpoker_stats_event_type_proto_enumTypes[0]
}

func (x StatsEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatsEventType.Descriptor instead.
func (StatsEventType) EnumDescriptor() ([]byte, []int) {
	return file_txpoker_stats_event_type_proto_rawDescGZIP(), []int{0}
}

var File_txpoker_stats_event_type_proto protoreflect.FileDescriptor

var file_txpoker_stats_event_type_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xfd, 0x04, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x57, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57,
	0x49, 0x4e, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x57, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x66, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x67, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x55,
	0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10,
	0x69, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48,
	0x10, 0x6a, 0x12, 0x08, 0x0a, 0x03, 0x42, 0x45, 0x54, 0x10, 0xc9, 0x01, 0x12, 0x0a, 0x0a, 0x05,
	0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0xca, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c,
	0x10, 0xcb, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x50, 0x52, 0x45, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0xad,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x52, 0x41, 0x49,
	0x53, 0x45, 0x10, 0xae, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x46, 0x4c, 0x4f, 0x50,
	0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0xaf, 0x02, 0x12, 0x15,
	0x0a, 0x10, 0x50, 0x52, 0x45, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x49,
	0x53, 0x45, 0x10, 0xb0, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x46, 0x4f,
	0x4c, 0x44, 0x10, 0x91, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x42, 0x45,
	0x54, 0x10, 0x92, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x93, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x46, 0x4c,
	0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x10,
	0x94, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10,
	0xf5, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x42, 0x45, 0x54, 0x10, 0xf6,
	0x03, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52,
	0x41, 0x49, 0x53, 0x45, 0x10, 0xf7, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x55, 0x52, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x10, 0xf8, 0x03, 0x12,
	0x0f, 0x0a, 0x0a, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0xd9, 0x04,
	0x12, 0x0e, 0x0a, 0x09, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x10, 0xda, 0x04,
	0x12, 0x17, 0x0a, 0x12, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e,
	0x55, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x10, 0xdb, 0x04, 0x42, 0x6b, 0x5a, 0x2f, 0x63, 0x61, 0x72,
	0x64, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x1d, 0x4a,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xca, 0xb2, 0x04, 0x16,
	0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54,
	0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_txpoker_stats_event_type_proto_rawDescOnce sync.Once
	file_txpoker_stats_event_type_proto_rawDescData = file_txpoker_stats_event_type_proto_rawDesc
)

func file_txpoker_stats_event_type_proto_rawDescGZIP() []byte {
	file_txpoker_stats_event_type_proto_rawDescOnce.Do(func() {
		file_txpoker_stats_event_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_txpoker_stats_event_type_proto_rawDescData)
	})
	return file_txpoker_stats_event_type_proto_rawDescData
}

var file_txpoker_stats_event_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_txpoker_stats_event_type_proto_goTypes = []interface{}{
	(StatsEventType)(0), // 0: txpoker.statsevent.StatsEventType
}
var file_txpoker_stats_event_type_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_txpoker_stats_event_type_proto_init() }
func file_txpoker_stats_event_type_proto_init() {
	if File_txpoker_stats_event_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txpoker_stats_event_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_txpoker_stats_event_type_proto_goTypes,
		DependencyIndexes: file_txpoker_stats_event_type_proto_depIdxs,
		EnumInfos:         file_txpoker_stats_event_type_proto_enumTypes,
	}.Build()
	File_txpoker_stats_event_type_proto = out.File
	file_txpoker_stats_event_type_proto_rawDesc = nil
	file_txpoker_stats_event_type_proto_goTypes = nil
	file_txpoker_stats_event_type_proto_depIdxs = nil
}
