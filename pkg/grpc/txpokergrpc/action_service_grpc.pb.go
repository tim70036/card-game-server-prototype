// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: txpoker/action_service.proto

package txpokergrpc

import (
	commongrpc "card-game-server-prototype/pkg/grpc/commongrpc"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionServiceClient is the client API for ActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServiceClient interface {
	Resync(ctx context.Context, in *commongrpc.ResyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Ready(ctx context.Context, in *commongrpc.ReadyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartGame(ctx context.Context, in *commongrpc.StartGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Kick(ctx context.Context, in *commongrpc.KickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeRoom(ctx context.Context, in *commongrpc.ChangeRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StandUp(ctx context.Context, in *StandUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SitDown(ctx context.Context, in *SitDownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BuyIn(ctx context.Context, in *BuyInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SitOut(ctx context.Context, in *SitOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TopUp(ctx context.Context, in *TopUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Fold(ctx context.Context, in *FoldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Bet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Raise(ctx context.Context, in *RaiseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllIn(ctx context.Context, in *AllInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ShowFold(ctx context.Context, in *ShowFoldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateWaitBBSetting(ctx context.Context, in *UpdateWaitBBSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAutoTopUpSetting(ctx context.Context, in *UpdateAutoTopUpSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ForceBuyIn(ctx context.Context, in *ForceBuyInRequest, opts ...grpc.CallOption) (*ForceBuyInResponse, error)
}

type actionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionServiceClient(cc grpc.ClientConnInterface) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) Resync(ctx context.Context, in *commongrpc.ResyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Resync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Ready(ctx context.Context, in *commongrpc.ReadyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) StartGame(ctx context.Context, in *commongrpc.StartGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Kick(ctx context.Context, in *commongrpc.KickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) ChangeRoom(ctx context.Context, in *commongrpc.ChangeRoomRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/ChangeRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) StandUp(ctx context.Context, in *StandUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/StandUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) SitDown(ctx context.Context, in *SitDownRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/SitDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) BuyIn(ctx context.Context, in *BuyInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/BuyIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) SitOut(ctx context.Context, in *SitOutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/SitOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) TopUp(ctx context.Context, in *TopUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/TopUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Fold(ctx context.Context, in *FoldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Fold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Bet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Bet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Raise(ctx context.Context, in *RaiseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/Raise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) AllIn(ctx context.Context, in *AllInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/AllIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) ShowFold(ctx context.Context, in *ShowFoldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/ShowFold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) UpdateWaitBBSetting(ctx context.Context, in *UpdateWaitBBSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/UpdateWaitBBSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) UpdateAutoTopUpSetting(ctx context.Context, in *UpdateAutoTopUpSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/UpdateAutoTopUpSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) ForceBuyIn(ctx context.Context, in *ForceBuyInRequest, opts ...grpc.CallOption) (*ForceBuyInResponse, error) {
	out := new(ForceBuyInResponse)
	err := c.cc.Invoke(ctx, "/txpoker.ActionService/ForceBuyIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServiceServer is the server API for ActionService service.
// All implementations must embed UnimplementedActionServiceServer
// for forward compatibility
type ActionServiceServer interface {
	Resync(context.Context, *commongrpc.ResyncRequest) (*emptypb.Empty, error)
	Ready(context.Context, *commongrpc.ReadyRequest) (*emptypb.Empty, error)
	StartGame(context.Context, *commongrpc.StartGameRequest) (*emptypb.Empty, error)
	Kick(context.Context, *commongrpc.KickRequest) (*emptypb.Empty, error)
	ChangeRoom(context.Context, *commongrpc.ChangeRoomRequest) (*emptypb.Empty, error)
	StandUp(context.Context, *StandUpRequest) (*emptypb.Empty, error)
	SitDown(context.Context, *SitDownRequest) (*emptypb.Empty, error)
	BuyIn(context.Context, *BuyInRequest) (*emptypb.Empty, error)
	SitOut(context.Context, *SitOutRequest) (*emptypb.Empty, error)
	TopUp(context.Context, *TopUpRequest) (*emptypb.Empty, error)
	Fold(context.Context, *FoldRequest) (*emptypb.Empty, error)
	Check(context.Context, *CheckRequest) (*emptypb.Empty, error)
	Bet(context.Context, *BetRequest) (*emptypb.Empty, error)
	Call(context.Context, *CallRequest) (*emptypb.Empty, error)
	Raise(context.Context, *RaiseRequest) (*emptypb.Empty, error)
	AllIn(context.Context, *AllInRequest) (*emptypb.Empty, error)
	ShowFold(context.Context, *ShowFoldRequest) (*emptypb.Empty, error)
	UpdateWaitBBSetting(context.Context, *UpdateWaitBBSettingRequest) (*emptypb.Empty, error)
	UpdateAutoTopUpSetting(context.Context, *UpdateAutoTopUpSettingRequest) (*emptypb.Empty, error)
	ForceBuyIn(context.Context, *ForceBuyInRequest) (*ForceBuyInResponse, error)
	mustEmbedUnimplementedActionServiceServer()
}

// UnimplementedActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionServiceServer struct {
}

func (UnimplementedActionServiceServer) Resync(context.Context, *commongrpc.ResyncRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resync not implemented")
}
func (UnimplementedActionServiceServer) Ready(context.Context, *commongrpc.ReadyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedActionServiceServer) StartGame(context.Context, *commongrpc.StartGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedActionServiceServer) Kick(context.Context, *commongrpc.KickRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (UnimplementedActionServiceServer) ChangeRoom(context.Context, *commongrpc.ChangeRoomRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoom not implemented")
}
func (UnimplementedActionServiceServer) StandUp(context.Context, *StandUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StandUp not implemented")
}
func (UnimplementedActionServiceServer) SitDown(context.Context, *SitDownRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SitDown not implemented")
}
func (UnimplementedActionServiceServer) BuyIn(context.Context, *BuyInRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyIn not implemented")
}
func (UnimplementedActionServiceServer) SitOut(context.Context, *SitOutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SitOut not implemented")
}
func (UnimplementedActionServiceServer) TopUp(context.Context, *TopUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUp not implemented")
}
func (UnimplementedActionServiceServer) Fold(context.Context, *FoldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fold not implemented")
}
func (UnimplementedActionServiceServer) Check(context.Context, *CheckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedActionServiceServer) Bet(context.Context, *BetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bet not implemented")
}
func (UnimplementedActionServiceServer) Call(context.Context, *CallRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedActionServiceServer) Raise(context.Context, *RaiseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Raise not implemented")
}
func (UnimplementedActionServiceServer) AllIn(context.Context, *AllInRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIn not implemented")
}
func (UnimplementedActionServiceServer) ShowFold(context.Context, *ShowFoldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFold not implemented")
}
func (UnimplementedActionServiceServer) UpdateWaitBBSetting(context.Context, *UpdateWaitBBSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWaitBBSetting not implemented")
}
func (UnimplementedActionServiceServer) UpdateAutoTopUpSetting(context.Context, *UpdateAutoTopUpSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoTopUpSetting not implemented")
}
func (UnimplementedActionServiceServer) ForceBuyIn(context.Context, *ForceBuyInRequest) (*ForceBuyInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceBuyIn not implemented")
}
func (UnimplementedActionServiceServer) mustEmbedUnimplementedActionServiceServer() {}

// UnsafeActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServiceServer will
// result in compilation errors.
type UnsafeActionServiceServer interface {
	mustEmbedUnimplementedActionServiceServer()
}

func RegisterActionServiceServer(s grpc.ServiceRegistrar, srv ActionServiceServer) {
	s.RegisterService(&ActionService_ServiceDesc, srv)
}

func _ActionService_Resync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.ResyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Resync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Resync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Resync(ctx, req.(*commongrpc.ResyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Ready(ctx, req.(*commongrpc.ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).StartGame(ctx, req.(*commongrpc.StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.KickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Kick(ctx, req.(*commongrpc.KickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_ChangeRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.ChangeRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).ChangeRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/ChangeRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).ChangeRoom(ctx, req.(*commongrpc.ChangeRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_StandUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).StandUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/StandUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).StandUp(ctx, req.(*StandUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_SitDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SitDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).SitDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/SitDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).SitDown(ctx, req.(*SitDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_BuyIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).BuyIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/BuyIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).BuyIn(ctx, req.(*BuyInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_SitOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SitOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).SitOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/SitOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).SitOut(ctx, req.(*SitOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_TopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).TopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/TopUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).TopUp(ctx, req.(*TopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Fold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Fold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Fold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Fold(ctx, req.(*FoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Bet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Bet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Bet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Bet(ctx, req.(*BetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Raise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Raise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/Raise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Raise(ctx, req.(*RaiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_AllIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).AllIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/AllIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).AllIn(ctx, req.(*AllInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_ShowFold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowFoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).ShowFold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/ShowFold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).ShowFold(ctx, req.(*ShowFoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_UpdateWaitBBSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWaitBBSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).UpdateWaitBBSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/UpdateWaitBBSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).UpdateWaitBBSetting(ctx, req.(*UpdateWaitBBSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_UpdateAutoTopUpSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutoTopUpSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).UpdateAutoTopUpSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/UpdateAutoTopUpSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).UpdateAutoTopUpSetting(ctx, req.(*UpdateAutoTopUpSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_ForceBuyIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceBuyInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).ForceBuyIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpoker.ActionService/ForceBuyIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).ForceBuyIn(ctx, req.(*ForceBuyInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionService_ServiceDesc is the grpc.ServiceDesc for ActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txpoker.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resync",
			Handler:    _ActionService_Resync_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _ActionService_Ready_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _ActionService_StartGame_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _ActionService_Kick_Handler,
		},
		{
			MethodName: "ChangeRoom",
			Handler:    _ActionService_ChangeRoom_Handler,
		},
		{
			MethodName: "StandUp",
			Handler:    _ActionService_StandUp_Handler,
		},
		{
			MethodName: "SitDown",
			Handler:    _ActionService_SitDown_Handler,
		},
		{
			MethodName: "BuyIn",
			Handler:    _ActionService_BuyIn_Handler,
		},
		{
			MethodName: "SitOut",
			Handler:    _ActionService_SitOut_Handler,
		},
		{
			MethodName: "TopUp",
			Handler:    _ActionService_TopUp_Handler,
		},
		{
			MethodName: "Fold",
			Handler:    _ActionService_Fold_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _ActionService_Check_Handler,
		},
		{
			MethodName: "Bet",
			Handler:    _ActionService_Bet_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _ActionService_Call_Handler,
		},
		{
			MethodName: "Raise",
			Handler:    _ActionService_Raise_Handler,
		},
		{
			MethodName: "AllIn",
			Handler:    _ActionService_AllIn_Handler,
		},
		{
			MethodName: "ShowFold",
			Handler:    _ActionService_ShowFold_Handler,
		},
		{
			MethodName: "UpdateWaitBBSetting",
			Handler:    _ActionService_UpdateWaitBBSetting_Handler,
		},
		{
			MethodName: "UpdateAutoTopUpSetting",
			Handler:    _ActionService_UpdateAutoTopUpSetting_Handler,
		},
		{
			MethodName: "ForceBuyIn",
			Handler:    _ActionService_ForceBuyIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txpoker/action_service.proto",
}
