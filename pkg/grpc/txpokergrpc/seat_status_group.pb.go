// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: txpoker/seat_status_group.proto

package txpokergrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SeatStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                  string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Chip                 int32                  `protobuf:"varint,2,opt,name=chip,proto3" json:"chip,omitempty"`
	State                SeatStatusState        `protobuf:"varint,3,opt,name=state,proto3,enum=txpoker.seatstatusstate.SeatStatusState" json:"state,omitempty"`
	SitOutStartTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=sit_out_start_timestamp,json=sitOutStartTimestamp,proto3" json:"sit_out_start_timestamp,omitempty"`
	SitOutDuration       *durationpb.Duration   `protobuf:"bytes,5,opt,name=sit_out_duration,json=sitOutDuration,proto3" json:"sit_out_duration,omitempty"`
	ActionExtraDuration  *durationpb.Duration   `protobuf:"bytes,6,opt,name=action_extra_duration,json=actionExtraDuration,proto3" json:"action_extra_duration,omitempty"`
	ShouldPlaceBb        bool                   `protobuf:"varint,7,opt,name=should_place_bb,json=shouldPlaceBb,proto3" json:"should_place_bb,omitempty"`
}

func (x *SeatStatus) Reset() {
	*x = SeatStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_seat_status_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatStatus) ProtoMessage() {}

func (x *SeatStatus) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_seat_status_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatStatus.ProtoReflect.Descriptor instead.
func (*SeatStatus) Descriptor() ([]byte, []int) {
	return file_txpoker_seat_status_group_proto_rawDescGZIP(), []int{0}
}

func (x *SeatStatus) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SeatStatus) GetChip() int32 {
	if x != nil {
		return x.Chip
	}
	return 0
}

func (x *SeatStatus) GetState() SeatStatusState {
	if x != nil {
		return x.State
	}
	return SeatStatusState_UNDEFINED
}

func (x *SeatStatus) GetSitOutStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SitOutStartTimestamp
	}
	return nil
}

func (x *SeatStatus) GetSitOutDuration() *durationpb.Duration {
	if x != nil {
		return x.SitOutDuration
	}
	return nil
}

func (x *SeatStatus) GetActionExtraDuration() *durationpb.Duration {
	if x != nil {
		return x.ActionExtraDuration
	}
	return nil
}

func (x *SeatStatus) GetShouldPlaceBb() bool {
	if x != nil {
		return x.ShouldPlaceBb
	}
	return false
}

type SeatStatusGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// seat id -> uid
	TableUids map[int32]string `protobuf:"bytes,1,rep,name=table_uids,json=tableUids,proto3" json:"table_uids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// uid -> seat status
	Status map[string]*SeatStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// uid -> top chip
	TopUpQueue map[string]int32 `protobuf:"bytes,3,rep,name=top_up_queue,json=topUpQueue,proto3" json:"top_up_queue,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SeatStatusGroup) Reset() {
	*x = SeatStatusGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_seat_status_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeatStatusGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatStatusGroup) ProtoMessage() {}

func (x *SeatStatusGroup) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_seat_status_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatStatusGroup.ProtoReflect.Descriptor instead.
func (*SeatStatusGroup) Descriptor() ([]byte, []int) {
	return file_txpoker_seat_status_group_proto_rawDescGZIP(), []int{1}
}

func (x *SeatStatusGroup) GetTableUids() map[int32]string {
	if x != nil {
		return x.TableUids
	}
	return nil
}

func (x *SeatStatusGroup) GetStatus() map[string]*SeatStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SeatStatusGroup) GetTopUpQueue() map[string]int32 {
	if x != nil {
		return x.TopUpQueue
	}
	return nil
}

var File_txpoker_seat_status_group_proto protoreflect.FileDescriptor

var file_txpoker_seat_status_group_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x81, 0x03, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x68, 0x69, 0x70, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x61, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x73, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x73, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x69, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73,
	0x69, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x15, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x62, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x42, 0x62, 0x22, 0xb0, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a,
	0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54,
	0x6f, 0x70, 0x55, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x74, 0x6f, 0x70, 0x55, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x55,
	0x70, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x6d, 0x5a, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2d,
	0x67, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x1f, 0x4a, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xca, 0xb2, 0x04, 0x16,
	0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54,
	0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_txpoker_seat_status_group_proto_rawDescOnce sync.Once
	file_txpoker_seat_status_group_proto_rawDescData = file_txpoker_seat_status_group_proto_rawDesc
)

func file_txpoker_seat_status_group_proto_rawDescGZIP() []byte {
	file_txpoker_seat_status_group_proto_rawDescOnce.Do(func() {
		file_txpoker_seat_status_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_txpoker_seat_status_group_proto_rawDescData)
	})
	return file_txpoker_seat_status_group_proto_rawDescData
}

var file_txpoker_seat_status_group_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_txpoker_seat_status_group_proto_goTypes = []interface{}{
	(*SeatStatus)(nil),            // 0: txpoker.SeatStatus
	(*SeatStatusGroup)(nil),       // 1: txpoker.SeatStatusGroup
	nil,                           // 2: txpoker.SeatStatusGroup.TableUidsEntry
	nil,                           // 3: txpoker.SeatStatusGroup.StatusEntry
	nil,                           // 4: txpoker.SeatStatusGroup.TopUpQueueEntry
	(SeatStatusState)(0),          // 5: txpoker.seatstatusstate.SeatStatusState
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 7: google.protobuf.Duration
}
var file_txpoker_seat_status_group_proto_depIdxs = []int32{
	5, // 0: txpoker.SeatStatus.state:type_name -> txpoker.seatstatusstate.SeatStatusState
	6, // 1: txpoker.SeatStatus.sit_out_start_timestamp:type_name -> google.protobuf.Timestamp
	7, // 2: txpoker.SeatStatus.sit_out_duration:type_name -> google.protobuf.Duration
	7, // 3: txpoker.SeatStatus.action_extra_duration:type_name -> google.protobuf.Duration
	2, // 4: txpoker.SeatStatusGroup.table_uids:type_name -> txpoker.SeatStatusGroup.TableUidsEntry
	3, // 5: txpoker.SeatStatusGroup.status:type_name -> txpoker.SeatStatusGroup.StatusEntry
	4, // 6: txpoker.SeatStatusGroup.top_up_queue:type_name -> txpoker.SeatStatusGroup.TopUpQueueEntry
	0, // 7: txpoker.SeatStatusGroup.StatusEntry.value:type_name -> txpoker.SeatStatus
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_txpoker_seat_status_group_proto_init() }
func file_txpoker_seat_status_group_proto_init() {
	if File_txpoker_seat_status_group_proto != nil {
		return
	}
	file_txpoker_seat_status_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_txpoker_seat_status_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_seat_status_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeatStatusGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txpoker_seat_status_group_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_txpoker_seat_status_group_proto_goTypes,
		DependencyIndexes: file_txpoker_seat_status_group_proto_depIdxs,
		MessageInfos:      file_txpoker_seat_status_group_proto_msgTypes,
	}.Build()
	File_txpoker_seat_status_group_proto = out.File
	file_txpoker_seat_status_group_proto_rawDesc = nil
	file_txpoker_seat_status_group_proto_goTypes = nil
	file_txpoker_seat_status_group_proto_depIdxs = nil
}
