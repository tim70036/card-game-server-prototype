// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: txpoker/model.proto

package txpokergrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	commongrpc "card-game-server-prototype/pkg/grpc/commongrpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroup         *commongrpc.UserGroup  `protobuf:"bytes,1,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
	RoomInfo          *commongrpc.RoomInfo   `protobuf:"bytes,2,opt,name=room_info,json=roomInfo,proto3,oneof" json:"room_info,omitempty"`
	BuddyGroup        *commongrpc.BuddyGroup `protobuf:"bytes,3,opt,name=buddy_group,json=buddyGroup,proto3,oneof" json:"buddy_group,omitempty"`
	ResyncGameState   *GameState             `protobuf:"bytes,11,opt,name=resync_game_state,json=resyncGameState,proto3,oneof" json:"resync_game_state,omitempty"`
	GameInfo          *GameInfo              `protobuf:"bytes,12,opt,name=game_info,json=gameInfo,proto3,oneof" json:"game_info,omitempty"`
	GameSetting       *GameSetting           `protobuf:"bytes,13,opt,name=game_setting,json=gameSetting,proto3,oneof" json:"game_setting,omitempty"`
	PlayerGroup       *PlayerGroup           `protobuf:"bytes,14,opt,name=player_group,json=playerGroup,proto3,oneof" json:"player_group,omitempty"`
	SeatStatusGroup   *SeatStatusGroup       `protobuf:"bytes,15,opt,name=seat_status_group,json=seatStatusGroup,proto3,oneof" json:"seat_status_group,omitempty"`
	ActionHintGroup   *ActionHintGroup       `protobuf:"bytes,16,opt,name=action_hint_group,json=actionHintGroup,proto3,oneof" json:"action_hint_group,omitempty"`
	Table             *Table                 `protobuf:"bytes,17,opt,name=table,proto3,oneof" json:"table,omitempty"`
	PlaySetting       *PlaySetting           `protobuf:"bytes,18,opt,name=play_setting,json=playSetting,proto3,oneof" json:"play_setting,omitempty"`
	StatsCacheGroup   *StatsCacheGroup       `protobuf:"bytes,19,opt,name=stats_cache_group,json=statsCacheGroup,proto3,oneof" json:"stats_cache_group,omitempty"`
	ChipCacheGroup    *ChipCacheGroup        `protobuf:"bytes,20,opt,name=chip_cache_group,json=chipCacheGroup,proto3,oneof" json:"chip_cache_group,omitempty"`
	UserCacheGroup    *UserCacheGroup        `protobuf:"bytes,21,opt,name=user_cache_group,json=userCacheGroup,proto3,oneof" json:"user_cache_group,omitempty"`
	TableProfitsGroup *TableProfitsGroup     `protobuf:"bytes,22,opt,name=table_profits_group,json=tableProfitsGroup,proto3,oneof" json:"table_profits_group,omitempty"`
	Participant       *Participant           `protobuf:"bytes,31,opt,name=participant,proto3,oneof" json:"participant,omitempty"`
	User              *commongrpc.User       `protobuf:"bytes,32,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Stats             *Stats                 `protobuf:"bytes,33,opt,name=stats,proto3,oneof" json:"stats,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_txpoker_model_proto_rawDescGZIP(), []int{0}
}

func (x *Model) GetUserGroup() *commongrpc.UserGroup {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *Model) GetRoomInfo() *commongrpc.RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *Model) GetBuddyGroup() *commongrpc.BuddyGroup {
	if x != nil {
		return x.BuddyGroup
	}
	return nil
}

func (x *Model) GetResyncGameState() *GameState {
	if x != nil {
		return x.ResyncGameState
	}
	return nil
}

func (x *Model) GetGameInfo() *GameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *Model) GetGameSetting() *GameSetting {
	if x != nil {
		return x.GameSetting
	}
	return nil
}

func (x *Model) GetPlayerGroup() *PlayerGroup {
	if x != nil {
		return x.PlayerGroup
	}
	return nil
}

func (x *Model) GetSeatStatusGroup() *SeatStatusGroup {
	if x != nil {
		return x.SeatStatusGroup
	}
	return nil
}

func (x *Model) GetActionHintGroup() *ActionHintGroup {
	if x != nil {
		return x.ActionHintGroup
	}
	return nil
}

func (x *Model) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Model) GetPlaySetting() *PlaySetting {
	if x != nil {
		return x.PlaySetting
	}
	return nil
}

func (x *Model) GetStatsCacheGroup() *StatsCacheGroup {
	if x != nil {
		return x.StatsCacheGroup
	}
	return nil
}

func (x *Model) GetChipCacheGroup() *ChipCacheGroup {
	if x != nil {
		return x.ChipCacheGroup
	}
	return nil
}

func (x *Model) GetUserCacheGroup() *UserCacheGroup {
	if x != nil {
		return x.UserCacheGroup
	}
	return nil
}

func (x *Model) GetTableProfitsGroup() *TableProfitsGroup {
	if x != nil {
		return x.TableProfitsGroup
	}
	return nil
}

func (x *Model) GetParticipant() *Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *Model) GetUser() *commongrpc.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Model) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_txpoker_model_proto protoreflect.FileDescriptor

var file_txpoker_model_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x13,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x75, 0x64,
	0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x74, 0x78, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x74, 0x78, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x78, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x91, 0x0b, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x02, 0x52, 0x0a, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x05, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x07, 0x52, 0x0f, 0x73,
	0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x08, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x0a, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x0b, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x10, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x0c, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x70, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x0d, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x4f, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x0e, 0x52, 0x11, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x0f, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x10, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x11, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x6b, 0x5a, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67, 0x61,
	0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x78, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x1d, 0x4a, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xca, 0xb2, 0x04, 0x16, 0x4a, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_txpoker_model_proto_rawDescOnce sync.Once
	file_txpoker_model_proto_rawDescData = file_txpoker_model_proto_rawDesc
)

func file_txpoker_model_proto_rawDescGZIP() []byte {
	file_txpoker_model_proto_rawDescOnce.Do(func() {
		file_txpoker_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_txpoker_model_proto_rawDescData)
	})
	return file_txpoker_model_proto_rawDescData
}

var file_txpoker_model_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_txpoker_model_proto_goTypes = []interface{}{
	(*Model)(nil),                 // 0: txpoker.Model
	(*commongrpc.UserGroup)(nil),  // 1: common.UserGroup
	(*commongrpc.RoomInfo)(nil),   // 2: common.RoomInfo
	(*commongrpc.BuddyGroup)(nil), // 3: common.BuddyGroup
	(*GameState)(nil),             // 4: txpoker.GameState
	(*GameInfo)(nil),              // 5: txpoker.GameInfo
	(*GameSetting)(nil),           // 6: txpoker.GameSetting
	(*PlayerGroup)(nil),           // 7: txpoker.PlayerGroup
	(*SeatStatusGroup)(nil),       // 8: txpoker.SeatStatusGroup
	(*ActionHintGroup)(nil),       // 9: txpoker.ActionHintGroup
	(*Table)(nil),                 // 10: txpoker.Table
	(*PlaySetting)(nil),           // 11: txpoker.PlaySetting
	(*StatsCacheGroup)(nil),       // 12: txpoker.StatsCacheGroup
	(*ChipCacheGroup)(nil),        // 13: txpoker.ChipCacheGroup
	(*UserCacheGroup)(nil),        // 14: txpoker.UserCacheGroup
	(*TableProfitsGroup)(nil),     // 15: txpoker.TableProfitsGroup
	(*Participant)(nil),           // 16: txpoker.Participant
	(*commongrpc.User)(nil),       // 17: common.User
	(*Stats)(nil),                 // 18: txpoker.Stats
}
var file_txpoker_model_proto_depIdxs = []int32{
	1,  // 0: txpoker.Model.user_group:type_name -> common.UserGroup
	2,  // 1: txpoker.Model.room_info:type_name -> common.RoomInfo
	3,  // 2: txpoker.Model.buddy_group:type_name -> common.BuddyGroup
	4,  // 3: txpoker.Model.resync_game_state:type_name -> txpoker.GameState
	5,  // 4: txpoker.Model.game_info:type_name -> txpoker.GameInfo
	6,  // 5: txpoker.Model.game_setting:type_name -> txpoker.GameSetting
	7,  // 6: txpoker.Model.player_group:type_name -> txpoker.PlayerGroup
	8,  // 7: txpoker.Model.seat_status_group:type_name -> txpoker.SeatStatusGroup
	9,  // 8: txpoker.Model.action_hint_group:type_name -> txpoker.ActionHintGroup
	10, // 9: txpoker.Model.table:type_name -> txpoker.Table
	11, // 10: txpoker.Model.play_setting:type_name -> txpoker.PlaySetting
	12, // 11: txpoker.Model.stats_cache_group:type_name -> txpoker.StatsCacheGroup
	13, // 12: txpoker.Model.chip_cache_group:type_name -> txpoker.ChipCacheGroup
	14, // 13: txpoker.Model.user_cache_group:type_name -> txpoker.UserCacheGroup
	15, // 14: txpoker.Model.table_profits_group:type_name -> txpoker.TableProfitsGroup
	16, // 15: txpoker.Model.participant:type_name -> txpoker.Participant
	17, // 16: txpoker.Model.user:type_name -> common.User
	18, // 17: txpoker.Model.stats:type_name -> txpoker.Stats
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_txpoker_model_proto_init() }
func file_txpoker_model_proto_init() {
	if File_txpoker_model_proto != nil {
		return
	}
	file_txpoker_game_state_proto_init()
	file_txpoker_game_info_proto_init()
	file_txpoker_game_setting_proto_init()
	file_txpoker_player_group_proto_init()
	file_txpoker_seat_status_group_proto_init()
	file_txpoker_action_hint_group_proto_init()
	file_txpoker_table_proto_init()
	file_txpoker_play_setting_proto_init()
	file_txpoker_stats_cache_group_proto_init()
	file_txpoker_chip_cache_group_proto_init()
	file_txpoker_user_cache_group_proto_init()
	file_txpoker_participant_proto_init()
	file_txpoker_table_profits_cache_group_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_txpoker_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_txpoker_model_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txpoker_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_txpoker_model_proto_goTypes,
		DependencyIndexes: file_txpoker_model_proto_depIdxs,
		MessageInfos:      file_txpoker_model_proto_msgTypes,
	}.Build()
	File_txpoker_model_proto = out.File
	file_txpoker_model_proto_rawDesc = nil
	file_txpoker_model_proto_goTypes = nil
	file_txpoker_model_proto_depIdxs = nil
}
