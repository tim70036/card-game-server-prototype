// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: txpoker/game_state.proto

package txpokergrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Context:
	//
	//	*GameState_ClosedStateContext
	//	*GameState_InitStateContext
	//	*GameState_ResetStateContext
	//	*GameState_WaitUserStateContext
	//	*GameState_WaitingRoomStateContext
	//	*GameState_StartRoundStateContext
	//	*GameState_DealPocketStateContext
	//	*GameState_EvaluateActionStateContext
	//	*GameState_CollectChipStateContext
	//	*GameState_DealCommunityStateContext
	//	*GameState_WaitActionStateContext
	//	*GameState_FoldStateContext
	//	*GameState_CheckStateContext
	//	*GameState_BetStateContext
	//	*GameState_CallStateContext
	//	*GameState_RaiseStateContext
	//	*GameState_AllInStateContext
	//	*GameState_DeclareShowdownStateContext
	//	*GameState_ShowdownStateContext
	//	*GameState_DealRemainCommunityStateContext
	//	*GameState_EvaluateWinnerStateContext
	//	*GameState_DeclareWinnerStateContext
	//	*GameState_JackpotStateContext
	//	*GameState_EndRoundStateContext
	Context isGameState_Context `protobuf_oneof:"context"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{0}
}

func (x *GameState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *GameState) GetContext() isGameState_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *GameState) GetClosedStateContext() *ClosedStateContext {
	if x, ok := x.GetContext().(*GameState_ClosedStateContext); ok {
		return x.ClosedStateContext
	}
	return nil
}

func (x *GameState) GetInitStateContext() *InitStateContext {
	if x, ok := x.GetContext().(*GameState_InitStateContext); ok {
		return x.InitStateContext
	}
	return nil
}

func (x *GameState) GetResetStateContext() *ResetStateContext {
	if x, ok := x.GetContext().(*GameState_ResetStateContext); ok {
		return x.ResetStateContext
	}
	return nil
}

func (x *GameState) GetWaitUserStateContext() *WaitUserStateContext {
	if x, ok := x.GetContext().(*GameState_WaitUserStateContext); ok {
		return x.WaitUserStateContext
	}
	return nil
}

func (x *GameState) GetWaitingRoomStateContext() *WaitingRoomStateContext {
	if x, ok := x.GetContext().(*GameState_WaitingRoomStateContext); ok {
		return x.WaitingRoomStateContext
	}
	return nil
}

func (x *GameState) GetStartRoundStateContext() *StartRoundStateContext {
	if x, ok := x.GetContext().(*GameState_StartRoundStateContext); ok {
		return x.StartRoundStateContext
	}
	return nil
}

func (x *GameState) GetDealPocketStateContext() *DealPocketStateContext {
	if x, ok := x.GetContext().(*GameState_DealPocketStateContext); ok {
		return x.DealPocketStateContext
	}
	return nil
}

func (x *GameState) GetEvaluateActionStateContext() *EvaluateActionStateContext {
	if x, ok := x.GetContext().(*GameState_EvaluateActionStateContext); ok {
		return x.EvaluateActionStateContext
	}
	return nil
}

func (x *GameState) GetCollectChipStateContext() *CollectChipStateContext {
	if x, ok := x.GetContext().(*GameState_CollectChipStateContext); ok {
		return x.CollectChipStateContext
	}
	return nil
}

func (x *GameState) GetDealCommunityStateContext() *DealCommunityStateContext {
	if x, ok := x.GetContext().(*GameState_DealCommunityStateContext); ok {
		return x.DealCommunityStateContext
	}
	return nil
}

func (x *GameState) GetWaitActionStateContext() *WaitActionStateContext {
	if x, ok := x.GetContext().(*GameState_WaitActionStateContext); ok {
		return x.WaitActionStateContext
	}
	return nil
}

func (x *GameState) GetFoldStateContext() *FoldStateContext {
	if x, ok := x.GetContext().(*GameState_FoldStateContext); ok {
		return x.FoldStateContext
	}
	return nil
}

func (x *GameState) GetCheckStateContext() *CheckStateContext {
	if x, ok := x.GetContext().(*GameState_CheckStateContext); ok {
		return x.CheckStateContext
	}
	return nil
}

func (x *GameState) GetBetStateContext() *BetStateContext {
	if x, ok := x.GetContext().(*GameState_BetStateContext); ok {
		return x.BetStateContext
	}
	return nil
}

func (x *GameState) GetCallStateContext() *CallStateContext {
	if x, ok := x.GetContext().(*GameState_CallStateContext); ok {
		return x.CallStateContext
	}
	return nil
}

func (x *GameState) GetRaiseStateContext() *RaiseStateContext {
	if x, ok := x.GetContext().(*GameState_RaiseStateContext); ok {
		return x.RaiseStateContext
	}
	return nil
}

func (x *GameState) GetAllInStateContext() *AllInStateContext {
	if x, ok := x.GetContext().(*GameState_AllInStateContext); ok {
		return x.AllInStateContext
	}
	return nil
}

func (x *GameState) GetDeclareShowdownStateContext() *DeclareShowdownStateContext {
	if x, ok := x.GetContext().(*GameState_DeclareShowdownStateContext); ok {
		return x.DeclareShowdownStateContext
	}
	return nil
}

func (x *GameState) GetShowdownStateContext() *ShowdownStateContext {
	if x, ok := x.GetContext().(*GameState_ShowdownStateContext); ok {
		return x.ShowdownStateContext
	}
	return nil
}

func (x *GameState) GetDealRemainCommunityStateContext() *DealRemainCommunityStateContext {
	if x, ok := x.GetContext().(*GameState_DealRemainCommunityStateContext); ok {
		return x.DealRemainCommunityStateContext
	}
	return nil
}

func (x *GameState) GetEvaluateWinnerStateContext() *EvaluateWinnerStateContext {
	if x, ok := x.GetContext().(*GameState_EvaluateWinnerStateContext); ok {
		return x.EvaluateWinnerStateContext
	}
	return nil
}

func (x *GameState) GetDeclareWinnerStateContext() *DeclareWinnerStateContext {
	if x, ok := x.GetContext().(*GameState_DeclareWinnerStateContext); ok {
		return x.DeclareWinnerStateContext
	}
	return nil
}

func (x *GameState) GetJackpotStateContext() *JackpotStateContext {
	if x, ok := x.GetContext().(*GameState_JackpotStateContext); ok {
		return x.JackpotStateContext
	}
	return nil
}

func (x *GameState) GetEndRoundStateContext() *EndRoundStateContext {
	if x, ok := x.GetContext().(*GameState_EndRoundStateContext); ok {
		return x.EndRoundStateContext
	}
	return nil
}

type isGameState_Context interface {
	isGameState_Context()
}

type GameState_ClosedStateContext struct {
	ClosedStateContext *ClosedStateContext `protobuf:"bytes,11,opt,name=closed_state_context,json=closedStateContext,proto3,oneof"`
}

type GameState_InitStateContext struct {
	InitStateContext *InitStateContext `protobuf:"bytes,12,opt,name=init_state_context,json=initStateContext,proto3,oneof"`
}

type GameState_ResetStateContext struct {
	ResetStateContext *ResetStateContext `protobuf:"bytes,13,opt,name=reset_state_context,json=resetStateContext,proto3,oneof"`
}

type GameState_WaitUserStateContext struct {
	WaitUserStateContext *WaitUserStateContext `protobuf:"bytes,14,opt,name=wait_user_state_context,json=waitUserStateContext,proto3,oneof"`
}

type GameState_WaitingRoomStateContext struct {
	WaitingRoomStateContext *WaitingRoomStateContext `protobuf:"bytes,15,opt,name=waiting_room_state_context,json=waitingRoomStateContext,proto3,oneof"`
}

type GameState_StartRoundStateContext struct {
	StartRoundStateContext *StartRoundStateContext `protobuf:"bytes,21,opt,name=start_round_state_context,json=startRoundStateContext,proto3,oneof"`
}

type GameState_DealPocketStateContext struct {
	DealPocketStateContext *DealPocketStateContext `protobuf:"bytes,22,opt,name=deal_pocket_state_context,json=dealPocketStateContext,proto3,oneof"`
}

type GameState_EvaluateActionStateContext struct {
	EvaluateActionStateContext *EvaluateActionStateContext `protobuf:"bytes,23,opt,name=evaluate_action_state_context,json=evaluateActionStateContext,proto3,oneof"`
}

type GameState_CollectChipStateContext struct {
	CollectChipStateContext *CollectChipStateContext `protobuf:"bytes,24,opt,name=collect_chip_state_context,json=collectChipStateContext,proto3,oneof"`
}

type GameState_DealCommunityStateContext struct {
	DealCommunityStateContext *DealCommunityStateContext `protobuf:"bytes,25,opt,name=deal_community_state_context,json=dealCommunityStateContext,proto3,oneof"`
}

type GameState_WaitActionStateContext struct {
	WaitActionStateContext *WaitActionStateContext `protobuf:"bytes,31,opt,name=wait_action_state_context,json=waitActionStateContext,proto3,oneof"`
}

type GameState_FoldStateContext struct {
	FoldStateContext *FoldStateContext `protobuf:"bytes,32,opt,name=fold_state_context,json=foldStateContext,proto3,oneof"`
}

type GameState_CheckStateContext struct {
	CheckStateContext *CheckStateContext `protobuf:"bytes,33,opt,name=check_state_context,json=checkStateContext,proto3,oneof"`
}

type GameState_BetStateContext struct {
	BetStateContext *BetStateContext `protobuf:"bytes,34,opt,name=bet_state_context,json=betStateContext,proto3,oneof"`
}

type GameState_CallStateContext struct {
	CallStateContext *CallStateContext `protobuf:"bytes,35,opt,name=call_state_context,json=callStateContext,proto3,oneof"`
}

type GameState_RaiseStateContext struct {
	RaiseStateContext *RaiseStateContext `protobuf:"bytes,36,opt,name=raise_state_context,json=raiseStateContext,proto3,oneof"`
}

type GameState_AllInStateContext struct {
	AllInStateContext *AllInStateContext `protobuf:"bytes,37,opt,name=all_in_state_context,json=allInStateContext,proto3,oneof"`
}

type GameState_DeclareShowdownStateContext struct {
	DeclareShowdownStateContext *DeclareShowdownStateContext `protobuf:"bytes,51,opt,name=declare_showdown_state_context,json=declareShowdownStateContext,proto3,oneof"`
}

type GameState_ShowdownStateContext struct {
	ShowdownStateContext *ShowdownStateContext `protobuf:"bytes,52,opt,name=showdown_state_context,json=showdownStateContext,proto3,oneof"`
}

type GameState_DealRemainCommunityStateContext struct {
	DealRemainCommunityStateContext *DealRemainCommunityStateContext `protobuf:"bytes,53,opt,name=deal_remain_community_state_context,json=dealRemainCommunityStateContext,proto3,oneof"`
}

type GameState_EvaluateWinnerStateContext struct {
	EvaluateWinnerStateContext *EvaluateWinnerStateContext `protobuf:"bytes,54,opt,name=evaluate_winner_state_context,json=evaluateWinnerStateContext,proto3,oneof"`
}

type GameState_DeclareWinnerStateContext struct {
	DeclareWinnerStateContext *DeclareWinnerStateContext `protobuf:"bytes,55,opt,name=declare_winner_state_context,json=declareWinnerStateContext,proto3,oneof"`
}

type GameState_JackpotStateContext struct {
	JackpotStateContext *JackpotStateContext `protobuf:"bytes,56,opt,name=jackpot_state_context,json=jackpotStateContext,proto3,oneof"`
}

type GameState_EndRoundStateContext struct {
	EndRoundStateContext *EndRoundStateContext `protobuf:"bytes,57,opt,name=end_round_state_context,json=endRoundStateContext,proto3,oneof"`
}

func (*GameState_ClosedStateContext) isGameState_Context() {}

func (*GameState_InitStateContext) isGameState_Context() {}

func (*GameState_ResetStateContext) isGameState_Context() {}

func (*GameState_WaitUserStateContext) isGameState_Context() {}

func (*GameState_WaitingRoomStateContext) isGameState_Context() {}

func (*GameState_StartRoundStateContext) isGameState_Context() {}

func (*GameState_DealPocketStateContext) isGameState_Context() {}

func (*GameState_EvaluateActionStateContext) isGameState_Context() {}

func (*GameState_CollectChipStateContext) isGameState_Context() {}

func (*GameState_DealCommunityStateContext) isGameState_Context() {}

func (*GameState_WaitActionStateContext) isGameState_Context() {}

func (*GameState_FoldStateContext) isGameState_Context() {}

func (*GameState_CheckStateContext) isGameState_Context() {}

func (*GameState_BetStateContext) isGameState_Context() {}

func (*GameState_CallStateContext) isGameState_Context() {}

func (*GameState_RaiseStateContext) isGameState_Context() {}

func (*GameState_AllInStateContext) isGameState_Context() {}

func (*GameState_DeclareShowdownStateContext) isGameState_Context() {}

func (*GameState_ShowdownStateContext) isGameState_Context() {}

func (*GameState_DealRemainCommunityStateContext) isGameState_Context() {}

func (*GameState_EvaluateWinnerStateContext) isGameState_Context() {}

func (*GameState_DeclareWinnerStateContext) isGameState_Context() {}

func (*GameState_JackpotStateContext) isGameState_Context() {}

func (*GameState_EndRoundStateContext) isGameState_Context() {}

type ClosedStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClosedStateContext) Reset() {
	*x = ClosedStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosedStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosedStateContext) ProtoMessage() {}

func (x *ClosedStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosedStateContext.ProtoReflect.Descriptor instead.
func (*ClosedStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{1}
}

type InitStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitStateContext) Reset() {
	*x = InitStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitStateContext) ProtoMessage() {}

func (x *InitStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitStateContext.ProtoReflect.Descriptor instead.
func (*InitStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{2}
}

type ResetStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetStateContext) Reset() {
	*x = ResetStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStateContext) ProtoMessage() {}

func (x *ResetStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStateContext.ProtoReflect.Descriptor instead.
func (*ResetStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{3}
}

type WaitUserStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitUserStateContext) Reset() {
	*x = WaitUserStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitUserStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitUserStateContext) ProtoMessage() {}

func (x *WaitUserStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitUserStateContext.ProtoReflect.Descriptor instead.
func (*WaitUserStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{4}
}

type WaitingRoomStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitingRoomStateContext) Reset() {
	*x = WaitingRoomStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitingRoomStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitingRoomStateContext) ProtoMessage() {}

func (x *WaitingRoomStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitingRoomStateContext.ProtoReflect.Descriptor instead.
func (*WaitingRoomStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{5}
}

type RoundResetStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RoundResetStateContext) Reset() {
	*x = RoundResetStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundResetStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundResetStateContext) ProtoMessage() {}

func (x *RoundResetStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundResetStateContext.ProtoReflect.Descriptor instead.
func (*RoundResetStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{6}
}

type WaitPlayerStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitPlayerStateContext) Reset() {
	*x = WaitPlayerStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitPlayerStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitPlayerStateContext) ProtoMessage() {}

func (x *WaitPlayerStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitPlayerStateContext.ProtoReflect.Descriptor instead.
func (*WaitPlayerStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{7}
}

type StartRoundStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartRoundStateContext) Reset() {
	*x = StartRoundStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRoundStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoundStateContext) ProtoMessage() {}

func (x *StartRoundStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoundStateContext.ProtoReflect.Descriptor instead.
func (*StartRoundStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{8}
}

type DealPocketStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DealPocketStateContext) Reset() {
	*x = DealPocketStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealPocketStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealPocketStateContext) ProtoMessage() {}

func (x *DealPocketStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealPocketStateContext.ProtoReflect.Descriptor instead.
func (*DealPocketStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{9}
}

type EvaluateActionStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvaluateActionStateContext) Reset() {
	*x = EvaluateActionStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateActionStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateActionStateContext) ProtoMessage() {}

func (x *EvaluateActionStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateActionStateContext.ProtoReflect.Descriptor instead.
func (*EvaluateActionStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{10}
}

type CollectChipStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectedChips map[string]int32 `protobuf:"bytes,1,rep,name=collected_chips,json=collectedChips,proto3" json:"collected_chips,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Pots           []*Pot           `protobuf:"bytes,2,rep,name=pots,proto3" json:"pots,omitempty"`
}

func (x *CollectChipStateContext) Reset() {
	*x = CollectChipStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectChipStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectChipStateContext) ProtoMessage() {}

func (x *CollectChipStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectChipStateContext.ProtoReflect.Descriptor instead.
func (*CollectChipStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{11}
}

func (x *CollectChipStateContext) GetCollectedChips() map[string]int32 {
	if x != nil {
		return x.CollectedChips
	}
	return nil
}

func (x *CollectChipStateContext) GetPots() []*Pot {
	if x != nil {
		return x.Pots
	}
	return nil
}

type DealCommunityStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DealCommunityStateContext) Reset() {
	*x = DealCommunityStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealCommunityStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealCommunityStateContext) ProtoMessage() {}

func (x *DealCommunityStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealCommunityStateContext.ProtoReflect.Descriptor instead.
func (*DealCommunityStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{12}
}

type WaitActionStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string               `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *WaitActionStateContext) Reset() {
	*x = WaitActionStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitActionStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitActionStateContext) ProtoMessage() {}

func (x *WaitActionStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitActionStateContext.ProtoReflect.Descriptor instead.
func (*WaitActionStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{13}
}

func (x *WaitActionStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

func (x *WaitActionStateContext) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type FoldStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
}

func (x *FoldStateContext) Reset() {
	*x = FoldStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoldStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoldStateContext) ProtoMessage() {}

func (x *FoldStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoldStateContext.ProtoReflect.Descriptor instead.
func (*FoldStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{14}
}

func (x *FoldStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

type CheckStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
}

func (x *CheckStateContext) Reset() {
	*x = CheckStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStateContext) ProtoMessage() {}

func (x *CheckStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStateContext.ProtoReflect.Descriptor instead.
func (*CheckStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{15}
}

func (x *CheckStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

type BetStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
}

func (x *BetStateContext) Reset() {
	*x = BetStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetStateContext) ProtoMessage() {}

func (x *BetStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetStateContext.ProtoReflect.Descriptor instead.
func (*BetStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{16}
}

func (x *BetStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

type CallStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
}

func (x *CallStateContext) Reset() {
	*x = CallStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallStateContext) ProtoMessage() {}

func (x *CallStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallStateContext.ProtoReflect.Descriptor instead.
func (*CallStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{17}
}

func (x *CallStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

type RaiseStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
}

func (x *RaiseStateContext) Reset() {
	*x = RaiseStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaiseStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaiseStateContext) ProtoMessage() {}

func (x *RaiseStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaiseStateContext.ProtoReflect.Descriptor instead.
func (*RaiseStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{18}
}

func (x *RaiseStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

type AllInStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
}

func (x *AllInStateContext) Reset() {
	*x = AllInStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllInStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllInStateContext) ProtoMessage() {}

func (x *AllInStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllInStateContext.ProtoReflect.Descriptor instead.
func (*AllInStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{19}
}

func (x *AllInStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

type DeclareShowdownStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeclareShowdownStateContext) Reset() {
	*x = DeclareShowdownStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareShowdownStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareShowdownStateContext) ProtoMessage() {}

func (x *DeclareShowdownStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareShowdownStateContext.ProtoReflect.Descriptor instead.
func (*DeclareShowdownStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{20}
}

type ShowdownStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowdownStateContext) Reset() {
	*x = ShowdownStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowdownStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowdownStateContext) ProtoMessage() {}

func (x *ShowdownStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowdownStateContext.ProtoReflect.Descriptor instead.
func (*ShowdownStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{21}
}

type DealRemainCommunityStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DealRemainCommunityStateContext) Reset() {
	*x = DealRemainCommunityStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealRemainCommunityStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealRemainCommunityStateContext) ProtoMessage() {}

func (x *DealRemainCommunityStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealRemainCommunityStateContext.ProtoReflect.Descriptor instead.
func (*DealRemainCommunityStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{22}
}

type EvaluateWinnerStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvaluateWinnerStateContext) Reset() {
	*x = EvaluateWinnerStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateWinnerStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateWinnerStateContext) ProtoMessage() {}

func (x *EvaluateWinnerStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateWinnerStateContext.ProtoReflect.Descriptor instead.
func (*EvaluateWinnerStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{23}
}

type DeclareWinnerStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pot         *Pot                  `protobuf:"bytes,1,opt,name=pot,proto3" json:"pot,omitempty"`
	PotIndex    int32                 `protobuf:"varint,2,opt,name=potIndex,proto3" json:"potIndex,omitempty"`
	WinnerHands map[string]*PokerHand `protobuf:"bytes,3,rep,name=winner_hands,json=winnerHands,proto3" json:"winner_hands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeclareWinnerStateContext) Reset() {
	*x = DeclareWinnerStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareWinnerStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareWinnerStateContext) ProtoMessage() {}

func (x *DeclareWinnerStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareWinnerStateContext.ProtoReflect.Descriptor instead.
func (*DeclareWinnerStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{24}
}

func (x *DeclareWinnerStateContext) GetPot() *Pot {
	if x != nil {
		return x.Pot
	}
	return nil
}

func (x *DeclareWinnerStateContext) GetPotIndex() int32 {
	if x != nil {
		return x.PotIndex
	}
	return 0
}

func (x *DeclareWinnerStateContext) GetWinnerHands() map[string]*PokerHand {
	if x != nil {
		return x.WinnerHands
	}
	return nil
}

type JackpotStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jackpots []*Jackpot `protobuf:"bytes,1,rep,name=jackpots,proto3" json:"jackpots,omitempty"`
}

func (x *JackpotStateContext) Reset() {
	*x = JackpotStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JackpotStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JackpotStateContext) ProtoMessage() {}

func (x *JackpotStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JackpotStateContext.ProtoReflect.Descriptor instead.
func (*JackpotStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{25}
}

func (x *JackpotStateContext) GetJackpots() []*Jackpot {
	if x != nil {
		return x.Jackpots
	}
	return nil
}

type EndRoundStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndRoundStateContext) Reset() {
	*x = EndRoundStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_state_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndRoundStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRoundStateContext) ProtoMessage() {}

func (x *EndRoundStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_state_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRoundStateContext.ProtoReflect.Descriptor instead.
func (*EndRoundStateContext) Descriptor() ([]byte, []int) {
	return file_txpoker_game_state_proto_rawDescGZIP(), []int{26}
}

var File_txpoker_game_state_proto protoreflect.FileDescriptor

var file_txpoker_game_state_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x78, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74,
	0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7,
	0x11, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x14, 0x77, 0x61, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x1a,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x17, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5c, 0x0a,
	0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x64, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x68, 0x0a, 0x1d, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x1a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x1c, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x78, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x19, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x77, 0x61, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x66, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x66, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x69,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x72, 0x61, 0x69, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x49,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x6b, 0x0a, 0x1e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x78, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x55, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x64, 0x6f,
	0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x78, 0x0a, 0x23, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x1f, 0x64, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x68, 0x0a, 0x1d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x1a,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x1c, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x57,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x52, 0x0a, 0x15, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x63, 0x6b, 0x70,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x6a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x12,
	0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x19, 0x0a, 0x17, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x18,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x61, 0x6c,
	0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xdd, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x68, 0x69, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x70,
	0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x78, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x74, 0x73, 0x1a, 0x41, 0x0a,
	0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6c, 0x0a,
	0x16, 0x57, 0x61, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x10, 0x46,
	0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x22, 0x2e,
	0x0a, 0x0f, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x22,
	0x30, 0x0a, 0x11, 0x52, 0x61, 0x69, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69,
	0x64, 0x22, 0x30, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x55, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65,
	0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x1c, 0x0a,
	0x1a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x19,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x70, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x74, 0x52, 0x03, 0x70, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x56, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x57, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x52, 0x0a,
	0x10, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x43, 0x0a, 0x13, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6a, 0x61, 0x63, 0x6b,
	0x70, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x78, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x74, 0x52, 0x08, 0x6a, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x6b,
	0x5a, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70,
	0x63, 0xaa, 0x02, 0x1d, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0xca, 0xb2, 0x04, 0x16, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_txpoker_game_state_proto_rawDescOnce sync.Once
	file_txpoker_game_state_proto_rawDescData = file_txpoker_game_state_proto_rawDesc
)

func file_txpoker_game_state_proto_rawDescGZIP() []byte {
	file_txpoker_game_state_proto_rawDescOnce.Do(func() {
		file_txpoker_game_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_txpoker_game_state_proto_rawDescData)
	})
	return file_txpoker_game_state_proto_rawDescData
}

var file_txpoker_game_state_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_txpoker_game_state_proto_goTypes = []interface{}{
	(*GameState)(nil),                       // 0: txpoker.GameState
	(*ClosedStateContext)(nil),              // 1: txpoker.ClosedStateContext
	(*InitStateContext)(nil),                // 2: txpoker.InitStateContext
	(*ResetStateContext)(nil),               // 3: txpoker.ResetStateContext
	(*WaitUserStateContext)(nil),            // 4: txpoker.WaitUserStateContext
	(*WaitingRoomStateContext)(nil),         // 5: txpoker.WaitingRoomStateContext
	(*RoundResetStateContext)(nil),          // 6: txpoker.RoundResetStateContext
	(*WaitPlayerStateContext)(nil),          // 7: txpoker.WaitPlayerStateContext
	(*StartRoundStateContext)(nil),          // 8: txpoker.StartRoundStateContext
	(*DealPocketStateContext)(nil),          // 9: txpoker.DealPocketStateContext
	(*EvaluateActionStateContext)(nil),      // 10: txpoker.EvaluateActionStateContext
	(*CollectChipStateContext)(nil),         // 11: txpoker.CollectChipStateContext
	(*DealCommunityStateContext)(nil),       // 12: txpoker.DealCommunityStateContext
	(*WaitActionStateContext)(nil),          // 13: txpoker.WaitActionStateContext
	(*FoldStateContext)(nil),                // 14: txpoker.FoldStateContext
	(*CheckStateContext)(nil),               // 15: txpoker.CheckStateContext
	(*BetStateContext)(nil),                 // 16: txpoker.BetStateContext
	(*CallStateContext)(nil),                // 17: txpoker.CallStateContext
	(*RaiseStateContext)(nil),               // 18: txpoker.RaiseStateContext
	(*AllInStateContext)(nil),               // 19: txpoker.AllInStateContext
	(*DeclareShowdownStateContext)(nil),     // 20: txpoker.DeclareShowdownStateContext
	(*ShowdownStateContext)(nil),            // 21: txpoker.ShowdownStateContext
	(*DealRemainCommunityStateContext)(nil), // 22: txpoker.DealRemainCommunityStateContext
	(*EvaluateWinnerStateContext)(nil),      // 23: txpoker.EvaluateWinnerStateContext
	(*DeclareWinnerStateContext)(nil),       // 24: txpoker.DeclareWinnerStateContext
	(*JackpotStateContext)(nil),             // 25: txpoker.JackpotStateContext
	(*EndRoundStateContext)(nil),            // 26: txpoker.EndRoundStateContext
	nil,                                     // 27: txpoker.CollectChipStateContext.CollectedChipsEntry
	nil,                                     // 28: txpoker.DeclareWinnerStateContext.WinnerHandsEntry
	(*timestamppb.Timestamp)(nil),           // 29: google.protobuf.Timestamp
	(*Pot)(nil),                             // 30: txpoker.Pot
	(*durationpb.Duration)(nil),             // 31: google.protobuf.Duration
	(*Jackpot)(nil),                         // 32: txpoker.Jackpot
	(*PokerHand)(nil),                       // 33: txpoker.PokerHand
}
var file_txpoker_game_state_proto_depIdxs = []int32{
	29, // 0: txpoker.GameState.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 1: txpoker.GameState.closed_state_context:type_name -> txpoker.ClosedStateContext
	2,  // 2: txpoker.GameState.init_state_context:type_name -> txpoker.InitStateContext
	3,  // 3: txpoker.GameState.reset_state_context:type_name -> txpoker.ResetStateContext
	4,  // 4: txpoker.GameState.wait_user_state_context:type_name -> txpoker.WaitUserStateContext
	5,  // 5: txpoker.GameState.waiting_room_state_context:type_name -> txpoker.WaitingRoomStateContext
	8,  // 6: txpoker.GameState.start_round_state_context:type_name -> txpoker.StartRoundStateContext
	9,  // 7: txpoker.GameState.deal_pocket_state_context:type_name -> txpoker.DealPocketStateContext
	10, // 8: txpoker.GameState.evaluate_action_state_context:type_name -> txpoker.EvaluateActionStateContext
	11, // 9: txpoker.GameState.collect_chip_state_context:type_name -> txpoker.CollectChipStateContext
	12, // 10: txpoker.GameState.deal_community_state_context:type_name -> txpoker.DealCommunityStateContext
	13, // 11: txpoker.GameState.wait_action_state_context:type_name -> txpoker.WaitActionStateContext
	14, // 12: txpoker.GameState.fold_state_context:type_name -> txpoker.FoldStateContext
	15, // 13: txpoker.GameState.check_state_context:type_name -> txpoker.CheckStateContext
	16, // 14: txpoker.GameState.bet_state_context:type_name -> txpoker.BetStateContext
	17, // 15: txpoker.GameState.call_state_context:type_name -> txpoker.CallStateContext
	18, // 16: txpoker.GameState.raise_state_context:type_name -> txpoker.RaiseStateContext
	19, // 17: txpoker.GameState.all_in_state_context:type_name -> txpoker.AllInStateContext
	20, // 18: txpoker.GameState.declare_showdown_state_context:type_name -> txpoker.DeclareShowdownStateContext
	21, // 19: txpoker.GameState.showdown_state_context:type_name -> txpoker.ShowdownStateContext
	22, // 20: txpoker.GameState.deal_remain_community_state_context:type_name -> txpoker.DealRemainCommunityStateContext
	23, // 21: txpoker.GameState.evaluate_winner_state_context:type_name -> txpoker.EvaluateWinnerStateContext
	24, // 22: txpoker.GameState.declare_winner_state_context:type_name -> txpoker.DeclareWinnerStateContext
	25, // 23: txpoker.GameState.jackpot_state_context:type_name -> txpoker.JackpotStateContext
	26, // 24: txpoker.GameState.end_round_state_context:type_name -> txpoker.EndRoundStateContext
	27, // 25: txpoker.CollectChipStateContext.collected_chips:type_name -> txpoker.CollectChipStateContext.CollectedChipsEntry
	30, // 26: txpoker.CollectChipStateContext.pots:type_name -> txpoker.Pot
	31, // 27: txpoker.WaitActionStateContext.duration:type_name -> google.protobuf.Duration
	30, // 28: txpoker.DeclareWinnerStateContext.pot:type_name -> txpoker.Pot
	28, // 29: txpoker.DeclareWinnerStateContext.winner_hands:type_name -> txpoker.DeclareWinnerStateContext.WinnerHandsEntry
	32, // 30: txpoker.JackpotStateContext.jackpots:type_name -> txpoker.Jackpot
	33, // 31: txpoker.DeclareWinnerStateContext.WinnerHandsEntry.value:type_name -> txpoker.PokerHand
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_txpoker_game_state_proto_init() }
func file_txpoker_game_state_proto_init() {
	if File_txpoker_game_state_proto != nil {
		return
	}
	file_txpoker_table_proto_init()
	file_txpoker_jackpot_proto_init()
	file_txpoker_poker_hand_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_txpoker_game_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosedStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitUserStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitingRoomStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundResetStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitPlayerStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRoundStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealPocketStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateActionStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectChipStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealCommunityStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitActionStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoldStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaiseStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllInStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareShowdownStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowdownStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealRemainCommunityStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateWinnerStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareWinnerStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JackpotStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_game_state_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndRoundStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_txpoker_game_state_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GameState_ClosedStateContext)(nil),
		(*GameState_InitStateContext)(nil),
		(*GameState_ResetStateContext)(nil),
		(*GameState_WaitUserStateContext)(nil),
		(*GameState_WaitingRoomStateContext)(nil),
		(*GameState_StartRoundStateContext)(nil),
		(*GameState_DealPocketStateContext)(nil),
		(*GameState_EvaluateActionStateContext)(nil),
		(*GameState_CollectChipStateContext)(nil),
		(*GameState_DealCommunityStateContext)(nil),
		(*GameState_WaitActionStateContext)(nil),
		(*GameState_FoldStateContext)(nil),
		(*GameState_CheckStateContext)(nil),
		(*GameState_BetStateContext)(nil),
		(*GameState_CallStateContext)(nil),
		(*GameState_RaiseStateContext)(nil),
		(*GameState_AllInStateContext)(nil),
		(*GameState_DeclareShowdownStateContext)(nil),
		(*GameState_ShowdownStateContext)(nil),
		(*GameState_DealRemainCommunityStateContext)(nil),
		(*GameState_EvaluateWinnerStateContext)(nil),
		(*GameState_DeclareWinnerStateContext)(nil),
		(*GameState_JackpotStateContext)(nil),
		(*GameState_EndRoundStateContext)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txpoker_game_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_txpoker_game_state_proto_goTypes,
		DependencyIndexes: file_txpoker_game_state_proto_depIdxs,
		MessageInfos:      file_txpoker_game_state_proto_msgTypes,
	}.Build()
	File_txpoker_game_state_proto = out.File
	file_txpoker_game_state_proto_rawDesc = nil
	file_txpoker_game_state_proto_goTypes = nil
	file_txpoker_game_state_proto_depIdxs = nil
}
