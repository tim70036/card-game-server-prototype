// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: txpoker/table.proto

package txpokergrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chips       map[string]int32 `protobuf:"bytes,1,rep,name=chips,proto3" json:"chips,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WinnerChips map[string]int32 `protobuf:"bytes,2,rep,name=winner_chips,json=winnerChips,proto3" json:"winner_chips,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Pot) Reset() {
	*x = Pot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pot) ProtoMessage() {}

func (x *Pot) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pot.ProtoReflect.Descriptor instead.
func (*Pot) Descriptor() ([]byte, []int) {
	return file_txpoker_table_proto_rawDescGZIP(), []int{0}
}

func (x *Pot) GetChips() map[string]int32 {
	if x != nil {
		return x.Chips
	}
	return nil
}

func (x *Pot) GetWinnerChips() map[string]int32 {
	if x != nil {
		return x.WinnerChips
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityCards      []*Card              `protobuf:"bytes,1,rep,name=community_cards,json=communityCards,proto3" json:"community_cards,omitempty"`
	ShowdownPocketCards map[string]*CardList `protobuf:"bytes,2,rep,name=showdown_pocket_cards,json=showdownPocketCards,proto3" json:"showdown_pocket_cards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Pots                []*Pot               `protobuf:"bytes,3,rep,name=pots,proto3" json:"pots,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_txpoker_table_proto_rawDescGZIP(), []int{1}
}

func (x *Table) GetCommunityCards() []*Card {
	if x != nil {
		return x.CommunityCards
	}
	return nil
}

func (x *Table) GetShowdownPocketCards() map[string]*CardList {
	if x != nil {
		return x.ShowdownPocketCards
	}
	return nil
}

func (x *Table) GetPots() []*Pot {
	if x != nil {
		return x.Pots
	}
	return nil
}

var File_txpoker_table_proto protoreflect.FileDescriptor

var file_txpoker_table_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x13,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x03, 0x50, 0x6f, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x74, 0x2e, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x40,
	0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x57, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x05, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x15,
	0x73, 0x68, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x64, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x6f, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x50, 0x6f, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x18, 0x53,
	0x68, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x78, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x6b, 0x5a, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67,
	0x61, 0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x1d, 0x4a, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xca, 0xb2, 0x04, 0x16, 0x4a, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_txpoker_table_proto_rawDescOnce sync.Once
	file_txpoker_table_proto_rawDescData = file_txpoker_table_proto_rawDesc
)

func file_txpoker_table_proto_rawDescGZIP() []byte {
	file_txpoker_table_proto_rawDescOnce.Do(func() {
		file_txpoker_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_txpoker_table_proto_rawDescData)
	})
	return file_txpoker_table_proto_rawDescData
}

var file_txpoker_table_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_txpoker_table_proto_goTypes = []interface{}{
	(*Pot)(nil),      // 0: txpoker.Pot
	(*Table)(nil),    // 1: txpoker.Table
	nil,              // 2: txpoker.Pot.ChipsEntry
	nil,              // 3: txpoker.Pot.WinnerChipsEntry
	nil,              // 4: txpoker.Table.ShowdownPocketCardsEntry
	(*Card)(nil),     // 5: txpoker.Card
	(*CardList)(nil), // 6: txpoker.CardList
}
var file_txpoker_table_proto_depIdxs = []int32{
	2, // 0: txpoker.Pot.chips:type_name -> txpoker.Pot.ChipsEntry
	3, // 1: txpoker.Pot.winner_chips:type_name -> txpoker.Pot.WinnerChipsEntry
	5, // 2: txpoker.Table.community_cards:type_name -> txpoker.Card
	4, // 3: txpoker.Table.showdown_pocket_cards:type_name -> txpoker.Table.ShowdownPocketCardsEntry
	0, // 4: txpoker.Table.pots:type_name -> txpoker.Pot
	6, // 5: txpoker.Table.ShowdownPocketCardsEntry.value:type_name -> txpoker.CardList
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_txpoker_table_proto_init() }
func file_txpoker_table_proto_init() {
	if File_txpoker_table_proto != nil {
		return
	}
	file_txpoker_card_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_txpoker_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_txpoker_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txpoker_table_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_txpoker_table_proto_goTypes,
		DependencyIndexes: file_txpoker_table_proto_depIdxs,
		MessageInfos:      file_txpoker_table_proto_msgTypes,
	}.Build()
	File_txpoker_table_proto = out.File
	file_txpoker_table_proto_rawDesc = nil
	file_txpoker_table_proto_goTypes = nil
	file_txpoker_table_proto_depIdxs = nil
}
