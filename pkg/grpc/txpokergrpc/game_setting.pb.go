// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: txpoker/game_setting.proto

package txpokergrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMetaUid                  string               `protobuf:"bytes,1,opt,name=game_meta_uid,json=gameMetaUid,proto3" json:"game_meta_uid,omitempty"`
	SmallBlind                   int32                `protobuf:"varint,2,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"`
	BigBlind                     int32                `protobuf:"varint,3,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`
	TurnDuration                 *durationpb.Duration `protobuf:"bytes,4,opt,name=turn_duration,json=turnDuration,proto3" json:"turn_duration,omitempty"`
	InitialExtraTurnDuration     *durationpb.Duration `protobuf:"bytes,5,opt,name=initial_extra_turn_duration,json=initialExtraTurnDuration,proto3" json:"initial_extra_turn_duration,omitempty"`
	ExtraTurnRefillIntervalRound int32                `protobuf:"varint,6,opt,name=extra_turn_refill_interval_round,json=extraTurnRefillIntervalRound,proto3" json:"extra_turn_refill_interval_round,omitempty"`
	RefillExtraTurnDuration      *durationpb.Duration `protobuf:"bytes,7,opt,name=refill_extra_turn_duration,json=refillExtraTurnDuration,proto3" json:"refill_extra_turn_duration,omitempty"`
	MaxExtraTurnDuration         *durationpb.Duration `protobuf:"bytes,8,opt,name=max_extra_turn_duration,json=maxExtraTurnDuration,proto3" json:"max_extra_turn_duration,omitempty"`
	InitialSitOutDuration        *durationpb.Duration `protobuf:"bytes,9,opt,name=initial_sit_out_duration,json=initialSitOutDuration,proto3" json:"initial_sit_out_duration,omitempty"`
	SitOutRefillIntervalDuration *durationpb.Duration `protobuf:"bytes,10,opt,name=sit_out_refill_interval_duration,json=sitOutRefillIntervalDuration,proto3" json:"sit_out_refill_interval_duration,omitempty"`
	RefillSitOutDuration         *durationpb.Duration `protobuf:"bytes,11,opt,name=refill_sit_out_duration,json=refillSitOutDuration,proto3" json:"refill_sit_out_duration,omitempty"`
	MaxSitOutDuration            *durationpb.Duration `protobuf:"bytes,12,opt,name=max_sit_out_duration,json=maxSitOutDuration,proto3" json:"max_sit_out_duration,omitempty"`
	MinEnterLimitBb              int32                `protobuf:"varint,13,opt,name=min_enter_limit_bb,json=minEnterLimitBb,proto3" json:"min_enter_limit_bb,omitempty"`
	MaxEnterLimitBb              int32                `protobuf:"varint,14,opt,name=max_enter_limit_bb,json=maxEnterLimitBb,proto3" json:"max_enter_limit_bb,omitempty"`
	TableSize                    int32                `protobuf:"varint,15,opt,name=table_size,json=tableSize,proto3" json:"table_size,omitempty"`
}

func (x *GameSetting) Reset() {
	*x = GameSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_txpoker_game_setting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSetting) ProtoMessage() {}

func (x *GameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_txpoker_game_setting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSetting.ProtoReflect.Descriptor instead.
func (*GameSetting) Descriptor() ([]byte, []int) {
	return file_txpoker_game_setting_proto_rawDescGZIP(), []int{0}
}

func (x *GameSetting) GetGameMetaUid() string {
	if x != nil {
		return x.GameMetaUid
	}
	return ""
}

func (x *GameSetting) GetSmallBlind() int32 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *GameSetting) GetBigBlind() int32 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *GameSetting) GetTurnDuration() *durationpb.Duration {
	if x != nil {
		return x.TurnDuration
	}
	return nil
}

func (x *GameSetting) GetInitialExtraTurnDuration() *durationpb.Duration {
	if x != nil {
		return x.InitialExtraTurnDuration
	}
	return nil
}

func (x *GameSetting) GetExtraTurnRefillIntervalRound() int32 {
	if x != nil {
		return x.ExtraTurnRefillIntervalRound
	}
	return 0
}

func (x *GameSetting) GetRefillExtraTurnDuration() *durationpb.Duration {
	if x != nil {
		return x.RefillExtraTurnDuration
	}
	return nil
}

func (x *GameSetting) GetMaxExtraTurnDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxExtraTurnDuration
	}
	return nil
}

func (x *GameSetting) GetInitialSitOutDuration() *durationpb.Duration {
	if x != nil {
		return x.InitialSitOutDuration
	}
	return nil
}

func (x *GameSetting) GetSitOutRefillIntervalDuration() *durationpb.Duration {
	if x != nil {
		return x.SitOutRefillIntervalDuration
	}
	return nil
}

func (x *GameSetting) GetRefillSitOutDuration() *durationpb.Duration {
	if x != nil {
		return x.RefillSitOutDuration
	}
	return nil
}

func (x *GameSetting) GetMaxSitOutDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxSitOutDuration
	}
	return nil
}

func (x *GameSetting) GetMinEnterLimitBb() int32 {
	if x != nil {
		return x.MinEnterLimitBb
	}
	return 0
}

func (x *GameSetting) GetMaxEnterLimitBb() int32 {
	if x != nil {
		return x.MaxEnterLimitBb
	}
	return 0
}

func (x *GameSetting) GetTableSize() int32 {
	if x != nil {
		return x.TableSize
	}
	return 0
}

var File_txpoker_game_setting_proto protoreflect.FileDescriptor

var file_txpoker_game_setting_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x78, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x07, 0x0a, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x1b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x56,
	0x0a, 0x1a, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x72,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x54, 0x75, 0x72, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69,
	0x74, 0x4f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x20,
	0x73, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1c, 0x73, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x17, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x66,
	0x69, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53,
	0x69, 0x74, 0x4f, 0x75, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x62, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x62,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x6b, 0x5a, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67,
	0x61, 0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x78,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x67, 0x72, 0x70, 0x63, 0xaa, 0x02, 0x1d, 0x4a, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xca, 0xb2, 0x04, 0x16, 0x4a, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_txpoker_game_setting_proto_rawDescOnce sync.Once
	file_txpoker_game_setting_proto_rawDescData = file_txpoker_game_setting_proto_rawDesc
)

func file_txpoker_game_setting_proto_rawDescGZIP() []byte {
	file_txpoker_game_setting_proto_rawDescOnce.Do(func() {
		file_txpoker_game_setting_proto_rawDescData = protoimpl.X.CompressGZIP(file_txpoker_game_setting_proto_rawDescData)
	})
	return file_txpoker_game_setting_proto_rawDescData
}

var file_txpoker_game_setting_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_txpoker_game_setting_proto_goTypes = []interface{}{
	(*GameSetting)(nil),         // 0: txpoker.GameSetting
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_txpoker_game_setting_proto_depIdxs = []int32{
	1, // 0: txpoker.GameSetting.turn_duration:type_name -> google.protobuf.Duration
	1, // 1: txpoker.GameSetting.initial_extra_turn_duration:type_name -> google.protobuf.Duration
	1, // 2: txpoker.GameSetting.refill_extra_turn_duration:type_name -> google.protobuf.Duration
	1, // 3: txpoker.GameSetting.max_extra_turn_duration:type_name -> google.protobuf.Duration
	1, // 4: txpoker.GameSetting.initial_sit_out_duration:type_name -> google.protobuf.Duration
	1, // 5: txpoker.GameSetting.sit_out_refill_interval_duration:type_name -> google.protobuf.Duration
	1, // 6: txpoker.GameSetting.refill_sit_out_duration:type_name -> google.protobuf.Duration
	1, // 7: txpoker.GameSetting.max_sit_out_duration:type_name -> google.protobuf.Duration
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_txpoker_game_setting_proto_init() }
func file_txpoker_game_setting_proto_init() {
	if File_txpoker_game_setting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_txpoker_game_setting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_txpoker_game_setting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_txpoker_game_setting_proto_goTypes,
		DependencyIndexes: file_txpoker_game_setting_proto_depIdxs,
		MessageInfos:      file_txpoker_game_setting_proto_msgTypes,
	}.Build()
	File_txpoker_game_setting_proto = out.File
	file_txpoker_game_setting_proto_rawDesc = nil
	file_txpoker_game_setting_proto_goTypes = nil
	file_txpoker_game_setting_proto_depIdxs = nil
}
