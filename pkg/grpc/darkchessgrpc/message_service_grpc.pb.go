// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: darkchess/message_service.proto

package darkchessgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	SubscribeGameState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_SubscribeGameStateClient, error)
	SubscribeModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_SubscribeModelClient, error)
	SubscribeEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_SubscribeEventClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SubscribeGameState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_SubscribeGameStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], "/darkchess.MessageService/SubscribeGameState", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSubscribeGameStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SubscribeGameStateClient interface {
	Recv() (*GameState, error)
	grpc.ClientStream
}

type messageServiceSubscribeGameStateClient struct {
	grpc.ClientStream
}

func (x *messageServiceSubscribeGameStateClient) Recv() (*GameState, error) {
	m := new(GameState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) SubscribeModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_SubscribeModelClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], "/darkchess.MessageService/SubscribeModel", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSubscribeModelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SubscribeModelClient interface {
	Recv() (*Model, error)
	grpc.ClientStream
}

type messageServiceSubscribeModelClient struct {
	grpc.ClientStream
}

func (x *messageServiceSubscribeModelClient) Recv() (*Model, error) {
	m := new(Model)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) SubscribeEvent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MessageService_SubscribeEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[2], "/darkchess.MessageService/SubscribeEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSubscribeEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SubscribeEventClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type messageServiceSubscribeEventClient struct {
	grpc.ClientStream
}

func (x *messageServiceSubscribeEventClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	SubscribeGameState(*emptypb.Empty, MessageService_SubscribeGameStateServer) error
	SubscribeModel(*emptypb.Empty, MessageService_SubscribeModelServer) error
	SubscribeEvent(*emptypb.Empty, MessageService_SubscribeEventServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SubscribeGameState(*emptypb.Empty, MessageService_SubscribeGameStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGameState not implemented")
}
func (UnimplementedMessageServiceServer) SubscribeModel(*emptypb.Empty, MessageService_SubscribeModelServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeModel not implemented")
}
func (UnimplementedMessageServiceServer) SubscribeEvent(*emptypb.Empty, MessageService_SubscribeEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvent not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SubscribeGameState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SubscribeGameState(m, &messageServiceSubscribeGameStateServer{stream})
}

type MessageService_SubscribeGameStateServer interface {
	Send(*GameState) error
	grpc.ServerStream
}

type messageServiceSubscribeGameStateServer struct {
	grpc.ServerStream
}

func (x *messageServiceSubscribeGameStateServer) Send(m *GameState) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_SubscribeModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SubscribeModel(m, &messageServiceSubscribeModelServer{stream})
}

type MessageService_SubscribeModelServer interface {
	Send(*Model) error
	grpc.ServerStream
}

type messageServiceSubscribeModelServer struct {
	grpc.ServerStream
}

func (x *messageServiceSubscribeModelServer) Send(m *Model) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_SubscribeEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SubscribeEvent(m, &messageServiceSubscribeEventServer{stream})
}

type MessageService_SubscribeEventServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type messageServiceSubscribeEventServer struct {
	grpc.ServerStream
}

func (x *messageServiceSubscribeEventServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "darkchess.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeGameState",
			Handler:       _MessageService_SubscribeGameState_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeModel",
			Handler:       _MessageService_SubscribeModel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeEvent",
			Handler:       _MessageService_SubscribeEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "darkchess/message_service.proto",
}
