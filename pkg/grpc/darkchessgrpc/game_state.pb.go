// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: darkchess/game_state.proto

package darkchessgrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Context:
	//
	//	*GameState_InitStateContext
	//	*GameState_ResetGameStateContext
	//	*GameState_WaitUserStateContext
	//	*GameState_WaitingRoomStateContext
	//	*GameState_StartGameStateContext
	//	*GameState_ResetRoundStateContext
	//	*GameState_StartRoundStateContext
	//	*GameState_EndRoundStateContext
	//	*GameState_RoundScoreboardStateContext
	//	*GameState_EndGameStateContext
	//	*GameState_GameScoreboardStateContext
	//	*GameState_CloseStateContext
	//	*GameState_PickFirstStateContext
	//	*GameState_StartTurnStateContext
	//	*GameState_WaitActionStateContext
	//	*GameState_RevealStateContext
	//	*GameState_MoveStateContext
	//	*GameState_CaptureStateContext
	//	*GameState_EndTurnStateContext
	//	*GameState_DrawStateContext
	//	*GameState_SurrenderStateContext
	//	*GameState_ShowRoundResultStateContext
	Context isGameState_Context `protobuf_oneof:"context"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{0}
}

func (x *GameState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *GameState) GetContext() isGameState_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *GameState) GetInitStateContext() *InitStateContext {
	if x, ok := x.GetContext().(*GameState_InitStateContext); ok {
		return x.InitStateContext
	}
	return nil
}

func (x *GameState) GetResetGameStateContext() *ResetGameStateContext {
	if x, ok := x.GetContext().(*GameState_ResetGameStateContext); ok {
		return x.ResetGameStateContext
	}
	return nil
}

func (x *GameState) GetWaitUserStateContext() *WaitUserStateContext {
	if x, ok := x.GetContext().(*GameState_WaitUserStateContext); ok {
		return x.WaitUserStateContext
	}
	return nil
}

func (x *GameState) GetWaitingRoomStateContext() *WaitingRoomStateContext {
	if x, ok := x.GetContext().(*GameState_WaitingRoomStateContext); ok {
		return x.WaitingRoomStateContext
	}
	return nil
}

func (x *GameState) GetStartGameStateContext() *StartGameStateContext {
	if x, ok := x.GetContext().(*GameState_StartGameStateContext); ok {
		return x.StartGameStateContext
	}
	return nil
}

func (x *GameState) GetResetRoundStateContext() *ResetRoundStateContext {
	if x, ok := x.GetContext().(*GameState_ResetRoundStateContext); ok {
		return x.ResetRoundStateContext
	}
	return nil
}

func (x *GameState) GetStartRoundStateContext() *StartRoundStateContext {
	if x, ok := x.GetContext().(*GameState_StartRoundStateContext); ok {
		return x.StartRoundStateContext
	}
	return nil
}

func (x *GameState) GetEndRoundStateContext() *EndRoundStateContext {
	if x, ok := x.GetContext().(*GameState_EndRoundStateContext); ok {
		return x.EndRoundStateContext
	}
	return nil
}

func (x *GameState) GetRoundScoreboardStateContext() *RoundScoreboardStateContext {
	if x, ok := x.GetContext().(*GameState_RoundScoreboardStateContext); ok {
		return x.RoundScoreboardStateContext
	}
	return nil
}

func (x *GameState) GetEndGameStateContext() *EndGameStateContext {
	if x, ok := x.GetContext().(*GameState_EndGameStateContext); ok {
		return x.EndGameStateContext
	}
	return nil
}

func (x *GameState) GetGameScoreboardStateContext() *GameScoreboardStateContext {
	if x, ok := x.GetContext().(*GameState_GameScoreboardStateContext); ok {
		return x.GameScoreboardStateContext
	}
	return nil
}

func (x *GameState) GetCloseStateContext() *CloseStateContext {
	if x, ok := x.GetContext().(*GameState_CloseStateContext); ok {
		return x.CloseStateContext
	}
	return nil
}

func (x *GameState) GetPickFirstStateContext() *PickFirstStateContext {
	if x, ok := x.GetContext().(*GameState_PickFirstStateContext); ok {
		return x.PickFirstStateContext
	}
	return nil
}

func (x *GameState) GetStartTurnStateContext() *StartTurnStateContext {
	if x, ok := x.GetContext().(*GameState_StartTurnStateContext); ok {
		return x.StartTurnStateContext
	}
	return nil
}

func (x *GameState) GetWaitActionStateContext() *WaitActionStateContext {
	if x, ok := x.GetContext().(*GameState_WaitActionStateContext); ok {
		return x.WaitActionStateContext
	}
	return nil
}

func (x *GameState) GetRevealStateContext() *RevealStateContext {
	if x, ok := x.GetContext().(*GameState_RevealStateContext); ok {
		return x.RevealStateContext
	}
	return nil
}

func (x *GameState) GetMoveStateContext() *MoveStateContext {
	if x, ok := x.GetContext().(*GameState_MoveStateContext); ok {
		return x.MoveStateContext
	}
	return nil
}

func (x *GameState) GetCaptureStateContext() *CaptureStateContext {
	if x, ok := x.GetContext().(*GameState_CaptureStateContext); ok {
		return x.CaptureStateContext
	}
	return nil
}

func (x *GameState) GetEndTurnStateContext() *EndTurnStateContext {
	if x, ok := x.GetContext().(*GameState_EndTurnStateContext); ok {
		return x.EndTurnStateContext
	}
	return nil
}

func (x *GameState) GetDrawStateContext() *DrawStateContext {
	if x, ok := x.GetContext().(*GameState_DrawStateContext); ok {
		return x.DrawStateContext
	}
	return nil
}

func (x *GameState) GetSurrenderStateContext() *SurrenderStateContext {
	if x, ok := x.GetContext().(*GameState_SurrenderStateContext); ok {
		return x.SurrenderStateContext
	}
	return nil
}

func (x *GameState) GetShowRoundResultStateContext() *ShowRoundResultStateContext {
	if x, ok := x.GetContext().(*GameState_ShowRoundResultStateContext); ok {
		return x.ShowRoundResultStateContext
	}
	return nil
}

type isGameState_Context interface {
	isGameState_Context()
}

type GameState_InitStateContext struct {
	InitStateContext *InitStateContext `protobuf:"bytes,11,opt,name=init_state_context,json=initStateContext,proto3,oneof"`
}

type GameState_ResetGameStateContext struct {
	ResetGameStateContext *ResetGameStateContext `protobuf:"bytes,12,opt,name=reset_game_state_context,json=resetGameStateContext,proto3,oneof"`
}

type GameState_WaitUserStateContext struct {
	WaitUserStateContext *WaitUserStateContext `protobuf:"bytes,13,opt,name=wait_user_state_context,json=waitUserStateContext,proto3,oneof"`
}

type GameState_WaitingRoomStateContext struct {
	WaitingRoomStateContext *WaitingRoomStateContext `protobuf:"bytes,14,opt,name=waiting_room_state_context,json=waitingRoomStateContext,proto3,oneof"`
}

type GameState_StartGameStateContext struct {
	StartGameStateContext *StartGameStateContext `protobuf:"bytes,15,opt,name=start_game_state_context,json=startGameStateContext,proto3,oneof"`
}

type GameState_ResetRoundStateContext struct {
	ResetRoundStateContext *ResetRoundStateContext `protobuf:"bytes,16,opt,name=reset_round_state_context,json=resetRoundStateContext,proto3,oneof"`
}

type GameState_StartRoundStateContext struct {
	StartRoundStateContext *StartRoundStateContext `protobuf:"bytes,17,opt,name=start_round_state_context,json=startRoundStateContext,proto3,oneof"`
}

type GameState_EndRoundStateContext struct {
	EndRoundStateContext *EndRoundStateContext `protobuf:"bytes,18,opt,name=end_round_state_context,json=endRoundStateContext,proto3,oneof"`
}

type GameState_RoundScoreboardStateContext struct {
	RoundScoreboardStateContext *RoundScoreboardStateContext `protobuf:"bytes,19,opt,name=round_scoreboard_state_context,json=roundScoreboardStateContext,proto3,oneof"`
}

type GameState_EndGameStateContext struct {
	EndGameStateContext *EndGameStateContext `protobuf:"bytes,20,opt,name=end_game_state_context,json=endGameStateContext,proto3,oneof"`
}

type GameState_GameScoreboardStateContext struct {
	GameScoreboardStateContext *GameScoreboardStateContext `protobuf:"bytes,21,opt,name=game_scoreboard_state_context,json=gameScoreboardStateContext,proto3,oneof"`
}

type GameState_CloseStateContext struct {
	CloseStateContext *CloseStateContext `protobuf:"bytes,22,opt,name=close_state_context,json=closeStateContext,proto3,oneof"`
}

type GameState_PickFirstStateContext struct {
	// between StartRoundState and EndRoundState
	PickFirstStateContext *PickFirstStateContext `protobuf:"bytes,23,opt,name=pick_first_state_context,json=pickFirstStateContext,proto3,oneof"`
}

type GameState_StartTurnStateContext struct {
	StartTurnStateContext *StartTurnStateContext `protobuf:"bytes,24,opt,name=start_turn_state_context,json=startTurnStateContext,proto3,oneof"`
}

type GameState_WaitActionStateContext struct {
	WaitActionStateContext *WaitActionStateContext `protobuf:"bytes,25,opt,name=wait_action_state_context,json=waitActionStateContext,proto3,oneof"`
}

type GameState_RevealStateContext struct {
	RevealStateContext *RevealStateContext `protobuf:"bytes,26,opt,name=reveal_state_context,json=revealStateContext,proto3,oneof"`
}

type GameState_MoveStateContext struct {
	MoveStateContext *MoveStateContext `protobuf:"bytes,27,opt,name=move_state_context,json=moveStateContext,proto3,oneof"`
}

type GameState_CaptureStateContext struct {
	CaptureStateContext *CaptureStateContext `protobuf:"bytes,28,opt,name=capture_state_context,json=captureStateContext,proto3,oneof"`
}

type GameState_EndTurnStateContext struct {
	EndTurnStateContext *EndTurnStateContext `protobuf:"bytes,29,opt,name=end_turn_state_context,json=endTurnStateContext,proto3,oneof"`
}

type GameState_DrawStateContext struct {
	DrawStateContext *DrawStateContext `protobuf:"bytes,30,opt,name=draw_state_context,json=drawStateContext,proto3,oneof"`
}

type GameState_SurrenderStateContext struct {
	SurrenderStateContext *SurrenderStateContext `protobuf:"bytes,31,opt,name=surrender_state_context,json=surrenderStateContext,proto3,oneof"`
}

type GameState_ShowRoundResultStateContext struct {
	ShowRoundResultStateContext *ShowRoundResultStateContext `protobuf:"bytes,32,opt,name=show_round_result_state_context,json=showRoundResultStateContext,proto3,oneof"`
}

func (*GameState_InitStateContext) isGameState_Context() {}

func (*GameState_ResetGameStateContext) isGameState_Context() {}

func (*GameState_WaitUserStateContext) isGameState_Context() {}

func (*GameState_WaitingRoomStateContext) isGameState_Context() {}

func (*GameState_StartGameStateContext) isGameState_Context() {}

func (*GameState_ResetRoundStateContext) isGameState_Context() {}

func (*GameState_StartRoundStateContext) isGameState_Context() {}

func (*GameState_EndRoundStateContext) isGameState_Context() {}

func (*GameState_RoundScoreboardStateContext) isGameState_Context() {}

func (*GameState_EndGameStateContext) isGameState_Context() {}

func (*GameState_GameScoreboardStateContext) isGameState_Context() {}

func (*GameState_CloseStateContext) isGameState_Context() {}

func (*GameState_PickFirstStateContext) isGameState_Context() {}

func (*GameState_StartTurnStateContext) isGameState_Context() {}

func (*GameState_WaitActionStateContext) isGameState_Context() {}

func (*GameState_RevealStateContext) isGameState_Context() {}

func (*GameState_MoveStateContext) isGameState_Context() {}

func (*GameState_CaptureStateContext) isGameState_Context() {}

func (*GameState_EndTurnStateContext) isGameState_Context() {}

func (*GameState_DrawStateContext) isGameState_Context() {}

func (*GameState_SurrenderStateContext) isGameState_Context() {}

func (*GameState_ShowRoundResultStateContext) isGameState_Context() {}

type InitStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitStateContext) Reset() {
	*x = InitStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitStateContext) ProtoMessage() {}

func (x *InitStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitStateContext.ProtoReflect.Descriptor instead.
func (*InitStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{1}
}

type ResetGameStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetGameStateContext) Reset() {
	*x = ResetGameStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetGameStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetGameStateContext) ProtoMessage() {}

func (x *ResetGameStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetGameStateContext.ProtoReflect.Descriptor instead.
func (*ResetGameStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{2}
}

type WaitUserStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitUserStateContext) Reset() {
	*x = WaitUserStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitUserStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitUserStateContext) ProtoMessage() {}

func (x *WaitUserStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitUserStateContext.ProtoReflect.Descriptor instead.
func (*WaitUserStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{3}
}

type WaitingRoomStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitingRoomStateContext) Reset() {
	*x = WaitingRoomStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitingRoomStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitingRoomStateContext) ProtoMessage() {}

func (x *WaitingRoomStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitingRoomStateContext.ProtoReflect.Descriptor instead.
func (*WaitingRoomStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{4}
}

type StartGameStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartGameStateContext) Reset() {
	*x = StartGameStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGameStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGameStateContext) ProtoMessage() {}

func (x *StartGameStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGameStateContext.ProtoReflect.Descriptor instead.
func (*StartGameStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{5}
}

type ResetRoundStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetRoundStateContext) Reset() {
	*x = ResetRoundStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetRoundStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetRoundStateContext) ProtoMessage() {}

func (x *ResetRoundStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetRoundStateContext.ProtoReflect.Descriptor instead.
func (*ResetRoundStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{6}
}

type StartRoundStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartRoundStateContext) Reset() {
	*x = StartRoundStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRoundStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoundStateContext) ProtoMessage() {}

func (x *StartRoundStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoundStateContext.ProtoReflect.Descriptor instead.
func (*StartRoundStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{7}
}

type EndRoundStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndRoundStateContext) Reset() {
	*x = EndRoundStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndRoundStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRoundStateContext) ProtoMessage() {}

func (x *EndRoundStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRoundStateContext.ProtoReflect.Descriptor instead.
func (*EndRoundStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{8}
}

type RoundScoreboardStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration   *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Scoreboard *RoundScoreboard     `protobuf:"bytes,2,opt,name=scoreboard,proto3" json:"scoreboard,omitempty"`
}

func (x *RoundScoreboardStateContext) Reset() {
	*x = RoundScoreboardStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundScoreboardStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundScoreboardStateContext) ProtoMessage() {}

func (x *RoundScoreboardStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundScoreboardStateContext.ProtoReflect.Descriptor instead.
func (*RoundScoreboardStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{9}
}

func (x *RoundScoreboardStateContext) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *RoundScoreboardStateContext) GetScoreboard() *RoundScoreboard {
	if x != nil {
		return x.Scoreboard
	}
	return nil
}

type EndGameStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndGameStateContext) Reset() {
	*x = EndGameStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndGameStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndGameStateContext) ProtoMessage() {}

func (x *EndGameStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndGameStateContext.ProtoReflect.Descriptor instead.
func (*EndGameStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{10}
}

type GameScoreboardStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration   *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Scoreboard *GameScoreboard      `protobuf:"bytes,2,opt,name=scoreboard,proto3" json:"scoreboard,omitempty"`
}

func (x *GameScoreboardStateContext) Reset() {
	*x = GameScoreboardStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameScoreboardStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameScoreboardStateContext) ProtoMessage() {}

func (x *GameScoreboardStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameScoreboardStateContext.ProtoReflect.Descriptor instead.
func (*GameScoreboardStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{11}
}

func (x *GameScoreboardStateContext) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *GameScoreboardStateContext) GetScoreboard() *GameScoreboard {
	if x != nil {
		return x.Scoreboard
	}
	return nil
}

type CloseStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseStateContext) Reset() {
	*x = CloseStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseStateContext) ProtoMessage() {}

func (x *CloseStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseStateContext.ProtoReflect.Descriptor instead.
func (*CloseStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{12}
}

type PickFirstStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *PickFirstStateContext) Reset() {
	*x = PickFirstStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickFirstStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickFirstStateContext) ProtoMessage() {}

func (x *PickFirstStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickFirstStateContext.ProtoReflect.Descriptor instead.
func (*PickFirstStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{13}
}

func (x *PickFirstStateContext) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type StartTurnStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid  string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
	TurnCount int32  `protobuf:"varint,2,opt,name=turn_count,json=turnCount,proto3" json:"turn_count,omitempty"`
}

func (x *StartTurnStateContext) Reset() {
	*x = StartTurnStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTurnStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTurnStateContext) ProtoMessage() {}

func (x *StartTurnStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTurnStateContext.ProtoReflect.Descriptor instead.
func (*StartTurnStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{14}
}

func (x *StartTurnStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

func (x *StartTurnStateContext) GetTurnCount() int32 {
	if x != nil {
		return x.TurnCount
	}
	return 0
}

type WaitActionStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid  string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
	TurnCount int32  `protobuf:"varint,2,opt,name=turn_count,json=turnCount,proto3" json:"turn_count,omitempty"`
}

func (x *WaitActionStateContext) Reset() {
	*x = WaitActionStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitActionStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitActionStateContext) ProtoMessage() {}

func (x *WaitActionStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitActionStateContext.ProtoReflect.Descriptor instead.
func (*WaitActionStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{15}
}

func (x *WaitActionStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

func (x *WaitActionStateContext) GetTurnCount() int32 {
	if x != nil {
		return x.TurnCount
	}
	return 0
}

type RevealStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
	Cell     *Cell  `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (x *RevealStateContext) Reset() {
	*x = RevealStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevealStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevealStateContext) ProtoMessage() {}

func (x *RevealStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevealStateContext.ProtoReflect.Descriptor instead.
func (*RevealStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{16}
}

func (x *RevealStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

func (x *RevealStateContext) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type MoveStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid       string        `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
	Cell           *Cell         `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"` // GridPosition: origin position
	ToGridPosition *GridPosition `protobuf:"bytes,3,opt,name=to_grid_position,json=toGridPosition,proto3" json:"to_grid_position,omitempty"`
}

func (x *MoveStateContext) Reset() {
	*x = MoveStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveStateContext) ProtoMessage() {}

func (x *MoveStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveStateContext.ProtoReflect.Descriptor instead.
func (*MoveStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{17}
}

func (x *MoveStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

func (x *MoveStateContext) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *MoveStateContext) GetToGridPosition() *GridPosition {
	if x != nil {
		return x.ToGridPosition
	}
	return nil
}

type CaptureStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid     string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
	Cell         *Cell  `protobuf:"bytes,2,opt,name=cell,proto3" json:"cell,omitempty"`                                     // GridPosition: origin position
	CapturedCell *Cell  `protobuf:"bytes,3,opt,name=captured_cell,json=capturedCell,proto3" json:"captured_cell,omitempty"` // GridPosition: origin position
}

func (x *CaptureStateContext) Reset() {
	*x = CaptureStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureStateContext) ProtoMessage() {}

func (x *CaptureStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureStateContext.ProtoReflect.Descriptor instead.
func (*CaptureStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{18}
}

func (x *CaptureStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

func (x *CaptureStateContext) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *CaptureStateContext) GetCapturedCell() *Cell {
	if x != nil {
		return x.CapturedCell
	}
	return nil
}

type EndTurnStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorUid string `protobuf:"bytes,1,opt,name=actor_uid,json=actorUid,proto3" json:"actor_uid,omitempty"`
}

func (x *EndTurnStateContext) Reset() {
	*x = EndTurnStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTurnStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTurnStateContext) ProtoMessage() {}

func (x *EndTurnStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTurnStateContext.ProtoReflect.Descriptor instead.
func (*EndTurnStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{19}
}

func (x *EndTurnStateContext) GetActorUid() string {
	if x != nil {
		return x.ActorUid
	}
	return ""
}

type DrawStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DrawStateContext) Reset() {
	*x = DrawStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawStateContext) ProtoMessage() {}

func (x *DrawStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawStateContext.ProtoReflect.Descriptor instead.
func (*DrawStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{20}
}

type SurrenderStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurrenderUid string `protobuf:"bytes,1,opt,name=surrender_uid,json=surrenderUid,proto3" json:"surrender_uid,omitempty"`
}

func (x *SurrenderStateContext) Reset() {
	*x = SurrenderStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurrenderStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderStateContext) ProtoMessage() {}

func (x *SurrenderStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderStateContext.ProtoReflect.Descriptor instead.
func (*SurrenderStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{21}
}

func (x *SurrenderStateContext) GetSurrenderUid() string {
	if x != nil {
		return x.SurrenderUid
	}
	return ""
}

type ShowRoundResultStateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinnerUid string `protobuf:"bytes,1,opt,name=winner_uid,json=winnerUid,proto3" json:"winner_uid,omitempty"`
	IsDraw    bool   `protobuf:"varint,2,opt,name=is_draw,json=isDraw,proto3" json:"is_draw,omitempty"`
}

func (x *ShowRoundResultStateContext) Reset() {
	*x = ShowRoundResultStateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_game_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowRoundResultStateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowRoundResultStateContext) ProtoMessage() {}

func (x *ShowRoundResultStateContext) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_game_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowRoundResultStateContext.ProtoReflect.Descriptor instead.
func (*ShowRoundResultStateContext) Descriptor() ([]byte, []int) {
	return file_darkchess_game_state_proto_rawDescGZIP(), []int{22}
}

func (x *ShowRoundResultStateContext) GetWinnerUid() string {
	if x != nil {
		return x.WinnerUid
	}
	return ""
}

func (x *ShowRoundResultStateContext) GetIsDraw() bool {
	if x != nil {
		return x.IsDraw
	}
	return false
}

var File_darkchess_game_state_proto protoreflect.FileDescriptor

var file_darkchess_game_state_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61,
	0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x64, 0x61,
	0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc4, 0x10, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x72,
	0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x14, 0x77, 0x61, 0x69, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x61, 0x0a, 0x1a, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x17, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x5e, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x5e, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x58, 0x0a, 0x17, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x64,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6d, 0x0a, 0x1e, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x6a, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x1a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x70,
	0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x70, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x72,
	0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x75, 0x72, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5e, 0x0a, 0x19, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x16, 0x77,
	0x61, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61,
	0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65,
	0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x10, 0x64,
	0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x5a, 0x0a, 0x17, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6e, 0x0a, 0x1f, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x18, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1b,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x15,
	0x0a, 0x13, 0x45, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4e, 0x0a, 0x15, 0x50,
	0x69, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x15, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x54, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x65, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0x97,
	0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x69, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x72, 0x69, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x6f, 0x47, 0x72, 0x69, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65,
	0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x72, 0x6b,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x32, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x54,
	0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x22, 0x12, 0x0a, 0x10,
	0x44, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x3c, 0x0a, 0x15, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x55,
	0x0a, 0x1b, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x44, 0x72, 0x61, 0x77, 0x42, 0x72, 0x5a, 0x32, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67, 0x61,
	0x6d, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x61, 0x72,
	0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x67, 0x72, 0x70, 0x63, 0x3b, 0xaa, 0x02, 0x1f, 0x4a, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x44, 0x61, 0x72,
	0x6b, 0x43, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xca, 0xb2, 0x04,
	0x18, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e,
	0x44, 0x61, 0x72, 0x6b, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_darkchess_game_state_proto_rawDescOnce sync.Once
	file_darkchess_game_state_proto_rawDescData = file_darkchess_game_state_proto_rawDesc
)

func file_darkchess_game_state_proto_rawDescGZIP() []byte {
	file_darkchess_game_state_proto_rawDescOnce.Do(func() {
		file_darkchess_game_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_darkchess_game_state_proto_rawDescData)
	})
	return file_darkchess_game_state_proto_rawDescData
}

var file_darkchess_game_state_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_darkchess_game_state_proto_goTypes = []interface{}{
	(*GameState)(nil),                   // 0: darkchess.GameState
	(*InitStateContext)(nil),            // 1: darkchess.InitStateContext
	(*ResetGameStateContext)(nil),       // 2: darkchess.ResetGameStateContext
	(*WaitUserStateContext)(nil),        // 3: darkchess.WaitUserStateContext
	(*WaitingRoomStateContext)(nil),     // 4: darkchess.WaitingRoomStateContext
	(*StartGameStateContext)(nil),       // 5: darkchess.StartGameStateContext
	(*ResetRoundStateContext)(nil),      // 6: darkchess.ResetRoundStateContext
	(*StartRoundStateContext)(nil),      // 7: darkchess.StartRoundStateContext
	(*EndRoundStateContext)(nil),        // 8: darkchess.EndRoundStateContext
	(*RoundScoreboardStateContext)(nil), // 9: darkchess.RoundScoreboardStateContext
	(*EndGameStateContext)(nil),         // 10: darkchess.EndGameStateContext
	(*GameScoreboardStateContext)(nil),  // 11: darkchess.GameScoreboardStateContext
	(*CloseStateContext)(nil),           // 12: darkchess.CloseStateContext
	(*PickFirstStateContext)(nil),       // 13: darkchess.PickFirstStateContext
	(*StartTurnStateContext)(nil),       // 14: darkchess.StartTurnStateContext
	(*WaitActionStateContext)(nil),      // 15: darkchess.WaitActionStateContext
	(*RevealStateContext)(nil),          // 16: darkchess.RevealStateContext
	(*MoveStateContext)(nil),            // 17: darkchess.MoveStateContext
	(*CaptureStateContext)(nil),         // 18: darkchess.CaptureStateContext
	(*EndTurnStateContext)(nil),         // 19: darkchess.EndTurnStateContext
	(*DrawStateContext)(nil),            // 20: darkchess.DrawStateContext
	(*SurrenderStateContext)(nil),       // 21: darkchess.SurrenderStateContext
	(*ShowRoundResultStateContext)(nil), // 22: darkchess.ShowRoundResultStateContext
	(*timestamppb.Timestamp)(nil),       // 23: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),         // 24: google.protobuf.Duration
	(*RoundScoreboard)(nil),             // 25: darkchess.RoundScoreboard
	(*GameScoreboard)(nil),              // 26: darkchess.GameScoreboard
	(*Cell)(nil),                        // 27: darkchess.Cell
	(*GridPosition)(nil),                // 28: darkchess.GridPosition
}
var file_darkchess_game_state_proto_depIdxs = []int32{
	23, // 0: darkchess.GameState.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 1: darkchess.GameState.init_state_context:type_name -> darkchess.InitStateContext
	2,  // 2: darkchess.GameState.reset_game_state_context:type_name -> darkchess.ResetGameStateContext
	3,  // 3: darkchess.GameState.wait_user_state_context:type_name -> darkchess.WaitUserStateContext
	4,  // 4: darkchess.GameState.waiting_room_state_context:type_name -> darkchess.WaitingRoomStateContext
	5,  // 5: darkchess.GameState.start_game_state_context:type_name -> darkchess.StartGameStateContext
	6,  // 6: darkchess.GameState.reset_round_state_context:type_name -> darkchess.ResetRoundStateContext
	7,  // 7: darkchess.GameState.start_round_state_context:type_name -> darkchess.StartRoundStateContext
	8,  // 8: darkchess.GameState.end_round_state_context:type_name -> darkchess.EndRoundStateContext
	9,  // 9: darkchess.GameState.round_scoreboard_state_context:type_name -> darkchess.RoundScoreboardStateContext
	10, // 10: darkchess.GameState.end_game_state_context:type_name -> darkchess.EndGameStateContext
	11, // 11: darkchess.GameState.game_scoreboard_state_context:type_name -> darkchess.GameScoreboardStateContext
	12, // 12: darkchess.GameState.close_state_context:type_name -> darkchess.CloseStateContext
	13, // 13: darkchess.GameState.pick_first_state_context:type_name -> darkchess.PickFirstStateContext
	14, // 14: darkchess.GameState.start_turn_state_context:type_name -> darkchess.StartTurnStateContext
	15, // 15: darkchess.GameState.wait_action_state_context:type_name -> darkchess.WaitActionStateContext
	16, // 16: darkchess.GameState.reveal_state_context:type_name -> darkchess.RevealStateContext
	17, // 17: darkchess.GameState.move_state_context:type_name -> darkchess.MoveStateContext
	18, // 18: darkchess.GameState.capture_state_context:type_name -> darkchess.CaptureStateContext
	19, // 19: darkchess.GameState.end_turn_state_context:type_name -> darkchess.EndTurnStateContext
	20, // 20: darkchess.GameState.draw_state_context:type_name -> darkchess.DrawStateContext
	21, // 21: darkchess.GameState.surrender_state_context:type_name -> darkchess.SurrenderStateContext
	22, // 22: darkchess.GameState.show_round_result_state_context:type_name -> darkchess.ShowRoundResultStateContext
	24, // 23: darkchess.RoundScoreboardStateContext.duration:type_name -> google.protobuf.Duration
	25, // 24: darkchess.RoundScoreboardStateContext.scoreboard:type_name -> darkchess.RoundScoreboard
	24, // 25: darkchess.GameScoreboardStateContext.duration:type_name -> google.protobuf.Duration
	26, // 26: darkchess.GameScoreboardStateContext.scoreboard:type_name -> darkchess.GameScoreboard
	24, // 27: darkchess.PickFirstStateContext.duration:type_name -> google.protobuf.Duration
	27, // 28: darkchess.RevealStateContext.cell:type_name -> darkchess.Cell
	27, // 29: darkchess.MoveStateContext.cell:type_name -> darkchess.Cell
	28, // 30: darkchess.MoveStateContext.to_grid_position:type_name -> darkchess.GridPosition
	27, // 31: darkchess.CaptureStateContext.cell:type_name -> darkchess.Cell
	27, // 32: darkchess.CaptureStateContext.captured_cell:type_name -> darkchess.Cell
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_darkchess_game_state_proto_init() }
func file_darkchess_game_state_proto_init() {
	if File_darkchess_game_state_proto != nil {
		return
	}
	file_darkchess_board_proto_init()
	file_darkchess_scoreboard_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_darkchess_game_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetGameStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitUserStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitingRoomStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGameStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetRoundStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRoundStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndRoundStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundScoreboardStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndGameStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameScoreboardStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickFirstStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTurnStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitActionStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevealStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndTurnStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurrenderStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_game_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowRoundResultStateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_darkchess_game_state_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GameState_InitStateContext)(nil),
		(*GameState_ResetGameStateContext)(nil),
		(*GameState_WaitUserStateContext)(nil),
		(*GameState_WaitingRoomStateContext)(nil),
		(*GameState_StartGameStateContext)(nil),
		(*GameState_ResetRoundStateContext)(nil),
		(*GameState_StartRoundStateContext)(nil),
		(*GameState_EndRoundStateContext)(nil),
		(*GameState_RoundScoreboardStateContext)(nil),
		(*GameState_EndGameStateContext)(nil),
		(*GameState_GameScoreboardStateContext)(nil),
		(*GameState_CloseStateContext)(nil),
		(*GameState_PickFirstStateContext)(nil),
		(*GameState_StartTurnStateContext)(nil),
		(*GameState_WaitActionStateContext)(nil),
		(*GameState_RevealStateContext)(nil),
		(*GameState_MoveStateContext)(nil),
		(*GameState_CaptureStateContext)(nil),
		(*GameState_EndTurnStateContext)(nil),
		(*GameState_DrawStateContext)(nil),
		(*GameState_SurrenderStateContext)(nil),
		(*GameState_ShowRoundResultStateContext)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_darkchess_game_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_darkchess_game_state_proto_goTypes,
		DependencyIndexes: file_darkchess_game_state_proto_depIdxs,
		MessageInfos:      file_darkchess_game_state_proto_msgTypes,
	}.Build()
	File_darkchess_game_state_proto = out.File
	file_darkchess_game_state_proto_rawDesc = nil
	file_darkchess_game_state_proto_goTypes = nil
	file_darkchess_game_state_proto_depIdxs = nil
}
