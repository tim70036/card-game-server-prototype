// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: darkchess/action_service.proto

package darkchessgrpc

import (
	commongrpc "card-game-server-prototype/pkg/grpc/commongrpc"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionServiceClient is the client API for ActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionServiceClient interface {
	Resync(ctx context.Context, in *commongrpc.ResyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Kick(ctx context.Context, in *commongrpc.KickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAi(ctx context.Context, in *commongrpc.AddAiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Ready(ctx context.Context, in *commongrpc.ReadyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartGame(ctx context.Context, in *commongrpc.StartGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SkipScoreboard(ctx context.Context, in *SkipScoreboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePlaySetting(ctx context.Context, in *UpdatePlaySettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Pick(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reveal(ctx context.Context, in *RevealRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Surrender(ctx context.Context, in *SurrenderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClaimDraw(ctx context.Context, in *ClaimDrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AnswerDraw(ctx context.Context, in *AnswerDrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AskExtraSeconds(ctx context.Context, in *AskExtraSecondsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type actionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionServiceClient(cc grpc.ClientConnInterface) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) Resync(ctx context.Context, in *commongrpc.ResyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Resync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Kick(ctx context.Context, in *commongrpc.KickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) AddAi(ctx context.Context, in *commongrpc.AddAiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/AddAi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Ready(ctx context.Context, in *commongrpc.ReadyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) StartGame(ctx context.Context, in *commongrpc.StartGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) SkipScoreboard(ctx context.Context, in *SkipScoreboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/SkipScoreboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) UpdatePlaySetting(ctx context.Context, in *UpdatePlaySettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/UpdatePlaySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Pick(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Pick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Reveal(ctx context.Context, in *RevealRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Reveal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Capture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) Surrender(ctx context.Context, in *SurrenderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/Surrender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) ClaimDraw(ctx context.Context, in *ClaimDrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/ClaimDraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) AnswerDraw(ctx context.Context, in *AnswerDrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/AnswerDraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) AskExtraSeconds(ctx context.Context, in *AskExtraSecondsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/darkchess.ActionService/AskExtraSeconds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServiceServer is the server API for ActionService service.
// All implementations must embed UnimplementedActionServiceServer
// for forward compatibility
type ActionServiceServer interface {
	Resync(context.Context, *commongrpc.ResyncRequest) (*emptypb.Empty, error)
	Kick(context.Context, *commongrpc.KickRequest) (*emptypb.Empty, error)
	AddAi(context.Context, *commongrpc.AddAiRequest) (*emptypb.Empty, error)
	Ready(context.Context, *commongrpc.ReadyRequest) (*emptypb.Empty, error)
	StartGame(context.Context, *commongrpc.StartGameRequest) (*emptypb.Empty, error)
	SkipScoreboard(context.Context, *SkipScoreboardRequest) (*emptypb.Empty, error)
	UpdatePlaySetting(context.Context, *UpdatePlaySettingRequest) (*emptypb.Empty, error)
	Pick(context.Context, *PickRequest) (*emptypb.Empty, error)
	Reveal(context.Context, *RevealRequest) (*emptypb.Empty, error)
	Move(context.Context, *MoveRequest) (*emptypb.Empty, error)
	Capture(context.Context, *CaptureRequest) (*emptypb.Empty, error)
	Surrender(context.Context, *SurrenderRequest) (*emptypb.Empty, error)
	ClaimDraw(context.Context, *ClaimDrawRequest) (*emptypb.Empty, error)
	AnswerDraw(context.Context, *AnswerDrawRequest) (*emptypb.Empty, error)
	AskExtraSeconds(context.Context, *AskExtraSecondsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedActionServiceServer()
}

// UnimplementedActionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionServiceServer struct {
}

func (UnimplementedActionServiceServer) Resync(context.Context, *commongrpc.ResyncRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resync not implemented")
}
func (UnimplementedActionServiceServer) Kick(context.Context, *commongrpc.KickRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (UnimplementedActionServiceServer) AddAi(context.Context, *commongrpc.AddAiRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAi not implemented")
}
func (UnimplementedActionServiceServer) Ready(context.Context, *commongrpc.ReadyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedActionServiceServer) StartGame(context.Context, *commongrpc.StartGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedActionServiceServer) SkipScoreboard(context.Context, *SkipScoreboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipScoreboard not implemented")
}
func (UnimplementedActionServiceServer) UpdatePlaySetting(context.Context, *UpdatePlaySettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaySetting not implemented")
}
func (UnimplementedActionServiceServer) Pick(context.Context, *PickRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pick not implemented")
}
func (UnimplementedActionServiceServer) Reveal(context.Context, *RevealRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reveal not implemented")
}
func (UnimplementedActionServiceServer) Move(context.Context, *MoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedActionServiceServer) Capture(context.Context, *CaptureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedActionServiceServer) Surrender(context.Context, *SurrenderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Surrender not implemented")
}
func (UnimplementedActionServiceServer) ClaimDraw(context.Context, *ClaimDrawRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimDraw not implemented")
}
func (UnimplementedActionServiceServer) AnswerDraw(context.Context, *AnswerDrawRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerDraw not implemented")
}
func (UnimplementedActionServiceServer) AskExtraSeconds(context.Context, *AskExtraSecondsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskExtraSeconds not implemented")
}
func (UnimplementedActionServiceServer) mustEmbedUnimplementedActionServiceServer() {}

// UnsafeActionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServiceServer will
// result in compilation errors.
type UnsafeActionServiceServer interface {
	mustEmbedUnimplementedActionServiceServer()
}

func RegisterActionServiceServer(s grpc.ServiceRegistrar, srv ActionServiceServer) {
	s.RegisterService(&ActionService_ServiceDesc, srv)
}

func _ActionService_Resync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.ResyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Resync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Resync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Resync(ctx, req.(*commongrpc.ResyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.KickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Kick(ctx, req.(*commongrpc.KickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_AddAi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.AddAiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).AddAi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/AddAi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).AddAi(ctx, req.(*commongrpc.AddAiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Ready(ctx, req.(*commongrpc.ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commongrpc.StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).StartGame(ctx, req.(*commongrpc.StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_SkipScoreboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipScoreboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).SkipScoreboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/SkipScoreboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).SkipScoreboard(ctx, req.(*SkipScoreboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_UpdatePlaySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaySettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).UpdatePlaySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/UpdatePlaySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).UpdatePlaySetting(ctx, req.(*UpdatePlaySettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Pick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Pick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Pick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Pick(ctx, req.(*PickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Reveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Reveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Reveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Reveal(ctx, req.(*RevealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Capture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Capture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Capture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Capture(ctx, req.(*CaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_Surrender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurrenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).Surrender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/Surrender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).Surrender(ctx, req.(*SurrenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_ClaimDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimDrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).ClaimDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/ClaimDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).ClaimDraw(ctx, req.(*ClaimDrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_AnswerDraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerDrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).AnswerDraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/AnswerDraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).AnswerDraw(ctx, req.(*AnswerDrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_AskExtraSeconds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskExtraSecondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).AskExtraSeconds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darkchess.ActionService/AskExtraSeconds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).AskExtraSeconds(ctx, req.(*AskExtraSecondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionService_ServiceDesc is the grpc.ServiceDesc for ActionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "darkchess.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resync",
			Handler:    _ActionService_Resync_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _ActionService_Kick_Handler,
		},
		{
			MethodName: "AddAi",
			Handler:    _ActionService_AddAi_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _ActionService_Ready_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _ActionService_StartGame_Handler,
		},
		{
			MethodName: "SkipScoreboard",
			Handler:    _ActionService_SkipScoreboard_Handler,
		},
		{
			MethodName: "UpdatePlaySetting",
			Handler:    _ActionService_UpdatePlaySetting_Handler,
		},
		{
			MethodName: "Pick",
			Handler:    _ActionService_Pick_Handler,
		},
		{
			MethodName: "Reveal",
			Handler:    _ActionService_Reveal_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _ActionService_Move_Handler,
		},
		{
			MethodName: "Capture",
			Handler:    _ActionService_Capture_Handler,
		},
		{
			MethodName: "Surrender",
			Handler:    _ActionService_Surrender_Handler,
		},
		{
			MethodName: "ClaimDraw",
			Handler:    _ActionService_ClaimDraw_Handler,
		},
		{
			MethodName: "AnswerDraw",
			Handler:    _ActionService_AnswerDraw_Handler,
		},
		{
			MethodName: "AskExtraSeconds",
			Handler:    _ActionService_AskExtraSeconds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "darkchess/action_service.proto",
}
