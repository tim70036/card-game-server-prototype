// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: darkchess/model.proto

package darkchessgrpc

import (
	_ "card-game-server-prototype/pkg/grpc"
	commongrpc "card-game-server-prototype/pkg/grpc/commongrpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 在 state.Publish 中放異動的資料。
type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroup       *commongrpc.UserGroup  `protobuf:"bytes,1,opt,name=user_group,json=userGroup,proto3,oneof" json:"user_group,omitempty"`
	RoomInfo        *commongrpc.RoomInfo   `protobuf:"bytes,2,opt,name=room_info,json=roomInfo,proto3,oneof" json:"room_info,omitempty"`
	BuddyGroup      *commongrpc.BuddyGroup `protobuf:"bytes,3,opt,name=buddy_group,json=buddyGroup,proto3,oneof" json:"buddy_group,omitempty"`
	ResyncGameState *GameState             `protobuf:"bytes,4,opt,name=resync_game_state,json=resyncGameState,proto3,oneof" json:"resync_game_state,omitempty"`
	GameInfo        *GameInfo              `protobuf:"bytes,5,opt,name=game_info,json=gameInfo,proto3,oneof" json:"game_info,omitempty"`
	PlayerGroup     *PlayerGroup           `protobuf:"bytes,6,opt,name=player_group,json=playerGroup,proto3,oneof" json:"player_group,omitempty"`
	PlaySetting     *PlaySetting           `protobuf:"bytes,7,opt,name=play_setting,json=playSetting,proto3,oneof" json:"play_setting,omitempty"`
	Board           *Board                 `protobuf:"bytes,8,opt,name=board,proto3,oneof" json:"board,omitempty"`
	CapturedPieces  *CapturedPieces        `protobuf:"bytes,9,opt,name=captured_pieces,json=capturedPieces,proto3,oneof" json:"captured_pieces,omitempty"`
	ClaimDraw       *ClaimDraw             `protobuf:"bytes,10,opt,name=claim_draw,json=claimDraw,proto3,oneof" json:"claim_draw,omitempty"`
	Surrender       *Surrender             `protobuf:"bytes,11,opt,name=surrender,proto3,oneof" json:"surrender,omitempty"`
	PickResult      *PickResult            `protobuf:"bytes,12,opt,name=pick_result,json=pickResult,proto3,oneof" json:"pick_result,omitempty"`
	ActionHintGroup *ActionHintGroup       `protobuf:"bytes,13,opt,name=action_hint_group,json=actionHintGroup,proto3,oneof" json:"action_hint_group,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{0}
}

func (x *Model) GetUserGroup() *commongrpc.UserGroup {
	if x != nil {
		return x.UserGroup
	}
	return nil
}

func (x *Model) GetRoomInfo() *commongrpc.RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *Model) GetBuddyGroup() *commongrpc.BuddyGroup {
	if x != nil {
		return x.BuddyGroup
	}
	return nil
}

func (x *Model) GetResyncGameState() *GameState {
	if x != nil {
		return x.ResyncGameState
	}
	return nil
}

func (x *Model) GetGameInfo() *GameInfo {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *Model) GetPlayerGroup() *PlayerGroup {
	if x != nil {
		return x.PlayerGroup
	}
	return nil
}

func (x *Model) GetPlaySetting() *PlaySetting {
	if x != nil {
		return x.PlaySetting
	}
	return nil
}

func (x *Model) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *Model) GetCapturedPieces() *CapturedPieces {
	if x != nil {
		return x.CapturedPieces
	}
	return nil
}

func (x *Model) GetClaimDraw() *ClaimDraw {
	if x != nil {
		return x.ClaimDraw
	}
	return nil
}

func (x *Model) GetSurrender() *Surrender {
	if x != nil {
		return x.Surrender
	}
	return nil
}

func (x *Model) GetPickResult() *PickResult {
	if x != nil {
		return x.PickResult
	}
	return nil
}

func (x *Model) GetActionHintGroup() *ActionHintGroup {
	if x != nil {
		return x.ActionHintGroup
	}
	return nil
}

type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId     string       `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	RoundCount int32        `protobuf:"varint,2,opt,name=round_count,json=roundCount,proto3" json:"round_count,omitempty"`
	Setting    *GameSetting `protobuf:"bytes,3,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{1}
}

func (x *GameInfo) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameInfo) GetRoundCount() int32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *GameInfo) GetSetting() *GameSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type GameSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMetaUid             string `protobuf:"bytes,1,opt,name=game_meta_uid,json=gameMetaUid,proto3" json:"game_meta_uid,omitempty"`
	TotalRoundCount         int32  `protobuf:"varint,2,opt,name=total_round_count,json=totalRoundCount,proto3" json:"total_round_count,omitempty"`
	TurnSeconds             int32  `protobuf:"varint,3,opt,name=turn_seconds,json=turnSeconds,proto3" json:"turn_seconds,omitempty"`
	ExtraTurnSeconds        int32  `protobuf:"varint,4,opt,name=extra_turn_seconds,json=extraTurnSeconds,proto3" json:"extra_turn_seconds,omitempty"`
	AnteAmount              int32  `protobuf:"varint,5,opt,name=ante_amount,json=anteAmount,proto3" json:"ante_amount,omitempty"`
	EnterLimit              int32  `protobuf:"varint,6,opt,name=enter_limit,json=enterLimit,proto3" json:"enter_limit,omitempty"`
	WaterPct                int32  `protobuf:"varint,7,opt,name=water_pct,json=waterPct,proto3" json:"water_pct,omitempty"`
	MaxChaseSamePieceCount  int32  `protobuf:"varint,8,opt,name=max_chase_same_piece_count,json=maxChaseSamePieceCount,proto3" json:"max_chase_same_piece_count,omitempty"`
	MaxRepeatMoves          int32  `protobuf:"varint,9,opt,name=max_repeat_moves,json=maxRepeatMoves,proto3" json:"max_repeat_moves,omitempty"`
	IsCaptureTurnedPieces   bool   `protobuf:"varint,10,opt,name=is_capture_turned_pieces,json=isCaptureTurnedPieces,proto3" json:"is_capture_turned_pieces,omitempty"`
	IsCaptureTurnDownPieces bool   `protobuf:"varint,11,opt,name=is_capture_turn_down_pieces,json=isCaptureTurnDownPieces,proto3" json:"is_capture_turn_down_pieces,omitempty"`
	IsCaptureTurnDownPiece  bool   `protobuf:"varint,12,opt,name=is_capture_turn_down_piece,json=isCaptureTurnDownPiece,proto3" json:"is_capture_turn_down_piece,omitempty"`
	HasRookRules            bool   `protobuf:"varint,13,opt,name=has_rook_rules,json=hasRookRules,proto3" json:"has_rook_rules,omitempty"`
	HasBishopRules          bool   `protobuf:"varint,14,opt,name=has_bishop_rules,json=hasBishopRules,proto3" json:"has_bishop_rules,omitempty"`
}

func (x *GameSetting) Reset() {
	*x = GameSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSetting) ProtoMessage() {}

func (x *GameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSetting.ProtoReflect.Descriptor instead.
func (*GameSetting) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{2}
}

func (x *GameSetting) GetGameMetaUid() string {
	if x != nil {
		return x.GameMetaUid
	}
	return ""
}

func (x *GameSetting) GetTotalRoundCount() int32 {
	if x != nil {
		return x.TotalRoundCount
	}
	return 0
}

func (x *GameSetting) GetTurnSeconds() int32 {
	if x != nil {
		return x.TurnSeconds
	}
	return 0
}

func (x *GameSetting) GetExtraTurnSeconds() int32 {
	if x != nil {
		return x.ExtraTurnSeconds
	}
	return 0
}

func (x *GameSetting) GetAnteAmount() int32 {
	if x != nil {
		return x.AnteAmount
	}
	return 0
}

func (x *GameSetting) GetEnterLimit() int32 {
	if x != nil {
		return x.EnterLimit
	}
	return 0
}

func (x *GameSetting) GetWaterPct() int32 {
	if x != nil {
		return x.WaterPct
	}
	return 0
}

func (x *GameSetting) GetMaxChaseSamePieceCount() int32 {
	if x != nil {
		return x.MaxChaseSamePieceCount
	}
	return 0
}

func (x *GameSetting) GetMaxRepeatMoves() int32 {
	if x != nil {
		return x.MaxRepeatMoves
	}
	return 0
}

func (x *GameSetting) GetIsCaptureTurnedPieces() bool {
	if x != nil {
		return x.IsCaptureTurnedPieces
	}
	return false
}

func (x *GameSetting) GetIsCaptureTurnDownPieces() bool {
	if x != nil {
		return x.IsCaptureTurnDownPieces
	}
	return false
}

func (x *GameSetting) GetIsCaptureTurnDownPiece() bool {
	if x != nil {
		return x.IsCaptureTurnDownPiece
	}
	return false
}

func (x *GameSetting) GetHasRookRules() bool {
	if x != nil {
		return x.HasRookRules
	}
	return false
}

func (x *GameSetting) GetHasBishopRules() bool {
	if x != nil {
		return x.HasBishopRules
	}
	return false
}

type ActionHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                      string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TurnDuration             *durationpb.Duration `protobuf:"bytes,2,opt,name=turn_duration,json=turnDuration,proto3" json:"turn_duration,omitempty"`
	TurnCount                int32                `protobuf:"varint,3,opt,name=turn_count,json=turnCount,proto3" json:"turn_count,omitempty"`
	RemainingTimeExtendCount int32                `protobuf:"varint,4,opt,name=remaining_time_extend_count,json=remainingTimeExtendCount,proto3" json:"remaining_time_extend_count,omitempty"`
	RemainingDrawOfferCount  int32                `protobuf:"varint,5,opt,name=remaining_draw_offer_count,json=remainingDrawOfferCount,proto3" json:"remaining_draw_offer_count,omitempty"`
	FreezeCell               *Cell                `protobuf:"bytes,6,opt,name=freeze_cell,json=freezeCell,proto3,oneof" json:"freeze_cell,omitempty"`
}

func (x *ActionHint) Reset() {
	*x = ActionHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionHint) ProtoMessage() {}

func (x *ActionHint) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionHint.ProtoReflect.Descriptor instead.
func (*ActionHint) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{3}
}

func (x *ActionHint) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ActionHint) GetTurnDuration() *durationpb.Duration {
	if x != nil {
		return x.TurnDuration
	}
	return nil
}

func (x *ActionHint) GetTurnCount() int32 {
	if x != nil {
		return x.TurnCount
	}
	return 0
}

func (x *ActionHint) GetRemainingTimeExtendCount() int32 {
	if x != nil {
		return x.RemainingTimeExtendCount
	}
	return 0
}

func (x *ActionHint) GetRemainingDrawOfferCount() int32 {
	if x != nil {
		return x.RemainingDrawOfferCount
	}
	return 0
}

func (x *ActionHint) GetFreezeCell() *Cell {
	if x != nil {
		return x.FreezeCell
	}
	return nil
}

type ActionHintGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionHints      map[string]*ActionHint `protobuf:"bytes,1,rep,name=action_hints,json=actionHints,proto3" json:"action_hints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepeatMovesCount int32                  `protobuf:"varint,2,opt,name=repeat_moves_count,json=repeatMovesCount,proto3" json:"repeat_moves_count,omitempty"`
	LastAction       *LastActionCell        `protobuf:"bytes,3,opt,name=last_action,json=lastAction,proto3" json:"last_action,omitempty"`
}

func (x *ActionHintGroup) Reset() {
	*x = ActionHintGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionHintGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionHintGroup) ProtoMessage() {}

func (x *ActionHintGroup) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionHintGroup.ProtoReflect.Descriptor instead.
func (*ActionHintGroup) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{4}
}

func (x *ActionHintGroup) GetActionHints() map[string]*ActionHint {
	if x != nil {
		return x.ActionHints
	}
	return nil
}

func (x *ActionHintGroup) GetRepeatMovesCount() int32 {
	if x != nil {
		return x.RepeatMovesCount
	}
	return 0
}

func (x *ActionHintGroup) GetLastAction() *LastActionCell {
	if x != nil {
		return x.LastAction
	}
	return nil
}

type PickResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pieces   map[string]commongrpc.CnChessPiece `protobuf:"bytes,1,rep,name=pieces,proto3" json:"pieces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=common.CnChessPiece"`
	FirstUid *string                            `protobuf:"bytes,2,opt,name=first_uid,json=firstUid,proto3,oneof" json:"first_uid,omitempty"`
}

func (x *PickResult) Reset() {
	*x = PickResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickResult) ProtoMessage() {}

func (x *PickResult) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickResult.ProtoReflect.Descriptor instead.
func (*PickResult) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{5}
}

func (x *PickResult) GetPieces() map[string]commongrpc.CnChessPiece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *PickResult) GetFirstUid() string {
	if x != nil && x.FirstUid != nil {
		return *x.FirstUid
	}
	return ""
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string                      `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChessColor commongrpc.CnChessColorType `protobuf:"varint,2,opt,name=chess_color,json=chessColor,proto3,enum=common.CnChessColorType" json:"chess_color,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{6}
}

func (x *Player) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Player) GetChessColor() commongrpc.CnChessColorType {
	if x != nil {
		return x.ChessColor
	}
	return commongrpc.CnChessColorType(0)
}

type PlayerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players map[string]*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlayerGroup) Reset() {
	*x = PlayerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGroup) ProtoMessage() {}

func (x *PlayerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGroup.ProtoReflect.Descriptor instead.
func (*PlayerGroup) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{7}
}

func (x *PlayerGroup) GetPlayers() map[string]*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type PlaySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAuto bool `protobuf:"varint,1,opt,name=is_auto,json=isAuto,proto3" json:"is_auto,omitempty"`
}

func (x *PlaySetting) Reset() {
	*x = PlaySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySetting) ProtoMessage() {}

func (x *PlaySetting) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySetting.ProtoReflect.Descriptor instead.
func (*PlaySetting) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{8}
}

func (x *PlaySetting) GetIsAuto() bool {
	if x != nil {
		return x.IsAuto
	}
	return false
}

// broadcast for claimer.
// answer don't need to broadcast this message weather accept or reject.
type ClaimDraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimUid  string `protobuf:"bytes,1,opt,name=claim_uid,json=claimUid,proto3" json:"claim_uid,omitempty"` // act uid
	ClaimTurn int32  `protobuf:"varint,2,opt,name=claim_turn,json=claimTurn,proto3" json:"claim_turn,omitempty"`
	Claimed   bool   `protobuf:"varint,3,opt,name=claimed,proto3" json:"claimed,omitempty"`
	Answered  bool   `protobuf:"varint,4,opt,name=answered,proto3" json:"answered,omitempty"`
}

func (x *ClaimDraw) Reset() {
	*x = ClaimDraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimDraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimDraw) ProtoMessage() {}

func (x *ClaimDraw) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimDraw.ProtoReflect.Descriptor instead.
func (*ClaimDraw) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{9}
}

func (x *ClaimDraw) GetClaimUid() string {
	if x != nil {
		return x.ClaimUid
	}
	return ""
}

func (x *ClaimDraw) GetClaimTurn() int32 {
	if x != nil {
		return x.ClaimTurn
	}
	return 0
}

func (x *ClaimDraw) GetClaimed() bool {
	if x != nil {
		return x.Claimed
	}
	return false
}

func (x *ClaimDraw) GetAnswered() bool {
	if x != nil {
		return x.Answered
	}
	return false
}

type Surrender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Surrender) Reset() {
	*x = Surrender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_darkchess_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Surrender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Surrender) ProtoMessage() {}

func (x *Surrender) ProtoReflect() protoreflect.Message {
	mi := &file_darkchess_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Surrender.ProtoReflect.Descriptor instead.
func (*Surrender) Descriptor() ([]byte, []int) {
	return file_darkchess_model_proto_rawDescGZIP(), []int{10}
}

func (x *Surrender) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

var File_darkchess_model_proto protoreflect.FileDescriptor

var file_darkchess_model_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x1a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf1, 0x07, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x02, 0x52,
	0x0a, 0x62, 0x75, 0x64, 0x64, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x72, 0x6b,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x04, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x05, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x06, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x05,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61,
	0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x07, 0x52,
	0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x48, 0x08, 0x52,
	0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x48, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x09,
	0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x0a, 0x52, 0x09, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x72,
	0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x0b, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x76, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x72,
	0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xf6, 0x04, 0x0a, 0x0b,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x6e, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x6e, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x77, 0x61, 0x74, 0x65, 0x72, 0x50, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x69,
	0x65, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x73, 0x65, 0x53, 0x61, 0x6d, 0x65, 0x50, 0x69, 0x65,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4d, 0x6f, 0x76, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73,
	0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x69, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x6f,
	0x77, 0x6e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x6b,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61,
	0x73, 0x52, 0x6f, 0x6f, 0x6b, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61,
	0x73, 0x5f, 0x62, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x42, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x72, 0x61, 0x77, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0xa2, 0x02, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4e, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4d,
	0x6f, 0x76, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x55, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x72,
	0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a,
	0x0a, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70,
	0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61,
	0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x69, 0x65, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x0b, 0x50, 0x69, 0x65, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6e, 0x43, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9b,
	0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x4d, 0x0a,
	0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x44, 0x72, 0x61,
	0x77, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x22, 0x1d, 0x0a, 0x09, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x42, 0x72, 0x5a, 0x32, 0x63, 0x61, 0x72, 0x64, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x67, 0x72, 0x70, 0x63, 0x3b, 0xaa, 0x02, 0x1f, 0x4a, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x44, 0x61, 0x72, 0x6b, 0x43, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xca, 0xb2, 0x04, 0x18, 0x4a, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x44, 0x61, 0x72,
	0x6b, 0x43, 0x68, 0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_darkchess_model_proto_rawDescOnce sync.Once
	file_darkchess_model_proto_rawDescData = file_darkchess_model_proto_rawDesc
)

func file_darkchess_model_proto_rawDescGZIP() []byte {
	file_darkchess_model_proto_rawDescOnce.Do(func() {
		file_darkchess_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_darkchess_model_proto_rawDescData)
	})
	return file_darkchess_model_proto_rawDescData
}

var file_darkchess_model_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_darkchess_model_proto_goTypes = []interface{}{
	(*Model)(nil),                    // 0: darkchess.Model
	(*GameInfo)(nil),                 // 1: darkchess.GameInfo
	(*GameSetting)(nil),              // 2: darkchess.GameSetting
	(*ActionHint)(nil),               // 3: darkchess.ActionHint
	(*ActionHintGroup)(nil),          // 4: darkchess.ActionHintGroup
	(*PickResult)(nil),               // 5: darkchess.PickResult
	(*Player)(nil),                   // 6: darkchess.Player
	(*PlayerGroup)(nil),              // 7: darkchess.PlayerGroup
	(*PlaySetting)(nil),              // 8: darkchess.PlaySetting
	(*ClaimDraw)(nil),                // 9: darkchess.ClaimDraw
	(*Surrender)(nil),                // 10: darkchess.Surrender
	nil,                              // 11: darkchess.ActionHintGroup.ActionHintsEntry
	nil,                              // 12: darkchess.PickResult.PiecesEntry
	nil,                              // 13: darkchess.PlayerGroup.PlayersEntry
	(*commongrpc.UserGroup)(nil),     // 14: common.UserGroup
	(*commongrpc.RoomInfo)(nil),      // 15: common.RoomInfo
	(*commongrpc.BuddyGroup)(nil),    // 16: common.BuddyGroup
	(*GameState)(nil),                // 17: darkchess.GameState
	(*Board)(nil),                    // 18: darkchess.Board
	(*CapturedPieces)(nil),           // 19: darkchess.CapturedPieces
	(*durationpb.Duration)(nil),      // 20: google.protobuf.Duration
	(*Cell)(nil),                     // 21: darkchess.Cell
	(*LastActionCell)(nil),           // 22: darkchess.LastActionCell
	(commongrpc.CnChessColorType)(0), // 23: common.CnChessColorType
	(commongrpc.CnChessPiece)(0),     // 24: common.CnChessPiece
}
var file_darkchess_model_proto_depIdxs = []int32{
	14, // 0: darkchess.Model.user_group:type_name -> common.UserGroup
	15, // 1: darkchess.Model.room_info:type_name -> common.RoomInfo
	16, // 2: darkchess.Model.buddy_group:type_name -> common.BuddyGroup
	17, // 3: darkchess.Model.resync_game_state:type_name -> darkchess.GameState
	1,  // 4: darkchess.Model.game_info:type_name -> darkchess.GameInfo
	7,  // 5: darkchess.Model.player_group:type_name -> darkchess.PlayerGroup
	8,  // 6: darkchess.Model.play_setting:type_name -> darkchess.PlaySetting
	18, // 7: darkchess.Model.board:type_name -> darkchess.Board
	19, // 8: darkchess.Model.captured_pieces:type_name -> darkchess.CapturedPieces
	9,  // 9: darkchess.Model.claim_draw:type_name -> darkchess.ClaimDraw
	10, // 10: darkchess.Model.surrender:type_name -> darkchess.Surrender
	5,  // 11: darkchess.Model.pick_result:type_name -> darkchess.PickResult
	4,  // 12: darkchess.Model.action_hint_group:type_name -> darkchess.ActionHintGroup
	2,  // 13: darkchess.GameInfo.setting:type_name -> darkchess.GameSetting
	20, // 14: darkchess.ActionHint.turn_duration:type_name -> google.protobuf.Duration
	21, // 15: darkchess.ActionHint.freeze_cell:type_name -> darkchess.Cell
	11, // 16: darkchess.ActionHintGroup.action_hints:type_name -> darkchess.ActionHintGroup.ActionHintsEntry
	22, // 17: darkchess.ActionHintGroup.last_action:type_name -> darkchess.LastActionCell
	12, // 18: darkchess.PickResult.pieces:type_name -> darkchess.PickResult.PiecesEntry
	23, // 19: darkchess.Player.chess_color:type_name -> common.CnChessColorType
	13, // 20: darkchess.PlayerGroup.players:type_name -> darkchess.PlayerGroup.PlayersEntry
	3,  // 21: darkchess.ActionHintGroup.ActionHintsEntry.value:type_name -> darkchess.ActionHint
	24, // 22: darkchess.PickResult.PiecesEntry.value:type_name -> common.CnChessPiece
	6,  // 23: darkchess.PlayerGroup.PlayersEntry.value:type_name -> darkchess.Player
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_darkchess_model_proto_init() }
func file_darkchess_model_proto_init() {
	if File_darkchess_model_proto != nil {
		return
	}
	file_darkchess_game_state_proto_init()
	file_darkchess_board_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_darkchess_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionHintGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimDraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_darkchess_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Surrender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_darkchess_model_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_darkchess_model_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_darkchess_model_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_darkchess_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_darkchess_model_proto_goTypes,
		DependencyIndexes: file_darkchess_model_proto_depIdxs,
		MessageInfos:      file_darkchess_model_proto_msgTypes,
	}.Build()
	File_darkchess_model_proto = out.File
	file_darkchess_model_proto_rawDesc = nil
	file_darkchess_model_proto_goTypes = nil
	file_darkchess_model_proto_depIdxs = nil
}
